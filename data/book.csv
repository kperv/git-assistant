chapter,section,text
1.Getting Started,1.Getting Started,"This chapter will be about getting started with Git.
We will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.
At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so. What is “version control”, and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer. If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead."
1.Getting Started,Local Version Control Systems,"Many people’s version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they’re clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to. To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control. One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches."
1.Getting Started,Centralized Version Control Systems,"The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place.
For many years, this has been the standard for version control. This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it’s far easier to administer a CVCS than it is to deal with local databases on every client. However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they’re working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything — the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCSs suffer from this same problem — whenever you have the entire history of the project in a single place, you risk losing everything."
1.Getting Started,1.Getting Started,"This chapter will be about getting started with Git.
We will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.
At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so. What is “version control”, and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer. If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead."
1.Getting Started,Local Version Control Systems,"Many people’s version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they’re clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to. To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control. One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches."
1.Getting Started,Centralized Version Control Systems,"The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place.
For many years, this has been the standard for version control. This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it’s far easier to administer a CVCS than it is to deal with local databases on every client. However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they’re working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything — the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCSs suffer from this same problem — whenever you have the entire history of the project in a single place, you risk losing everything."
1.Getting Started,1.Getting Started,"So, what is Git in a nutshell?
This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.
As you learn Git, try to clear your mind of the things you may know about other VCSs, such as CVS, Subversion or Perforce — doing so will help you avoid subtle confusion when using the tool.
Even though Git’s user interface is fairly similar to these other VCSs, Git stores and thinks about information in a very different way, and understanding these differences will help you avoid becoming confused while using it."
1.Getting Started,"Snapshots, Not Differences","The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
Conceptually, most other systems store information as a list of file-based changes.
These other systems (CVS, Subversion, Perforce, and so on) think of the information they store as a set of files and the changes made to each file over time (this is commonly described as delta-based version control). Git doesn’t think of or store its data this way.
Instead, Git thinks of its data more like a series of snapshots of a miniature filesystem.
With Git, every time you commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.
To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.
Git thinks about its data more like a stream of snapshots. This is an important distinction between Git and nearly all other VCSs.
It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.
This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.
We’ll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in Git Branching."
1.Getting Started,Nearly Every Operation Is Local,"Most operations in Git need only local files and resources to operate — generally no information is needed from another computer on your network.
If you’re used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous. For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you — it simply reads it directly from your local database.
This means you see the project history almost instantly.
If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally. This also means that there is very little you can’t do if you’re offline or off VPN.
If you get on an airplane or a train and want to do a little work, you can commit happily (to your local copy, remember?) until you get to a network connection to upload.
If you go home and can’t get your VPN client working properly, you can still work.
In many other systems, doing so is either impossible or painful.
In Perforce, for example, you can’t do much when you aren’t connected to the server; in Subversion and CVS, you can edit files, but you can’t commit changes to your database (because your database is offline).
This may not seem like a huge deal, but you may be surprised what a big difference it can make."
1.Getting Started,Git Has Integrity,"Everything in Git is checksummed before it is stored and is then referred to by that checksum.
This means it’s impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy.
You can’t lose information in transit or get file corruption without Git being able to detect it. The mechanism that Git uses for this checksumming is called a SHA-1 hash.
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
A SHA-1 hash looks something like this: 24b9da6552252987aa493b52f8696cd6d3b00373 You will see these hash values all over the place in Git because it uses them so much.
In fact, Git stores everything in its database not by file name but by the hash value of its contents."
1.Getting Started,Git Generally Only Adds Data,"When you do actions in Git, nearly all of them only add data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As with any VCS, you can lose or mess up changes you haven’t committed yet, but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository. This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see Undoing Things."
1.Getting Started,1.Getting Started,"Before you start using Git, you have to make it available on your computer.
Even if it’s already installed, it’s probably a good idea to update to the latest version.
You can either install it as a package or via another installer, or download the source code and compile it yourself. This book was written using Git version 2.
Since Git is quite excellent at preserving backwards compatibility, any recent version should work just fine.
Though most of the commands we use should work even in ancient versions of Git, some of them might not or might act slightly differently."
1.Getting Started,Installing on Linux,"If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the package management tool that comes with your distribution.
If you’re on Fedora (or any closely-related RPM-based distribution, such as RHEL or CentOS), you can use dnf: $ sudo dnf install git-all If you’re on a Debian-based distribution, such as Ubuntu, try apt: $ sudo apt install git-all For more options, there are instructions for installing on several different Unix distributions on the Git website, at https://git-scm.com/download/linux."
1.Getting Started,Installing on macOS,"There are several ways to install Git on macOS.
The easiest is probably to install the Xcode Command Line Tools.
On Mavericks (10.9) or above you can do this simply by trying to run git from the Terminal the very first time. $ git --version If you don’t have it installed already, it will prompt you to install it. If you want a more up to date version, you can also install it via a binary installer.
A macOS Git installer is maintained and available for download at the Git website, at https://git-scm.com/download/mac."
1.Getting Started,Installing on Windows,"There are also a few ways to install Git on Windows.
The most official build is available for download on the Git website.
Just go to https://git-scm.com/download/win and the download will start automatically.
Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://gitforwindows.org. To get an automated installation you can use the Git Chocolatey package.
Note that the Chocolatey package is community maintained."
1.Getting Started,1.Getting Started,"Now that you have Git on your system, you’ll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they’ll stick around between upgrades.
You can also change them at any time by running through the commands again. Git comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates.
These variables can be stored in three different places: [path]/etc/gitconfig file: Contains values applied to every user on the system and all their repositories.
If you pass the option --system to git config, it reads and writes from this file specifically.
Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it. ~/.gitconfig or ~/.config/git/config file: Values specific personally to you, the user.
You can make Git read and write to this file specifically by passing the --global option, and this affects all of the repositories you work with on your system. config file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository.
You can force Git to read from and write to this file with the --local option, but that is in fact the default.
Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly. Each level overrides values in the previous level, so values in .git/config trump those in [path]/etc/gitconfig. On Windows systems, Git looks for the .gitconfig file in the $HOME directory (C:\Users\$USER for most people).
It also still looks for [path]/etc/gitconfig, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at C:\Documents and Settings\All Users\Application Data\Git\config on Windows XP, and in C:\ProgramData\Git\config on Windows Vista and newer.
This config file can only be changed by git config -f <file> as an admin. You can view all of your settings and where they are coming from using: $ git config --list --show-origin"
1.Getting Started,Your Identity,"The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating: $ git config --global user.name ""John Doe""
$ git config --global user.email johndoe@example.com Again, you need to do this only once if you pass the --global option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project. Many of the GUI tools will help you do this when you first run them."
1.Getting Started,Your Editor,"Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system’s default editor. If you want to use a different text editor, such as Emacs, you can do the following: $ git config --global core.editor emacs On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged. In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn’t support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you’ll type something like this: $ git config --global core.editor ""'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"" Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in git config core.editor commands. You may find, if you don’t setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit."
1.Getting Started,Your default branch name,"By default Git will create a branch called master when you create a new repository with git init.
From Git version 2.28 onwards, you can set a different name for the initial branch. To set main as the default branch name do: $ git config --global init.defaultBranch main"
1.Getting Started,1.Getting Started,"If you can read only one chapter to get going with Git, this is it.
This chapter covers every basic command you need to do the vast majority of the things you’ll eventually spend your time doing with Git.
By the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes.
We’ll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories. You typically obtain a Git repository in one of two ways: You can take a local directory that is currently not under version control, and turn it into a Git repository, or You can clone an existing Git repository from elsewhere. In either case, you end up with a Git repository on your local machine, ready for work."
1.Getting Started,Initializing a Repository in an Existing Directory,"If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory.
If you’ve never done this, it looks a little different depending on which system you’re running: for Linux: $ cd /home/user/my_project for macOS: $ cd /Users/user/my_project for Windows: $ cd C:/Users/user/my_project and type: $ git init This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.
At this point, nothing in your project is tracked yet.
See Git Internals for more information about exactly what files are contained in the .git directory you just created. If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.
You can accomplish that with a few git add commands that specify the files you want to track, followed by a git commit: $ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version' We’ll go over what these commands do in just a minute.
At this point, you have a Git repository with tracked files and an initial commit."
1.Getting Started,1.Getting Started,"If you can read only one chapter to get going with Git, this is it.
This chapter covers every basic command you need to do the vast majority of the things you’ll eventually spend your time doing with Git.
By the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes.
We’ll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories. You typically obtain a Git repository in one of two ways: You can take a local directory that is currently not under version control, and turn it into a Git repository, or You can clone an existing Git repository from elsewhere. In either case, you end up with a Git repository on your local machine, ready for work."
1.Getting Started,Initializing a Repository in an Existing Directory,"If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory.
If you’ve never done this, it looks a little different depending on which system you’re running: for Linux: $ cd /home/user/my_project for macOS: $ cd /Users/user/my_project for Windows: $ cd C:/Users/user/my_project and type: $ git init This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.
At this point, nothing in your project is tracked yet.
See Git Internals for more information about exactly what files are contained in the .git directory you just created. If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.
You can accomplish that with a few git add commands that specify the files you want to track, followed by a git commit: $ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version' We’ll go over what these commands do in just a minute.
At this point, you have a Git repository with tracked files and an initial commit."
1.Getting Started,1.Getting Started,"At this point, you should have a bona fide Git repository on your local machine, and a checkout or working copy of all of its files in front of you.
Typically, you’ll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record. Remember that each file in your working directory can be in one of two states: tracked or untracked.
Tracked files are files that were in the last snapshot, as well as any newly staged files; they can be unmodified, modified, or staged.
In short, tracked files are files that Git knows about. Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything. As you edit files, Git sees them as modified, because you’ve changed them since your last commit.
As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats."
1.Getting Started,Checking the Status of Your Files,"The main tool you use to determine which files are in which state is the git status command.
If you run this command directly after a clone, you should see something like this: $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean This means you have a clean working directory; in other words, none of your tracked files are modified.
Git also doesn’t see any untracked files, or they would be listed here.
Finally, the command tells you which branch you’re on and informs you that it has not diverged from the same branch on the server.
For now, that branch is always master, which is the default; you won’t worry about it here.
Git Branching will go over branches and references in detail. GitHub changed the default branch name from master to main in mid-2020, and other Git hosts followed suit.
So you may find that the default branch name in some newly created repositories is main and not master.
In addition, the default branch name can be changed (as you have seen in Your default branch name), so you may see a different name for the default branch. However, Git itself still uses master as the default, so we will use it throughout the book. Let’s say you add a new file to your project, a simple README file.
If the file didn’t exist before, and you run git status, you see your untracked file like so: $ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

    README

nothing added to commit but untracked files present (use ""git add"" to track) You can see that your new README file is untracked, because it’s under the “Untracked files” heading in your status output.
Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit), and which hasn’t yet been staged; Git won’t start including it in your commit snapshots until you explicitly tell it to do so.
It does this so you don’t accidentally begin including generated binary files or other files that you did not mean to include.
You do want to start including README, so let’s start tracking the file."
1.Getting Started,Tracking New Files,"In order to begin tracking a new file, you use the command git add.
To begin tracking the README file, you can run this: $ git add README If you run your status command again, you can see that your README file is now tracked and staged to be committed: $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git restore --staged <file>..."" to unstage)

    new file:   README You can tell that it’s staged because it’s under the “Changes to be committed” heading.
If you commit at this point, the version of the file at the time you ran git add is what will be in the subsequent historical snapshot.
You may recall that when you ran git init earlier, you then ran git add <files> — that was to begin tracking files in your directory.
The git add command takes a path name for either a file or a directory; if it’s a directory, the command adds all the files in that directory recursively."
1.Getting Started,Staging Modified Files,"Let’s change a file that was already tracked.
If you change a previously tracked file called CONTRIBUTING.md and then run your git status command again, you get something that looks like this: $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    new file:   README

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md The CONTRIBUTING.md file appears under a section named “Changes not staged for commit” — which means that a file that is tracked has been modified in the working directory but not yet staged.
To stage it, you run the git add command.
git add is a multipurpose command — you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
It may be helpful to think of it more as “add precisely this content to the next commit” rather than “add this file to the project”.
Let’s run git add now to stage the CONTRIBUTING.md file, and then run git status again: $ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    new file:   README
    modified:   CONTRIBUTING.md Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in CONTRIBUTING.md before you commit it.
You open it again and make that change, and you’re ready to commit.
However, let’s run git status one more time: $ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md What the heck?
Now CONTRIBUTING.md is listed as both staged and unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the git add command.
If you commit now, the version of CONTRIBUTING.md as it was when you last ran the git add command is how it will go into the commit, not the version of the file as it looks in your working directory when you run git commit.
If you modify a file after you run git add, you have to run git add again to stage the latest version of the file: $ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    new file:   README
    modified:   CONTRIBUTING.md"
1.Getting Started,Short Status,"While the git status output is pretty comprehensive, it’s also quite wordy.
Git also has a short status flag so you can see your changes in a more compact way.
If you run git status -s or git status --short you get a far more simplified output from the command: $ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt New files that aren’t tracked have a ?? next to them, new files that have been added to the staging area have an A, modified files have an M and so on.
There are two columns to the output — the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.
So for example in that output, the README file is modified in the working directory but not yet staged, while the lib/simplegit.rb file is modified and staged.
The Rakefile was modified, staged and then modified again, so there are changes to it that are both staged and unstaged."
1.Getting Started,Ignoring Files,"Often, you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named .gitignore.
Here is an example .gitignore file: $ cat .gitignore
*.[oa]
*~ The first line tells Git to ignore any files ending in “.o” or “.a” — object and archive files that may be the product of building your code.
The second line tells Git to ignore all files whose names end with a tilde (~), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a .gitignore file for your new repository before you get going is generally a good idea so you don’t accidentally commit files that you really don’t want in your Git repository. The rules for the patterns you can put in the .gitignore file are as follows: Blank lines or lines starting with # are ignored. Standard glob patterns work, and will be applied recursively throughout the entire working tree. You can start patterns with a forward slash (/) to avoid recursivity. You can end patterns with a forward slash (/) to specify a directory. You can negate a pattern by starting it with an exclamation point (!). Glob patterns are like simplified regular expressions that shells use.
An asterisk (*) matches zero or more characters; [abc] matches any character inside the brackets (in this case a, b, or c); a question mark (?) matches a single character; and brackets enclosing characters separated by a hyphen ([0-9]) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; a/**/z would match a/z, a/b/z, a/b/c/z, and so on. Here is another example .gitignore file: # ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf GitHub maintains a fairly comprehensive list of good .gitignore file examples for dozens of projects and languages at https://github.com/github/gitignore if you want a starting point for your project. In the simple case, a repository might have a single .gitignore file in its root directory, which applies recursively to the entire repository.
However, it is also possible to have additional .gitignore files in subdirectories.
The rules in these nested .gitignore files apply only to the files under the directory where they are located.
The Linux kernel source repository has 206 .gitignore files. It is beyond the scope of this book to get into the details of multiple .gitignore files; see man gitignore for the details."
1.Getting Started,Viewing Your Staged and Unstaged Changes,"If the git status command is too vague for you — you want to know exactly what you changed, not just which files were changed — you can use the git diff command.
We’ll cover git diff in more detail later, but you’ll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although git status answers those questions very generally by listing the file names, git diff shows you the exact lines added and removed — the patch, as it were. Let’s say you edit and stage the README file again and then edit the CONTRIBUTING.md file without staging it.
If you run your git status command, you once again see something like this: $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    modified:   README

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md To see what you’ve changed but not yet staged, type git diff with no other arguments: $ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you’ve made that you haven’t yet staged. If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged.
This command compares your staged changes to your last commit: $ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project It’s important to note that git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.
If you’ve staged all of your changes, git diff will give you no output. For another example, if you stage the CONTRIBUTING.md file and then edit it, you can use git diff to see the changes in the file that are staged and the changes that are unstaged.
If our environment looks like this: $ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md Now you can use git diff to see what is still unstaged: $ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line and git diff --cached to see what you’ve staged so far (--staged and --cached are synonyms): $ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's We will continue to use the git diff command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run git difftool instead of git diff, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run git difftool --tool-help to see what is available on your system."
1.Getting Started,Committing Your Changes,"Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged — any files you have created or modified that you haven’t run git add on since you edited them — won’t go into this commit.
They will stay as modified files on your disk.
In this case, let’s say that the last time you ran git status, you saw that everything was staged, so you’re ready to commit your changes.
The simplest way to commit is to type git commit: $ git commit Doing so launches your editor of choice. This is set by your shell’s EDITOR environment variable — usually vim or emacs, although you can configure it with whatever you want using the git config --global core.editor command as you saw in Getting Started. The editor displays the following text (this example is a Vim screen): # Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
"".git/COMMIT_EDITMSG"" 9L, 283C You can see that the default commit message contains the latest output of the git status command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you’re committing. For an even more explicit reminder of what you’ve modified, you can pass the -v option to git commit.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you’re committing. When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out). Alternatively, you can type your commit message inline with the commit command by specifying it after a -m flag, like this: $ git commit -m ""Story 182: fix benchmarks for speed""
[master 463dc4f] Story 182: fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README Now you’ve created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (master), what SHA-1 checksum the commit has (463dc4f), how many files were changed, and statistics about lines added and removed in the commit. Remember that the commit records the snapshot you set up in your staging area.
Anything you didn’t stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later."
1.Getting Started,Skipping the Staging Area,"Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part: $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use ""git add"" and/or ""git commit -a"")
$ git commit -a -m 'Add new benchmarks'
[master 83e38c7] Add new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-) Notice how you don’t have to run git add on the CONTRIBUTING.md file in this case before you commit.
That’s because the -a flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes."
1.Getting Started,Removing Files,"To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The git rm command does that, and also removes the file from your working directory so you don’t see it as an untracked file the next time around. If you simply remove the file from your working directory, it shows up under the “Changes not staged for commit” (that is, unstaged) area of your git status output: $ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add/rm <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use ""git add"" and/or ""git commit -a"") Then, if you run git rm, it stages the file’s removal: $ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    deleted:    PROJECTS.md The next time you commit, the file will be gone and no longer tracked.
If you modified the file or had already added it to the staging area, you must force the removal with the -f option.
This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from Git. Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your .gitignore file and accidentally staged it, like a large log file or a bunch of .a compiled files.
To do this, use the --cached option: $ git rm --cached README You can pass files, directories, and file-glob patterns to the git rm command.
That means you can do things such as: $ git rm log/\*.log Note the backslash (\) in front of the *.
This is necessary because Git does its own filename expansion in addition to your shell’s filename expansion.
This command removes all files that have the .log extension in the log/ directory.
Or, you can do something like this: $ git rm \*~ This command removes all files whose names end with a ~."
1.Getting Started,1.Getting Started,"After you have created several commits, or if you have cloned a repository with an existing commit history, you’ll probably want to look back to see what has happened.
The most basic and powerful tool to do this is the git log command. These examples use a very simple project called “simplegit”.
To get the project, run: $ git clone https://github.com/schacon/simplegit-progit When you run git log in this project, you should get output that looks something like this: $ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit By default, with no arguments, git log lists the commits made in that repository in reverse chronological order; that is, the most recent commits show up first.
As you can see, this command lists each commit with its SHA-1 checksum, the author’s name and email, the date written, and the commit message. A huge number and variety of options to the git log command are available to show you exactly what you’re looking for.
Here, we’ll show you some of the most popular. One of the more helpful options is -p or --patch, which shows the difference (the patch output) introduced in each commit.
You can also limit the number of log entries displayed, such as using -2 to show only the last two entries. $ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   ""simplegit""
-    s.version   =   ""0.1.0""
+    s.version   =   ""0.1.1""
     s.author    =   ""Scott Chacon""
     s.email     =   ""schacon@gee-mail.com""
     s.summary   =   ""A simple gem for using Git in Ruby code.""

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end This option displays the same information but with a diff directly following each entry.
This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.
You can also use a series of summarizing options with git log.
For example, if you want to see some abbreviated stats for each commit, you can use the --stat option: $ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+) As you can see, the --stat option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.
It also puts a summary of the information at the end. Another really useful option is --pretty.
This option changes the log output to formats other than the default.
A few prebuilt option values are available for you to use.
The oneline value for this option prints each commit on a single line, which is useful if you’re looking at a lot of commits.
In addition, the short, full, and fuller values show the output in roughly the same format but with less or more information, respectively: $ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 Change version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Remove unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 Initial commit The most interesting option value is format, which allows you to specify your own log output format.
This is especially useful when you’re generating output for machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git: $ git log --pretty=format:""%h - %an, %ar : %s""
ca82a6d - Scott Chacon, 6 years ago : Change version number
085bb3b - Scott Chacon, 6 years ago : Remove unnecessary test
a11bef0 - Scott Chacon, 6 years ago : Initial commit Useful specifiers for git log --pretty=format lists some of the more useful specifiers that format takes. %H Commit hash %h Abbreviated commit hash %T Tree hash %t Abbreviated tree hash %P Parent hashes %p Abbreviated parent hashes %an Author name %ae Author email %ad Author date (format respects the --date=option) %ar Author date, relative %cn Committer name %ce Committer email %cd Committer date %cr Committer date, relative %s Subject You may be wondering what the difference is between author and committer.
The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.
So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit — you as the author, and the core member as the committer.
We’ll cover this distinction a bit more in Distributed Git. The oneline and format option values are particularly useful with another log option called --graph.
This option adds a nice little ASCII graph showing your branch and merge history: $ git log --pretty=format:""%h %s"" --graph
* 2d3acf9 Ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of https://github.com/dustin/grit.git
|\
| * 420eac9 Add method for getting the current branch
* | 30e367c Timeout code and tests
* | 5a09431 Add timeout protection to grit
* | e1193f8 Support for heads with slashes in them
|/
* d6016bc Require time for xmlschema
*  11d191e Merge branch 'defunkt' into local This type of output will become more interesting as we go through branching and merging in the next chapter. Those are only some simple output-formatting options to git log — there are many more.
Common options to git log lists the options we’ve covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command. -p Show the patch introduced with each commit. --stat Show statistics for files modified in each commit. --shortstat Display only the changed/insertions/deletions line from the --stat command. --name-only Show the list of files modified after the commit information. --name-status Show the list of files affected with added/modified/deleted information as well. --abbrev-commit Show only the first few characters of the SHA-1 checksum instead of all 40. --relative-date Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format. --graph Display an ASCII graph of the branch and merge history beside the log output. --pretty Show commits in an alternate format. Option values include oneline, short, full, fuller, and format (where you specify your own format). --oneline Shorthand for --pretty=oneline --abbrev-commit used together."
1.Getting Started,1.Getting Started,"At any stage, you may want to undo something.
Here, we’ll review a few basic tools for undoing changes that you’ve made.
Be careful, because you can’t always undo some of these undos.
This is one of the few areas in Git where you may lose some work if you do it wrong. One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the --amend option: $ git commit --amend This command takes your staging area and uses it for the commit.
If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message. The same commit-message editor fires up, but it already contains the message of your previous commit.
You can edit the message the same as always, but it overwrites your previous commit. As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this: $ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend You end up with a single commit — the second commit replaces the results of the first. It’s important to understand that when you’re amending your last commit, you’re not so much fixing it as replacing it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place.
Effectively, it’s as if the previous commit never happened, and it won’t show up in your repository history. The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, “Oops, forgot to add a file” or “Darn, fixing a typo in last commit”. Only amend commits that are still local and have not been pushed somewhere.
Amending previously pushed commits and force pushing the branch will cause problems for your collaborators.
For more on what happens when you do this and how to recover if you’re on the receiving end read The Perils of Rebasing."
1.Getting Started,Unstaging a Staged File,"The next two sections demonstrate how to work with your staging area and working directory changes.
The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both.
How can you unstage one of the two?
The git status command reminds you: $ git add *
$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md Right below the “Changes to be committed” text, it says use git reset HEAD <file>…​ to unstage.
So, let’s use that advice to unstage the CONTRIBUTING.md file: $ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md The command is a bit strange, but it works.
The CONTRIBUTING.md file is modified but once again unstaged. It’s true that git reset can be a dangerous command, especially if you provide the --hard flag.
However, in the scenario described above, the file in your working directory is not touched, so it’s relatively safe. For now this magic invocation is all you need to know about the git reset command.
We’ll go into much more detail about what reset does and how to master it to do really interesting things in Reset Demystified."
1.Getting Started,Unmodifying a Modified File,"What if you realize that you don’t want to keep your changes to the CONTRIBUTING.md file?
How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Luckily, git status tells you how to do that, too.
In the last example output, the unstaged area looks like this: Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

    modified:   CONTRIBUTING.md It tells you pretty explicitly how to discard the changes you’ve made.
Let’s do what it says: $ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

    renamed:    README.md -> README You can see that the changes have been reverted. It’s important to understand that git checkout -- <file> is a dangerous command.
Any local changes you made to that file are gone — Git just replaced that file with the last staged or committed version.
Don’t ever use this command unless you absolutely know that you don’t want those unsaved local changes. If you would like to keep the changes you’ve made to that file but still need to get it out of the way for now, we’ll go over stashing and branching in Git Branching; these are generally better ways to go. Remember, anything that is committed in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an --amend commit can be recovered (see Data Recovery for data recovery).
However, anything you lose that was never committed is likely never to be seen again."
1.Getting Started,1.Getting Started,"To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
You can have several of them, each of which generally is either read-only or read/write for you.
Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
In this section, we’ll cover some of these remote-management skills. It is entirely possible that you can be working with a “remote” repository that is, in fact, on the same host you are.
The word “remote” does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere.
Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote."
1.Getting Started,Showing Your Remotes,"To see which remote servers you have configured, you can run the git remote command.
It lists the shortnames of each remote handle you’ve specified.
If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from: $ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote: $ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push) If you have more than one remote, the command lists them all.
For example, a repository with multiple remotes for working with several collaborators might look something like this. $ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push) This means we can pull contributions from any of these users pretty easily.
We may additionally have permission to push to one or more of these, though we can’t tell that here. Notice that these remotes use a variety of protocols; we’ll cover more about this in Getting Git on a Server."
1.Getting Started,Adding Remote Repositories,"We’ve mentioned and given some demonstrations of how the git clone command implicitly adds the origin remote for you.
Here’s how to add a new remote explicitly.
To add a new remote Git repository as a shortname you can reference easily, run git remote add <shortname> <url>: $ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push) Now you can use the string pb on the command line instead of the whole URL.
For example, if you want to fetch all the information that Paul has but that you don’t yet have in your repository, you can run git fetch pb: $ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit Paul’s master branch is now accessible locally as pb/master — you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.
We’ll go over what branches are and how to use them in much more detail in Git Branching."
1.Getting Started,Fetching and Pulling from Your Remotes,"As you just saw, to get data from your remote projects, you can run: $ git fetch <remote> The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet.
After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time. If you clone a repository, the command automatically adds that remote repository under the name “origin”.
So, git fetch origin fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
It’s important to note that the git fetch command only downloads the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on.
You have to merge it manually into your work when you’re ready. If your current branch is set up to track a remote branch (see the next section and Git Branching for more information), you can use the git pull command to automatically fetch and then merge that remote branch into your current branch.
This may be an easier or more comfortable workflow for you; and by default, the git clone command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on. From Git version 2.27 onward, git pull will give a warning if the pull.rebase variable is not set.
Git will keep warning you until you set the variable. If you want the default behavior of Git (fast-forward if possible, else create a merge commit):
git config --global pull.rebase ""false"" If you want to rebase when pulling:
git config --global pull.rebase ""true"""
1.Getting Started,Pushing to Your Remotes,"When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: git push <remote> <branch>.
If you want to push your master branch to your origin server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you’ve done back up to the server: $ git push origin master This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You’ll have to fetch their work first and incorporate it into yours before you’ll be allowed to push.
See Git Branching for more detailed information on how to push to remote servers."
1.Getting Started,Inspecting a Remote,"If you want to see more information about a particular remote, you can use the git remote show <remote> command.
If you run this command with a particular shortname, such as origin, you get something like this: $ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date) It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you’re on the master branch and you run git pull, it will automatically merge the remote’s master branch into the local one after it has been fetched.
It also lists all the remote references it has pulled down. That is a simple example you’re likely to encounter.
When you’re using Git more heavily, however, you may see much more information from git remote show: $ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date) This command shows which branch is automatically pushed to when you run git push while on certain branches.
It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run git pull."
1.Getting Started,1.Getting Started,"Like most VCSs, Git has the ability to tag specific points in a repository’s history as being important.
Typically, people use this functionality to mark release points (v1.0, v2.0 and so on).
In this section, you’ll learn how to list existing tags, how to create and delete tags, and what the different types of tags are."
1.Getting Started,Listing Your Tags,"Listing the existing tags in Git is straightforward.
Just type git tag (with optional -l or --list): $ git tag
v1.0
v2.0 This command lists the tags in alphabetical order; the order in which they are displayed has no real importance. You can also search for tags that match a particular pattern.
The Git source repo, for instance, contains more than 500 tags.
If you’re interested only in looking at the 1.8.5 series, you can run this: $ git tag -l ""v1.8.5*""
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5 If you want just the entire list of tags, running the command git tag implicitly assumes you want a listing and provides one; the use of -l or --list in this case is optional. If, however, you’re supplying a wildcard pattern to match tag names, the use of -l or --list is mandatory."
1.Getting Started,Creating Tags,"Git supports two types of tags: lightweight and annotated. A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit. Annotated tags, however, are stored as full objects in the Git database.
They’re checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too."
1.Getting Started,Annotated Tags,"Creating an annotated tag in Git is simple.
The easiest way is to specify -a when you run the tag command: $ git tag -a v1.4 -m ""my version 1.4""
$ git tag
v0.1
v1.3
v1.4 The -m specifies a tagging message, which is stored with the tag.
If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in. You can see the tag data along with the commit that was tagged by using the git show command: $ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information."
1.Getting Started,Lightweight Tags,"Another way to tag commits is with a lightweight tag.
This is basically the commit checksum stored in a file — no other information is kept.
To create a lightweight tag, don’t supply any of the -a, -s, or -m options, just provide a tag name: $ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5 This time, if you run git show on the tag, you don’t see the extra tag information.
The command just shows the commit: $ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number"
1.Getting Started,Tagging Later,"You can also tag commits after you’ve moved past them.
Suppose your commit history looks like this: $ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 Create write support
0d52aaab4479697da7686c15f77a3d64d9165190 One more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc Add commit function
4682c3261057305bdd616e23b64b0857d832627b Add todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a Create write support
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc Commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a Update readme Now, suppose you forgot to tag the project at v1.2, which was at the “Update rakefile” commit.
You can add it after the fact.
To tag that commit, you specify the commit checksum (or part of it) at the end of the command: $ git tag -a v1.2 9fceb02 You can see that you’ve tagged the commit: $ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    Update rakefile
..."
1.Getting Started,Sharing Tags,"By default, the git push command doesn’t transfer tags to remote servers.
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches — you can run git push origin <tagname>. $ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5 If you have a lot of tags that you want to push up at once, you can also use the --tags option to the git push command.
This will transfer all of your tags to the remote server that are not already there. $ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw Now, when someone else clones or pulls from your repository, they will get all your tags as well. git push <remote> --tags will push both lightweight and annotated tags.
There is currently no option to push only lightweight tags, but if you use git push <remote> --follow-tags only annotated tags will be pushed to the remote."
1.Getting Started,Deleting Tags,"To delete a tag on your local repository, you can use git tag -d <tagname>.
For example, we could remove our lightweight tag above as follows: $ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add) Note that this does not remove the tag from any remote servers.
There are two common variations for deleting a tag from a remote server. The first variation is git push <remote> :refs/tags/<tagname>: $ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw The way to interpret the above is to read it as the null value before the colon is being pushed to the remote tag name, effectively deleting it. The second (and more intuitive) way to delete a remote tag is with: $ git push origin --delete <tagname>"
1.Getting Started,1.Getting Started,"Nearly every VCS has some form of branching support.
Branching means you diverge from the main line of development and continue to do work without messing with that main line.
In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects. Some people refer to Git’s branching model as its “killer feature,” and it certainly sets Git apart in the VCS community.
Why is it so special?
The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast.
Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day.
Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop. To really understand the way Git does branching, we need to take a step back and examine how Git stores its data. As you may remember from What is Git?, Git doesn’t store data as a series of changesets or differences, but instead as a series of snapshots. When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author’s name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches. To visualize this, let’s assume that you have a directory containing three files, and you stage them all and commit.
Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in What is Git?), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area: $ git add README test.rb LICENSE
$ git commit -m 'Initial commit' When you create the commit by running git commit, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a tree object in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed. Your Git repository now contains five objects: three blobs (each representing the contents of one of the three files), one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata. If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it. A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is master.
As you start making commits, you’re given a master branch that points to the last commit you made.
Every time you commit, the master branch pointer moves forward automatically. The “master” branch in Git is not a special branch.
It is exactly like any other branch.
The only reason nearly every repository has one is that the git init command creates it by default and most people don’t bother to change it."
1.Getting Started,Creating a New Branch,"What happens when you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let’s say you want to create a new branch called testing.
You do this with the git branch command: $ git branch testing This creates a new pointer to the same commit you’re currently on. How does Git know what branch you’re currently on?
It keeps a special pointer called HEAD.
Note that this is a lot different than the concept of HEAD in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you’re currently on.
In this case, you’re still on master.
The git branch command only created a new branch — it didn’t switch to that branch. You can easily see this by running a simple git log command that shows you where the branch pointers are pointing.
This option is called --decorate. $ git log --oneline --decorate
f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats to the central interface
34ac2 Fix bug #1328 - stack overflow under certain conditions
98ca9 Initial commit You can see the master and testing branches that are right there next to the f30ab commit."
1.Getting Started,1.Getting Started,"Nearly every VCS has some form of branching support.
Branching means you diverge from the main line of development and continue to do work without messing with that main line.
In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects. Some people refer to Git’s branching model as its “killer feature,” and it certainly sets Git apart in the VCS community.
Why is it so special?
The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast.
Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day.
Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop. To really understand the way Git does branching, we need to take a step back and examine how Git stores its data. As you may remember from What is Git?, Git doesn’t store data as a series of changesets or differences, but instead as a series of snapshots. When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author’s name and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches. To visualize this, let’s assume that you have a directory containing three files, and you stage them all and commit.
Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in What is Git?), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area: $ git add README test.rb LICENSE
$ git commit -m 'Initial commit' When you create the commit by running git commit, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a tree object in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed. Your Git repository now contains five objects: three blobs (each representing the contents of one of the three files), one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata. If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it. A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is master.
As you start making commits, you’re given a master branch that points to the last commit you made.
Every time you commit, the master branch pointer moves forward automatically. The “master” branch in Git is not a special branch.
It is exactly like any other branch.
The only reason nearly every repository has one is that the git init command creates it by default and most people don’t bother to change it."
1.Getting Started,Creating a New Branch,"What happens when you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let’s say you want to create a new branch called testing.
You do this with the git branch command: $ git branch testing This creates a new pointer to the same commit you’re currently on. How does Git know what branch you’re currently on?
It keeps a special pointer called HEAD.
Note that this is a lot different than the concept of HEAD in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you’re currently on.
In this case, you’re still on master.
The git branch command only created a new branch — it didn’t switch to that branch. You can easily see this by running a simple git log command that shows you where the branch pointers are pointing.
This option is called --decorate. $ git log --oneline --decorate
f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats to the central interface
34ac2 Fix bug #1328 - stack overflow under certain conditions
98ca9 Initial commit You can see the master and testing branches that are right there next to the f30ab commit."
1.Getting Started,1.Getting Started,"Let’s go through a simple example of branching and merging with a workflow that you might use in the real world.
You’ll follow these steps: Do some work on a website. Create a branch for a new user story you’re working on. Do some work in that branch. At this stage, you’ll receive a call that another issue is critical and you need a hotfix.
You’ll do the following: Switch to your production branch. Create a branch to add the hotfix. After it’s tested, merge the hotfix branch, and push to production. Switch back to your original user story and continue working."
1.Getting Started,Basic Branching,"First, let’s say you’re working on your project and have a couple of commits already on the master branch. You’ve decided that you’re going to work on issue #53 in whatever issue-tracking system your company uses.
To create a new branch and switch to it at the same time, you can run the git checkout command with the -b switch: $ git checkout -b iss53
Switched to a new branch ""iss53"" This is shorthand for: $ git branch iss53
$ git checkout iss53 You work on your website and do some commits.
Doing so moves the iss53 branch forward, because you have it checked out (that is, your HEAD is pointing to it): $ vim index.html
$ git commit -a -m 'Create new footer [issue 53]' Now you get the call that there is an issue with the website, and you need to fix it immediately.
With Git, you don’t have to deploy your fix along with the iss53 changes you’ve made, and you don’t have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.
All you have to do is switch back to your master branch. However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you’re checking out, Git won’t let you switch branches.
It’s best to have a clean working state when you switch branches.
There are ways to get around this (namely, stashing and commit amending) that we’ll cover later on, in Stashing and Cleaning.
For now, let’s assume you’ve committed all your changes, so you can switch back to your master branch: $ git checkout master
Switched to branch 'master' At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.
This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.
It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it. Next, you have a hotfix to make.
Let’s create a hotfix branch on which to work until it’s completed: $ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Fix broken email address'
[hotfix 1fb7853] Fix broken email address
 1 file changed, 2 insertions(+) You can run your tests, make sure the hotfix is what you want, and finally merge the hotfix branch back into your master branch to deploy to production.
You do this with the git merge command: $ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+) You’ll notice the phrase “fast-forward” in that merge.
Because the commit C4 pointed to by the branch hotfix you merged in was directly ahead of the commit C2 you’re on, Git simply moves the pointer forward.
To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit’s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together — this is called a “fast-forward.” Your change is now in the snapshot of the commit pointed to by the master branch, and you can deploy the fix. After your super-important fix is deployed, you’re ready to switch back to the work you were doing before you were interrupted.
However, first you’ll delete the hotfix branch, because you no longer need it — the master branch points at the same place.
You can delete it with the -d option to git branch: $ git branch -d hotfix
Deleted branch hotfix (3a0874c). Now you can switch back to your work-in-progress branch on issue #53 and continue working on it. $ git checkout iss53
Switched to branch ""iss53""
$ vim index.html
$ git commit -a -m 'Finish the new footer [issue 53]'
[iss53 ad82d7a] Finish the new footer [issue 53]
1 file changed, 1 insertion(+) It’s worth noting here that the work you did in your hotfix branch is not contained in the files in your iss53 branch.
If you need to pull it in, you can merge your master branch into your iss53 branch by running git merge master, or you can wait to integrate those changes until you decide to pull the iss53 branch back into master later."
1.Getting Started,Basic Merging,"Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your master branch.
In order to do that, you’ll merge your iss53 branch into master, much like you merged your hotfix branch earlier.
All you have to do is check out the branch you wish to merge into and then run the git merge command: $ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+) This looks a bit different than the hotfix merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you’re on isn’t a direct ancestor of the branch you’re merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two. Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent. Now that your work is merged in, you have no further need for the iss53 branch.
You can close the issue in your issue-tracking system, and delete the branch: $ git branch -d iss53"
1.Getting Started,1.Getting Started,"Now that you’ve created, merged, and deleted some branches, let’s look at some branch-management tools that will come in handy when you begin using branches all the time. The git branch command does more than just create and delete branches.
If you run it with no arguments, you get a simple listing of your current branches: $ git branch
  iss53
* master
  testing Notice the * character that prefixes the master branch: it indicates the branch that you currently have checked out (i.e., the branch that HEAD points to).
This means that if you commit at this point, the master branch will be moved forward with your new work.
To see the last commit on each branch, you can run git branch -v: $ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme The useful --merged and --no-merged options can filter this list to branches that you have or have not yet merged into the branch you’re currently on.
To see which branches are already merged into the branch you’re on, you can run git branch --merged: $ git branch --merged
  iss53
* master Because you already merged in iss53 earlier, you see it in your list.
Branches on this list without the * in front of them are generally fine to delete with git branch -d; you’ve already incorporated their work into another branch, so you’re not going to lose anything. To see all the branches that contain work you haven’t yet merged in, you can run git branch --no-merged: $ git branch --no-merged
  testing This shows your other branch.
Because it contains work that isn’t merged in yet, trying to delete it with git branch -d will fail: $ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'. If you really do want to delete the branch and lose that work, you can force it with -D, as the helpful message points out. The options described above, --merged and --no-merged will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your current branch. You can always provide an additional argument to ask about the merge state with respect to some other branch without checking that other branch out first, as in, what is not merged into the master branch? $ git checkout testing
$ git branch --no-merged master
  topicA
  featureB"
1.Getting Started,1.Getting Started,"Now that you have the basics of branching and merging down, what can or should you do with them?
In this section, we’ll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate them into your own development cycle."
1.Getting Started,Long-Running Branches,"Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do.
This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others. Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their master branch — possibly only code that has been or will be released.
They have another parallel branch named develop or next that they work from or use to test stability — it isn’t necessarily always stable, but whenever it gets to a stable state, it can be merged into master.
It’s used to pull in topic branches (short-lived branches, like your earlier iss53 branch) when they’re ready, to make sure they pass all the tests and don’t introduce bugs. In reality, we’re talking about pointers moving up the line of commits you’re making.
The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history. It’s generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they’re fully tested. You can keep doing this for several levels of stability.
Some larger projects also have a proposed or pu (proposed updates) branch that has integrated branches that may not be ready to go into the next or master branch.
The idea is that your branches are at various levels of stability; when they reach a more stable level, they’re merged into the branch above them.
Again, having multiple long-running branches isn’t necessary, but it’s often helpful, especially when you’re dealing with very large or complex projects."
1.Getting Started,1.Getting Started,"Remote references are references (pointers) in your remote repositories, including branches, tags, and so on.
You can get a full list of remote references explicitly with git ls-remote <remote>, or git remote show <remote> for remote branches as well as more information.
Nevertheless, a more common way is to take advantage of remote-tracking branches. Remote-tracking branches are references to the state of remote branches.
They’re local references that you can’t move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository.
Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them. Remote-tracking branch names take the form <remote>/<branch>.
For instance, if you wanted to see what the master branch on your origin remote looked like as of the last time you communicated with it, you would check the origin/master branch.
If you were working on an issue with a partner and they pushed up an iss53 branch, you might have your own local iss53 branch, but the branch on the server would be represented by the remote-tracking branch origin/iss53. This may be a bit confusing, so let’s look at an example.
Let’s say you have a Git server on your network at git.ourcompany.com.
If you clone from this, Git’s clone command automatically names it origin for you, pulls down all its data, creates a pointer to where its master branch is, and names it origin/master locally.
Git also gives you your own local master branch starting at the same place as origin’s master branch, so you have something to work from. Just like the branch name “master” does not have any special meaning in Git, neither does “origin”.
While “master” is the default name for a starting branch when you run git init which is the only reason it’s widely used, “origin” is the default name for a remote when you run git clone.
If you run git clone -o booyah instead, then you will have booyah/master as your default remote branch. If you do some work on your local master branch, and, in the meantime, someone else pushes to git.ourcompany.com and updates its master branch, then your histories move forward differently.
Also, as long as you stay out of contact with your origin server, your origin/master pointer doesn’t move. To synchronize your work with a given remote, you run a git fetch <remote> command (in our case, git fetch origin).
This command looks up which server “origin” is (in this case, it’s git.ourcompany.com), fetches any data from it that you don’t yet have, and updates your local database, moving your origin/master pointer to its new, more up-to-date position. To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let’s assume you have another internal Git server that is used only for development by one of your sprint teams.
This server is at git.team1.ourcompany.com.
You can add it as a new remote reference to the project you’re currently working on by running the git remote add command as we covered in Git Basics.
Name this remote teamone, which will be your shortname for that whole URL. Now, you can run git fetch teamone to fetch everything the remote teamone server has that you don’t have yet.
Because that server has a subset of the data your origin server has right now, Git fetches no data but sets a remote-tracking branch called teamone/master to point to the commit that teamone has as its master branch."
1.Getting Started,Pushing,"When you want to share a branch with the world, you need to push it up to a remote to which you have write access.
Your local branches aren’t automatically synchronized to the remotes you write to — you have to explicitly push the branches you want to share.
That way, you can use private branches for work you don’t want to share, and push up only the topic branches you want to collaborate on. If you have a branch named serverfix that you want to work on with others, you can push it up the same way you pushed your first branch.
Run git push <remote> <branch>: $ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix This is a bit of a shortcut.
Git automatically expands the serverfix branchname out to refs/heads/serverfix:refs/heads/serverfix, which means, “Take my serverfix local branch and push it to update the remote’s serverfix branch.”
We’ll go over the refs/heads/ part in detail in Git Internals, but you can generally leave it off.
You can also do git push origin serverfix:serverfix, which does the same thing — it says, “Take my serverfix and make it the remote’s serverfix.”
You can use this format to push a local branch into a remote branch that is named differently.
If you didn’t want it to be called serverfix on the remote, you could instead run git push origin serverfix:awesomebranch to push your local serverfix branch to the awesomebranch branch on the remote project. If you’re using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication.
By default it will prompt you on the terminal for this information so the server can tell if you’re allowed to push. If you don’t want to type it every single time you push, you can set up a “credential cache”.
The simplest is just to keep it in memory for a few minutes, which you can easily set up by running git config --global credential.helper cache. For more information on the various credential caching options available, see Credential Storage. The next time one of your collaborators fetches from the server, they will get a reference to where the server’s version of serverfix is under the remote branch origin/serverfix: $ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix It’s important to note that when you do a fetch that brings down new remote-tracking branches, you don’t automatically have local, editable copies of them.
In other words, in this case, you don’t have a new serverfix branch — you have only an origin/serverfix pointer that you can’t modify. To merge this work into your current working branch, you can run git merge origin/serverfix.
If you want your own serverfix branch that you can work on, you can base it off your remote-tracking branch: $ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix' This gives you a local branch that you can work on that starts where origin/serverfix is."
1.Getting Started,Tracking Branches,"Checking out a local branch from a remote-tracking branch automatically creates what is called a “tracking branch” (and the branch it tracks is called an “upstream branch”).
Tracking branches are local branches that have a direct relationship to a remote branch.
If you’re on a tracking branch and type git pull, Git automatically knows which server to fetch from and which branch to merge in. When you clone a repository, it generally automatically creates a master branch that tracks origin/master.
However, you can set up other tracking branches if you wish — ones that track branches on other remotes, or don’t track the master branch.
The simple case is the example you just saw, running git checkout -b <branch> <remote>/<branch>.
This is a common enough operation that Git provides the --track shorthand: $ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix' In fact, this is so common that there’s even a shortcut for that shortcut.
If the branch name you’re trying to checkout (a) doesn’t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you: $ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix' To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name: $ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf' Now, your local branch sf will automatically pull from origin/serverfix. If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you’re tracking, you can use the -u or --set-upstream-to option to git branch to explicitly set it at any time. $ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin. When you have a tracking branch set up, you can reference its upstream branch with the @{upstream} or @{u} shorthand.
So if you’re on the master branch and it’s tracking origin/master, you can say something like git merge @{u} instead of git merge origin/master if you wish. If you want to see what tracking branches you have set up, you can use the -vv option to git branch.
This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both. $ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets
  master    1ae2a45 [origin/master] Deploy index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it
  testing   5ea463a Try something new So here we can see that our iss53 branch is tracking origin/iss53 and is “ahead” by two, meaning that we have two commits locally that are not pushed to the server.
We can also see that our master branch is tracking origin/master and is up to date.
Next we can see that our serverfix branch is tracking the server-fix-good branch on our teamone server and is ahead by three and behind by one, meaning that there is one commit on the server we haven’t merged in yet and three commits locally that we haven’t pushed.
Finally we can see that our testing branch is not tracking any remote branch. It’s important to note that these numbers are only since the last time you fetched from each server.
This command does not reach out to the servers, it’s telling you about what it has cached from these servers locally.
If you want totally up to date ahead and behind numbers, you’ll need to fetch from all your remotes right before running this.
You could do that like this: $ git fetch --all; git branch -vv"
1.Getting Started,Pulling,"While the git fetch command will fetch all the changes on the server that you don’t have yet, it will not modify your working directory at all.
It will simply get the data for you and let you merge it yourself.
However, there is a command called git pull which is essentially a git fetch immediately followed by a git merge in most cases.
If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the clone or checkout commands, git pull will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch. Generally it’s better to simply use the fetch and merge commands explicitly as the magic of git pull can often be confusing."
1.Getting Started,1.Getting Started,"In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase.
In this section you’ll learn what rebasing is, how to do it, why it’s a pretty amazing tool, and in what cases you won’t want to use it."
1.Getting Started,The Basic Rebase,"If you go back to an earlier example from Basic Merging, you can see that you diverged your work and made commits on two different branches. The easiest way to integrate the branches, as we’ve already covered, is the merge command.
It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit). However, there is another way: you can take the patch of the change that was introduced in C4 and reapply it on top of C3.
In Git, this is called rebasing.
With the rebase command, you can take all the changes that were committed on one branch and replay them on a different branch. For this example, you would check out the experiment branch, and then rebase it onto the master branch as follows: $ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command This operation works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn. At this point, you can go back to the master branch and do a fast-forward merge. $ git checkout master
$ git merge experiment Now, the snapshot pointed to by C4' is exactly the same as the one that was pointed to by C5 in the merge example.
There is no difference in the end product of the integration, but rebasing makes for a cleaner history.
If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel. Often, you’ll do this to make sure your commits apply cleanly on a remote branch — perhaps in a project to which you’re trying to contribute but that you don’t maintain.
In this case, you’d do your work in a branch and then rebase your work onto origin/master when you were ready to submit your patches to the main project.
That way, the maintainer doesn’t have to do any integration work — just a fast-forward or a clean apply. Note that the snapshot pointed to by the final commit you end up with, whether it’s the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot — it’s only the history that is different.
Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together."
1.Getting Started,More Interesting Rebases,"You can also have your rebase replay on something other than the rebase target branch.
Take a history like A history with a topic branch off another topic branch, for example.
You branched a topic branch (server) to add some server-side functionality to your project, and made a commit.
Then, you branched off that to make the client-side changes (client) and committed a few times.
Finally, you went back to your server branch and did a few more commits. Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it’s tested further.
You can take the changes on client that aren’t on server (C8 and C9) and replay them on your master branch by using the --onto option of git rebase: $ git rebase --onto master server client This basically says, “Take the client branch, figure out the patches since it diverged from the server branch, and replay these patches in the client branch as if it was based directly off the master branch instead.”
It’s a bit complex, but the result is pretty cool. Now you can fast-forward your master branch (see Fast-forwarding your master branch to include the client branch changes): $ git checkout master
$ git merge client Let’s say you decide to pull in your server branch as well.
You can rebase the server branch onto the master branch without having to check it out first by running git rebase <basebranch> <topicbranch> — which checks out the topic branch (in this case, server) for you and replays it onto the base branch (master): $ git rebase master server This replays your server work on top of your master work, as shown in Rebasing your server branch on top of your master branch. Then, you can fast-forward the base branch (master): $ git checkout master
$ git merge server You can remove the client and server branches because all the work is integrated and you don’t need them anymore, leaving your history for this entire process looking like Final commit history: $ git branch -d client
$ git branch -d server"
1.Getting Started,The Perils of Rebasing,"Ahh, but the bliss of rebasing isn’t without its drawbacks, which can be summed up in a single line: Do not rebase commits that exist outside your repository and that people may have based work on. If you follow that guideline, you’ll be fine.
If you don’t, people will hate you, and you’ll be scorned by friends and family. When you rebase stuff, you’re abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with git rebase and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours. Let’s look at an example of how rebasing work that you’ve made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this: Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch it and merge the new remote branch into your work, making your history look something like this: Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a git push --force to overwrite the history on the server.
You then fetch from that server, bringing down the new commits. Now you’re both in a pickle.
If you do a git pull, you’ll create a merge commit which includes both lines of history, and your repository will look like this: If you run a git log when your history looks like this, you’ll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you’ll reintroduce all those rebased commits to the central server, which can further confuse people.
It’s pretty safe to assume that the other developer doesn’t want C4 and C6 to be in the history; that’s why they rebased in the first place."
1.Getting Started,Rebase When You Rebase,"If you do find yourself in a situation like this, Git has some further magic that might help you out.
If someone on your team force pushes changes that overwrite work that you’ve based work on, your challenge is to figure out what is yours and what they’ve rewritten. It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.
This is called a “patch-id”. If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch. For instance, in the previous scenario, if instead of doing a merge when we’re at Someone pushes rebased commits, abandoning commits you’ve based your work on we run git rebase teamone/master, Git will: Determine what work is unique to our branch (C2, C3, C4, C6, C7) Determine which are not merge commits (C2, C3, C4) Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4') Apply those commits to the top of teamone/master So instead of the result we see in You merge in the same work again into a new merge commit, we would end up with something more like Rebase on top of force-pushed rebase work. This only works if C4 and C4' that your partner made are almost exactly the same patch.
Otherwise the rebase won’t be able to tell that it’s a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there). You can also simplify this by running a git pull --rebase instead of a normal git pull.
Or you could do it manually with a git fetch followed by a git rebase teamone/master in this case. If you are using git pull and want to make --rebase the default, you can set the pull.rebase config value with something like git config --global pull.rebase true. If you only ever rebase commits that have never left your own computer, you’ll be just fine.
If you rebase commits that have been pushed, but that no one else has based commits from, you’ll also be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates. If you or a partner does find it necessary at some point, make sure everyone knows to run git pull --rebase to try to make the pain after it happens a little bit simpler."
1.Getting Started,1.Getting Started,"At this point, you should be able to do most of the day-to-day tasks for which you’ll be using Git.
However, in order to do any collaboration in Git, you’ll need to have a remote Git repository.
Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they’re working on if you’re not careful.
Furthermore, you want your collaborators to be able to access the repository even if your computer is offline — having a more reliable common repository is often useful.
Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that. Running a Git server is fairly straightforward.
First, you choose which protocols you want your server to support.
The first section of this chapter will cover the available protocols and the pros and cons of each.
The next sections will explain some typical setups using those protocols and how to get your server running with them.
Last, we’ll go over a few hosted options, if you don’t mind hosting your code on someone else’s server and don’t want to go through the hassle of setting up and maintaining your own server. If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment. A remote repository is generally a bare repository — a Git repository that has no working directory.
Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it’s just the Git data.
In the simplest terms, a bare repository is the contents of your project’s .git directory and nothing else. Git can use four distinct protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
Here we’ll discuss what they are and in what basic circumstances you would want (or not want) to use them."
1.Getting Started,Local Protocol,"The most basic is the Local protocol, in which the remote repository is in another directory on the same host.
This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.
The latter wouldn’t be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely. If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
To clone a repository like this, or to add one as a remote to an existing project, use the path to the repository as the URL.
For example, to clone a local repository, you can run something like this: $ git clone /srv/git/project.git Or you can do this: $ git clone file:///srv/git/project.git Git operates slightly differently if you explicitly specify file:// at the beginning of the URL.
If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
If you specify file://, Git fires up the processes that it normally uses to transfer data over a network, which is generally much less efficient.
The main reason to specify the file:// prefix is if you want a clean copy of the repository with extraneous references or objects left out — generally after an import from another VCS or something similar (see Git Internals for maintenance tasks).
We’ll use the normal path here because doing so is almost always faster. To add a local repository to an existing Git project, you can run something like this: $ git remote add local_proj /srv/git/project.git Then, you can push to and pull from that remote via your new remote name local_proj as though you were doing so over a network. The pros of file-based repositories are that they’re simple and they use existing file permissions and network access.
If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
We’ll discuss how to export a bare repository copy for this purpose in Getting Git on a Server. This is also a nice option for quickly grabbing work from someone else’s working repository.
If you and a co-worker are working on the same project and they want you to check something out, running a command like git pull /home/john/project is often easier than them pushing to a remote server and you subsequently fetching from it. The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
If you want to push from your laptop when you’re at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access. It’s important to mention that this isn’t necessarily the fastest option if you’re using a shared mount of some kind.
A local repository is fast only if you have fast access to the data.
A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system. Finally, this protocol does not protect the repository against accidental damage.
Every user has full shell access to the “remote” directory, and there is nothing preventing them from changing or removing internal Git files and corrupting the repository."
1.Getting Started,The HTTP Protocols,"Git can communicate over HTTP using two different modes.
Prior to Git 1.6.6, there was only one way it could do this which was very simple and generally read-only.
In version 1.6.6, a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
In the last few years, this new HTTP protocol has become very popular since it’s simpler for the user and smarter about how it communicates.
The newer version is often referred to as the Smart HTTP protocol and the older way as Dumb HTTP.
We’ll cover the newer Smart HTTP protocol first. Smart HTTP operates very similarly to the SSH or Git protocols but runs over standard HTTPS ports and can use various HTTP authentication mechanisms, meaning it’s often easier on the user than something like SSH, since you can use things like username/password authentication rather than having to set up SSH keys. It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the git:// protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
Instead of having to set up different URLs for these things, you can now use a single URL for both.
If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
The same goes for read access. In fact, for services like GitHub, the URL you use to view the repository online (for example, https://github.com/schacon/simplegit) is the same URL you can use to clone and, if you have access, push over. If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler Dumb HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of Dumb HTTP is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific post-update hook, and you’re done (see Git Hooks).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this: $ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update That’s all.
The post-update hook that comes with Git by default runs the appropriate command (git update-server-info) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like: $ git clone https://example.com/gitproject.git In this particular case, we’re using the /var/www/htdocs path that is common for Apache setups, but you can use any static web server — just put the bare repository in its path.
The Git data is served as basic static files (see the Git Internals chapter for details about exactly how it’s served). Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
It’s rare to run a mix of the two services. We’ll concentrate on the pros of the Smart version of the HTTP protocol. The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don’t have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one. You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates. Another nice thing is that HTTP and HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through their ports. Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content. If you’re using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
Read Credential Storage to see how to set up secure HTTP password caching on your system."
1.Getting Started,The SSH Protocol,"A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places — and if it isn’t, it’s easy to do.
SSH is also an authenticated network protocol and, because it’s ubiquitous, it’s generally easy to set up and use. To clone a Git repository over SSH, you can specify an ssh:// URL like this: $ git clone ssh://[user@]server/project.git Or you can use the shorter scp-like syntax for the SSH protocol: $ git clone [user@]server:project.git In both cases above, if you don’t specify the optional username, Git assumes the user you’re currently logged in as. The pros of using SSH are many.
First, SSH is relatively easy to set up — SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure — all data transfer is encrypted and authenticated.
Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it. The negative aspect of SSH is that it doesn’t support anonymous access to your Git repository.
If you’re using SSH, people must have SSH access to your machine, even in a read-only capacity, which doesn’t make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
If you’re using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch from."
1.Getting Started,1.Getting Started,"At this point, you should be able to do most of the day-to-day tasks for which you’ll be using Git.
However, in order to do any collaboration in Git, you’ll need to have a remote Git repository.
Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they’re working on if you’re not careful.
Furthermore, you want your collaborators to be able to access the repository even if your computer is offline — having a more reliable common repository is often useful.
Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that. Running a Git server is fairly straightforward.
First, you choose which protocols you want your server to support.
The first section of this chapter will cover the available protocols and the pros and cons of each.
The next sections will explain some typical setups using those protocols and how to get your server running with them.
Last, we’ll go over a few hosted options, if you don’t mind hosting your code on someone else’s server and don’t want to go through the hassle of setting up and maintaining your own server. If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment. A remote repository is generally a bare repository — a Git repository that has no working directory.
Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it’s just the Git data.
In the simplest terms, a bare repository is the contents of your project’s .git directory and nothing else. Git can use four distinct protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.
Here we’ll discuss what they are and in what basic circumstances you would want (or not want) to use them."
1.Getting Started,Local Protocol,"The most basic is the Local protocol, in which the remote repository is in another directory on the same host.
This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.
The latter wouldn’t be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely. If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.
To clone a repository like this, or to add one as a remote to an existing project, use the path to the repository as the URL.
For example, to clone a local repository, you can run something like this: $ git clone /srv/git/project.git Or you can do this: $ git clone file:///srv/git/project.git Git operates slightly differently if you explicitly specify file:// at the beginning of the URL.
If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.
If you specify file://, Git fires up the processes that it normally uses to transfer data over a network, which is generally much less efficient.
The main reason to specify the file:// prefix is if you want a clean copy of the repository with extraneous references or objects left out — generally after an import from another VCS or something similar (see Git Internals for maintenance tasks).
We’ll use the normal path here because doing so is almost always faster. To add a local repository to an existing Git project, you can run something like this: $ git remote add local_proj /srv/git/project.git Then, you can push to and pull from that remote via your new remote name local_proj as though you were doing so over a network. The pros of file-based repositories are that they’re simple and they use existing file permissions and network access.
If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.
You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.
We’ll discuss how to export a bare repository copy for this purpose in Getting Git on a Server. This is also a nice option for quickly grabbing work from someone else’s working repository.
If you and a co-worker are working on the same project and they want you to check something out, running a command like git pull /home/john/project is often easier than them pushing to a remote server and you subsequently fetching from it. The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.
If you want to push from your laptop when you’re at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access. It’s important to mention that this isn’t necessarily the fastest option if you’re using a shared mount of some kind.
A local repository is fast only if you have fast access to the data.
A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system. Finally, this protocol does not protect the repository against accidental damage.
Every user has full shell access to the “remote” directory, and there is nothing preventing them from changing or removing internal Git files and corrupting the repository."
1.Getting Started,The HTTP Protocols,"Git can communicate over HTTP using two different modes.
Prior to Git 1.6.6, there was only one way it could do this which was very simple and generally read-only.
In version 1.6.6, a new, smarter protocol was introduced that involved Git being able to intelligently negotiate data transfer in a manner similar to how it does over SSH.
In the last few years, this new HTTP protocol has become very popular since it’s simpler for the user and smarter about how it communicates.
The newer version is often referred to as the Smart HTTP protocol and the older way as Dumb HTTP.
We’ll cover the newer Smart HTTP protocol first. Smart HTTP operates very similarly to the SSH or Git protocols but runs over standard HTTPS ports and can use various HTTP authentication mechanisms, meaning it’s often easier on the user than something like SSH, since you can use things like username/password authentication rather than having to set up SSH keys. It has probably become the most popular way to use Git now, since it can be set up to both serve anonymously like the git:// protocol, and can also be pushed over with authentication and encryption like the SSH protocol.
Instead of having to set up different URLs for these things, you can now use a single URL for both.
If you try to push and the repository requires authentication (which it normally should), the server can prompt for a username and password.
The same goes for read access. In fact, for services like GitHub, the URL you use to view the repository online (for example, https://github.com/schacon/simplegit) is the same URL you can use to clone and, if you have access, push over. If the server does not respond with a Git HTTP smart service, the Git client will try to fall back to the simpler Dumb HTTP protocol.
The Dumb protocol expects the bare Git repository to be served like normal files from the web server.
The beauty of Dumb HTTP is the simplicity of setting it up.
Basically, all you have to do is put a bare Git repository under your HTTP document root and set up a specific post-update hook, and you’re done (see Git Hooks).
At that point, anyone who can access the web server under which you put the repository can also clone your repository.
To allow read access to your repository over HTTP, do something like this: $ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update That’s all.
The post-update hook that comes with Git by default runs the appropriate command (git update-server-info) to make HTTP fetching and cloning work properly.
This command is run when you push to this repository (over SSH perhaps); then, other people can clone via something like: $ git clone https://example.com/gitproject.git In this particular case, we’re using the /var/www/htdocs path that is common for Apache setups, but you can use any static web server — just put the bare repository in its path.
The Git data is served as basic static files (see the Git Internals chapter for details about exactly how it’s served). Generally you would either choose to run a read/write Smart HTTP server or simply have the files accessible as read-only in the Dumb manner.
It’s rare to run a mix of the two services. We’ll concentrate on the pros of the Smart version of the HTTP protocol. The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don’t have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one. You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates. Another nice thing is that HTTP and HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through their ports. Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content. If you’re using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
Read Credential Storage to see how to set up secure HTTP password caching on your system."
1.Getting Started,The SSH Protocol,"A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places — and if it isn’t, it’s easy to do.
SSH is also an authenticated network protocol and, because it’s ubiquitous, it’s generally easy to set up and use. To clone a Git repository over SSH, you can specify an ssh:// URL like this: $ git clone ssh://[user@]server/project.git Or you can use the shorter scp-like syntax for the SSH protocol: $ git clone [user@]server:project.git In both cases above, if you don’t specify the optional username, Git assumes the user you’re currently logged in as. The pros of using SSH are many.
First, SSH is relatively easy to set up — SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure — all data transfer is encrypted and authenticated.
Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it. The negative aspect of SSH is that it doesn’t support anonymous access to your Git repository.
If you’re using SSH, people must have SSH access to your machine, even in a read-only capacity, which doesn’t make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
If you’re using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch from."
1.Getting Started,1.Getting Started,"Now we’ll cover setting up a Git service running these protocols on your own server. Here we’ll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux-based server, though it’s also possible to run these services on macOS or Windows servers.
Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what’s involved. In order to initially set up any Git server, you have to export an existing repository into a new bare repository — a repository that doesn’t contain a working directory.
This is generally straightforward to do.
In order to clone your repository to create a new bare repository, you run the clone command with the --bare option.
By convention, bare repository directory names end with the suffix .git, like so: $ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done. You should now have a copy of the Git directory data in your my_project.git directory. This is roughly equivalent to something like: $ cp -Rf my_project/.git my_project.git There are a couple of minor differences in the configuration file but, for your purpose, this is close to the same thing.
It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone."
1.Getting Started,Putting the Bare Repository on a Server,"Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Let’s say you’ve set up a server called git.example.com to which you have SSH access, and you want to store all your Git repositories under the /srv/git directory.
Assuming that /srv/git exists on that server, you can set up your new repository by copying your bare repository over: $ scp -r my_project.git user@git.example.com:/srv/git At this point, other users who have SSH-based read access to the /srv/git directory on that server can clone your repository by running: $ git clone user@git.example.com:/srv/git/my_project.git If a user SSHs into a server and has write access to the /srv/git/my_project.git directory, they will also automatically have push access. Git will automatically add group write permissions to a repository properly if you run the git init command with the --shared option.
Note that by running this command, you will not destroy any commits, refs, etc. in the process. $ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
Now you’re ready to collaborate on the same project. It’s important to note that this is literally all you need to do to run a useful Git server to which several people have access — just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
You’re ready to go — nothing else needed. In the next few sections, you’ll see how to expand to more sophisticated setups.
This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
However, keep in mind that to collaborate with a couple of people on a private project, all you need is an SSH server and a bare repository."
1.Getting Started,1.Getting Started,"GitWeb is pretty simplistic though.
If you’re looking for a modern, fully featured Git server, there are several open source solutions out there that you can install instead.
As GitLab is one of the popular ones, we’ll cover installing and using it as an example.
This is harder than the GitWeb option and will require more maintenance, but it is a fully featured option."
1.Getting Started,Installation,"GitLab is a database-backed web application, so its installation is more involved than some other Git servers.
Fortunately, this process is well-documented and supported.
GitLab strongly recommends installing GitLab on your server via the official Omnibus GitLab package. The other installation options are: GitLab Helm chart, for use with Kubernetes. Dockerized GitLab packages for use with Docker. From the source files. Cloud providers such as AWS, Google Cloud Platform, Azure, OpenShift and Digital Ocean. For more information read the GitLab Community Edition (CE) readme."
1.Getting Started,Administration,"GitLab’s administration interface is accessed over the web.
Simply point your browser to the hostname or IP address where GitLab is installed, and log in as the root user.
The password will depend on your installation type but by default, Omnibus GitLab automatically generates a password for and stores it to /etc/gitlab/initial_root_password for at least 24 hours.
Follow the documentation for more details.
After you’ve logged in, click the “Admin area” icon in the menu at the top right. Everybody using your GitLab server must have a user account.
User accounts are quite simple, they mainly contain personal information attached to login data.
Each user account has a namespace, which is a logical grouping of projects that belong to that user.
If the user jane had a project named project, that project’s URL would be http://server/jane/project. You can remove a user account in two ways:
“Blocking” a user prevents them from logging into the GitLab instance, but all of the data under that user’s namespace will be preserved, and commits signed with that user’s email address will still link back to their profile. “Destroying” a user, on the other hand, completely removes them from the database and filesystem.
All projects and data in their namespace is removed, and any groups they own will also be removed.
This is obviously a much more permanent and destructive action, and you will rarely need it. A GitLab group is a collection of projects, along with data about how users can access those projects.
Each group has a project namespace (the same way that users do), so if the group training has a project materials, its URL would be http://server/training/materials. Each group is associated with a number of users, each of which has a level of permissions for the group’s projects and the group itself.
These range from “Guest” (issues and chat only) to “Owner” (full control of the group, its members, and its projects).
The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen. A GitLab project roughly corresponds to a single Git repository.
Every project belongs to a single namespace, either a user or a group.
If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group’s user-level permissions will take effect. Every project has a visibility level, which controls who has read access to that project’s pages and repository.
If a project is Private, the project’s owner must explicitly grant access to specific users.
An Internal project is visible to any logged-in user, and a Public project is visible to anyone.
Note that this controls both git fetch access as well as access to the web UI for that project. GitLab includes support for hooks, both at a project or system level.
For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
This is a great way to connect your Git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools."
1.Getting Started,Basic Usage,"The first thing you’ll want to do with GitLab is create a new project.
You can do this by clicking on the “+” icon on the toolbar.
You’ll be asked for the project’s name, which namespace it should belong to, and what its visibility level should be.
Most of what you specify here isn’t permanent, and can be changed later through the settings interface.
Click “Create Project”, and you’re done. Once the project exists, you’ll probably want to connect it with a local Git repository.
Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
The URLs are visible at the top of the project’s home page.
For an existing local repository, this command will create a remote named gitlab to the hosted location: $ git remote add gitlab https://server/namespace/project.git If you don’t have a local copy of the repository, you can simply do this: $ git clone https://server/namespace/project.git The web UI provides access to several useful views of the repository itself.
Each project’s home page shows recent activity, and links along the top will lead you to views of the project’s files and commit log."
1.Getting Started,1.Getting Started,"Now that you have a remote Git repository set up as a focal point for all the developers to share their code, and you’re familiar with basic Git commands in a local workflow, you’ll look at how to utilize some of the distributed workflows that Git affords you. In this chapter, you’ll see how to work with Git in a distributed environment as a contributor and an integrator.
That is, you’ll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing. In contrast with Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.
In centralized systems, every developer is a node working more or less equally with a central hub.
In Git, however, every developer is potentially both a node and a hub; that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.
This presents a vast range of workflow possibilities for your project and/or your team, so we’ll cover a few common paradigms that take advantage of this flexibility.
We’ll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each."
1.Getting Started,Centralized Workflow,"In centralized systems, there is generally a single collaboration model — the centralized workflow.
One central hub, or repository, can accept code, and everyone synchronizes their work with it.
A number of developers are nodes — consumers of that hub — and synchronize with that centralized location. This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.
The second developer must merge in the first one’s work before pushing changes up, so as not to overwrite the first developer’s changes.
This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git. If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push access; Git won’t let users overwrite each other. Say John and Jessica both start working at the same time.
John finishes his change and pushes it to the server.
Then Jessica tries to push her changes, but the server rejects them.
She is told that she’s trying to push non-fast-forward changes and that she won’t be able to do so until she fetches and merges.
This workflow is attractive to a lot of people because it’s a paradigm that many are familiar and comfortable with. This is also not limited to small teams.
With Git’s branching model, it’s possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously."
1.Getting Started,Integration-Manager Workflow,"Because Git allows you to have multiple remote repositories, it’s possible to have a workflow where each developer has write access to their own public repository and read access to everyone else’s.
This scenario often includes a canonical repository that represents the “official” project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see Integration-manager workflow): The project maintainer pushes to their public repository. A contributor clones that repository and makes changes. The contributor pushes to their own public copy. The contributor sends the maintainer an email asking them to pull changes. The maintainer adds the contributor’s repository as a remote and merges locally. The maintainer pushes merged changes to the main repository. This is a very common workflow with hub-based tools like GitHub or GitLab, where it’s easy to fork a project and push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.
Contributors don’t have to wait for the project to incorporate their changes — each party can work at their own pace."
1.Getting Started,Dictator and Lieutenants Workflow,"This is a variant of a multiple-repository workflow.
It’s generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they’re called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator pushes from their directory to a reference repository from which all the collaborators need to pull.
The process works like this (see Benevolent dictator workflow): Regular developers work on their topic branch and rebase their work on top of master.
The master branch is that of the reference repository to which the dictator pushes. Lieutenants merge the developers' topic branches into their master branch. The dictator merges the lieutenants' master branches into the dictator’s master branch. Finally, the dictator pushes that master branch to the reference repository so the other developers can rebase on it. This kind of workflow isn’t common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them."
1.Getting Started,Patterns for Managing Source Code Branches,"Martin Fowler has made a guide ""Patterns for Managing Source Code Branches"".
This guide covers all the common Git workflows, and explains how/when to use them.
There’s also a section comparing high and low integration frequencies. https://martinfowler.com/articles/branching-patterns.html"
1.Getting Started,1.Getting Started,"Now that you have a remote Git repository set up as a focal point for all the developers to share their code, and you’re familiar with basic Git commands in a local workflow, you’ll look at how to utilize some of the distributed workflows that Git affords you. In this chapter, you’ll see how to work with Git in a distributed environment as a contributor and an integrator.
That is, you’ll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing. In contrast with Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.
In centralized systems, every developer is a node working more or less equally with a central hub.
In Git, however, every developer is potentially both a node and a hub; that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.
This presents a vast range of workflow possibilities for your project and/or your team, so we’ll cover a few common paradigms that take advantage of this flexibility.
We’ll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each."
1.Getting Started,Centralized Workflow,"In centralized systems, there is generally a single collaboration model — the centralized workflow.
One central hub, or repository, can accept code, and everyone synchronizes their work with it.
A number of developers are nodes — consumers of that hub — and synchronize with that centralized location. This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.
The second developer must merge in the first one’s work before pushing changes up, so as not to overwrite the first developer’s changes.
This concept is as true in Git as it is in Subversion (or any CVCS), and this model works perfectly well in Git. If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push access; Git won’t let users overwrite each other. Say John and Jessica both start working at the same time.
John finishes his change and pushes it to the server.
Then Jessica tries to push her changes, but the server rejects them.
She is told that she’s trying to push non-fast-forward changes and that she won’t be able to do so until she fetches and merges.
This workflow is attractive to a lot of people because it’s a paradigm that many are familiar and comfortable with. This is also not limited to small teams.
With Git’s branching model, it’s possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously."
1.Getting Started,Integration-Manager Workflow,"Because Git allows you to have multiple remote repositories, it’s possible to have a workflow where each developer has write access to their own public repository and read access to everyone else’s.
This scenario often includes a canonical repository that represents the “official” project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see Integration-manager workflow): The project maintainer pushes to their public repository. A contributor clones that repository and makes changes. The contributor pushes to their own public copy. The contributor sends the maintainer an email asking them to pull changes. The maintainer adds the contributor’s repository as a remote and merges locally. The maintainer pushes merged changes to the main repository. This is a very common workflow with hub-based tools like GitHub or GitLab, where it’s easy to fork a project and push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.
Contributors don’t have to wait for the project to incorporate their changes — each party can work at their own pace."
1.Getting Started,Dictator and Lieutenants Workflow,"This is a variant of a multiple-repository workflow.
It’s generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they’re called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator pushes from their directory to a reference repository from which all the collaborators need to pull.
The process works like this (see Benevolent dictator workflow): Regular developers work on their topic branch and rebase their work on top of master.
The master branch is that of the reference repository to which the dictator pushes. Lieutenants merge the developers' topic branches into their master branch. The dictator merges the lieutenants' master branches into the dictator’s master branch. Finally, the dictator pushes that master branch to the reference repository so the other developers can rebase on it. This kind of workflow isn’t common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them."
1.Getting Started,Patterns for Managing Source Code Branches,"Martin Fowler has made a guide ""Patterns for Managing Source Code Branches"".
This guide covers all the common Git workflows, and explains how/when to use them.
There’s also a section comparing high and low integration frequencies. https://martinfowler.com/articles/branching-patterns.html"
1.Getting Started,1.Getting Started,"The main difficulty with describing how to contribute to a project are the numerous variations on how to do that.
Because Git is very flexible, people can and do work together in many ways, and it’s problematic to describe how you should contribute — every project is a bit different.
Some of the variables involved are active contributor count, chosen workflow, your commit access, and possibly the external contribution method. The first variable is active contributor count — how many users are actively contributing code to this project, and how often?
In many instances, you’ll have two or three developers with a few commits a day, or possibly less for somewhat dormant projects.
For larger companies or projects, the number of developers could be in the thousands, with hundreds or thousands of commits coming in each day.
This is important because with more and more developers, you run into more issues with making sure your code applies cleanly or can be easily merged.
Changes you submit may be rendered obsolete or severely broken by work that is merged in while you were working or while your changes were waiting to be approved or applied.
How can you keep your code consistently up to date and your commits valid? The next variable is the workflow in use for the project.
Is it centralized, with each developer having equal write access to the main codeline?
Does the project have a maintainer or integration manager who checks all the patches?
Are all the patches peer-reviewed and approved?
Are you involved in that process?
Is a lieutenant system in place, and do you have to submit your work to them first? The next variable is your commit access.
The workflow required in order to contribute to a project is much different if you have write access to the project than if you don’t.
If you don’t have write access, how does the project prefer to accept contributed work?
Does it even have a policy?
How much work are you contributing at a time?
How often do you contribute? All these questions can affect how you contribute effectively to a project and what workflows are preferred or available to you.
We’ll cover aspects of each of these in a series of use cases, moving from simple to more complex; you should be able to construct the specific workflows you need in practice from these examples."
1.Getting Started,Commit Guidelines,"Before we start looking at the specific use cases, here’s a quick note about commit messages.
Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.
The Git project provides a document that lays out a number of good tips for creating commits from which to submit patches — you can read it in the Git source code in the Documentation/SubmittingPatches file. First, your submissions should not contain any whitespace errors.
Git provides an easy way to check for this — before you commit, run git diff --check, which identifies possible whitespace errors and lists them for you. If you run that command before committing, you can tell if you’re about to commit whitespace issues that may annoy other developers. Next, try to make each commit a logically separate changeset.
If you can, try to make your changes digestible — don’t code for a whole weekend on five different issues and then submit them all as one massive commit on Monday.
Even if you don’t commit during the weekend, use the staging area on Monday to split your work into at least one commit per issue, with a useful message per commit.
If some of the changes modify the same file, try to use git add --patch to partially stage files (covered in detail in Interactive Staging).
The project snapshot at the tip of the branch is identical whether you do one commit or five, as long as all the changes are added at some point, so try to make things easier on your fellow developers when they have to review your changes. This approach also makes it easier to pull out or revert one of the changesets if you need to later.
Rewriting History describes a number of useful Git tricks for rewriting history and interactively staging files — use these tools to help craft a clean and understandable history before sending the work to someone else. The last thing to keep in mind is the commit message.
Getting in the habit of creating quality commit messages makes using and collaborating with Git a lot easier.
As a general rule, your messages should start with a single line that’s no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation.
The Git project requires that the more detailed explanation include your motivation for the change and contrast its implementation with previous behavior — this is a good guideline to follow.
Write your commit message in the imperative: ""Fix bug"" and not ""Fixed bug"" or ""Fixes bug.""
Here is a template you can follow, which we’ve lightly adapted from one originally written by Tim Pope: Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase will confuse you if you run the
two together.

Write your commit message in the imperative: ""Fix bug"" and not ""Fixed bug""
or ""Fixes bug.""  This convention matches up with commit messages generated
by commands like git merge and git revert.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent If all your commit messages follow this model, things will be much easier for you and the developers with whom you collaborate.
The Git project has well-formatted commit messages — try running git log --no-merges there to see what a nicely-formatted project-commit history looks like. For the sake of brevity, many of the examples in this book don’t have nicely-formatted commit messages like this; instead, we simply use the -m option to git commit. In short, do as we say, not as we do."
1.Getting Started,Private Small Team,"The simplest setup you’re likely to encounter is a private project with one or two other developers.
“Private,” in this context, means closed-source — not accessible to the outside world.
You and the other developers all have push access to the repository. In this environment, you can follow a workflow similar to what you might do when using Subversion or another centralized system.
You still get the advantages of things like offline committing and vastly simpler branching and merging, but the workflow can be very similar; the main difference is that merges happen client-side rather than on the server at commit time.
Let’s see what it might look like when two developers start to work together with a shared repository.
The first developer, John, clones the repository, makes a change, and commits locally.
The protocol messages have been replaced with …​ in these examples to shorten them somewhat. # John's Machine
$ git clone john@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim lib/simplegit.rb
$ git commit -am 'Remove invalid default value'
[master 738ee87] Remove invalid default value
 1 files changed, 1 insertions(+), 1 deletions(-) The second developer, Jessica, does the same thing — clones the repository and commits a change: # Jessica's Machine
$ git clone jessica@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim TODO
$ git commit -am 'Add reset task'
[master fbff5bc] Add reset task
 1 files changed, 1 insertions(+), 0 deletions(-) Now, Jessica pushes her work to the server, which works just fine: # Jessica's Machine
$ git push origin master
...
To jessica@githost:simplegit.git
   1edee6b..fbff5bc  master -> master The last line of the output above shows a useful return message from the push operation.
The basic format is <oldref>..<newref> fromref → toref, where oldref means the old reference, newref means the new reference, fromref is the name of the local reference being pushed, and toref is the name of the remote reference being updated.
You’ll see similar output like this below in the discussions, so having a basic idea of the meaning will help in understanding the various states of the repositories.
More details are available in the documentation for git-push. Continuing with this example, shortly afterwards, John makes some changes, commits them to his local repository, and tries to push them to the same server: # John's Machine
$ git push origin master
To john@githost:simplegit.git
 ! [rejected]        master -> master (non-fast forward)
error: failed to push some refs to 'john@githost:simplegit.git' In this case, John’s push fails because of Jessica’s earlier push of her changes.
This is especially important to understand if you’re used to Subversion, because you’ll notice that the two developers didn’t edit the same file.
Although Subversion automatically does such a merge on the server if different files are edited, with Git, you must first merge the commits locally.
In other words, John must first fetch Jessica’s upstream changes and merge them into his local repository before he will be allowed to push. As a first step, John fetches Jessica’s work (this only fetches Jessica’s upstream work, it does not yet merge it into John’s work): $ git fetch origin
...
From john@githost:simplegit
 + 049d078...fbff5bc master     -> origin/master At this point, John’s local repository looks something like this: Now John can merge Jessica’s work that he fetched into his own local work: $ git merge origin/master
Merge made by the 'recursive' strategy.
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-) As long as that local merge goes smoothly, John’s updated history will now look like this: At this point, John might want to test this new code to make sure none of Jessica’s work affects any of his and, as long as everything seems fine, he can finally push the new merged work up to the server: $ git push origin master
...
To john@githost:simplegit.git
   fbff5bc..72bbc59  master -> master In the end, John’s commit history will look like this: In the meantime, Jessica has created a new topic branch called issue54, and made three commits to that branch.
She hasn’t fetched John’s changes yet, so her commit history looks like this: Suddenly, Jessica learns that John has pushed some new work to the server and she wants to take a look at it, so she can fetch all new content from the server that she does not yet have with: # Jessica's Machine
$ git fetch origin
...
From jessica@githost:simplegit
   fbff5bc..72bbc59  master     -> origin/master That pulls down the work John has pushed up in the meantime.
Jessica’s history now looks like this: Jessica thinks her topic branch is ready, but she wants to know what part of John’s fetched work she has to merge into her work so that she can push.
She runs git log to find out: $ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 16:01:27 2009 -0700

   Remove invalid default value The issue54..origin/master syntax is a log filter that asks Git to display only those commits that are on the latter branch (in this case origin/master) and that are not on the first branch (in this case issue54).
We’ll go over this syntax in detail in Commit Ranges. From the above output, we can see that there is a single commit that John has made that Jessica has not merged into her local work.
If she merges origin/master, that is the single commit that will modify her local work. Now, Jessica can merge her topic work into her master branch, merge John’s work (origin/master) into her master branch, and then push back to the server again. First (having committed all of the work on her issue54 topic branch), Jessica switches back to her master branch in preparation for integrating all this work: $ git checkout master
Switched to branch 'master'
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded. Jessica can merge either origin/master or issue54 first — they’re both upstream, so the order doesn’t matter.
The end snapshot should be identical no matter which order she chooses; only the history will be different.
She chooses to merge the issue54 branch  first: $ git merge issue54
Updating fbff5bc..4af4298
Fast forward
 README           |    1 +
 lib/simplegit.rb |    6 +++++-
 2 files changed, 6 insertions(+), 1 deletions(-) No problems occur; as you can see it was a simple fast-forward merge.
Jessica now completes the local merging process by merging John’s earlier fetched work that is sitting in the origin/master branch: $ git merge origin/master
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-) Everything merges cleanly, and Jessica’s history now looks like this: Now origin/master is reachable from Jessica’s master branch, so she should be able to successfully push (assuming John hasn’t pushed even more changes in the meantime): $ git push origin master
...
To jessica@githost:simplegit.git
   72bbc59..8059c15  master -> master Each developer has committed a few times and merged each other’s work successfully. That is one of the simplest workflows.
You work for a while (generally in a topic branch), and merge that work into your master branch when it’s ready to be integrated.
When you want to share that work, you fetch and merge your master from origin/master if it has changed, and finally push to the master branch on the server.
The general sequence is something like this:"
1.Getting Started,Private Managed Team,"In this next scenario, you’ll look at contributor roles in a larger private group.
You’ll learn how to work in an environment where small groups collaborate on features, after which those team-based contributions are integrated by another party. Let’s say that John and Jessica are working together on one feature (call this “featureA”), while Jessica and a third developer, Josie, are working on a second (say, “featureB”).
In this case, the company is using a type of integration-manager workflow where the work of the individual groups is integrated only by certain engineers, and the master branch of the main repo can be updated only by those engineers.
In this scenario, all work is done in team-based branches and pulled together by the integrators later. Let’s follow Jessica’s workflow as she works on her two features, collaborating in parallel with two different developers in this environment.
Assuming she already has her repository cloned, she decides to work on featureA first.
She creates a new branch for the feature and does some work on it there: # Jessica's Machine
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ vim lib/simplegit.rb
$ git commit -am 'Add limit to log function'
[featureA 3300904] Add limit to log function
 1 files changed, 1 insertions(+), 1 deletions(-) At this point, she needs to share her work with John, so she pushes her featureA branch commits up to the server.
Jessica doesn’t have push access to the master branch — only the integrators do — so she has to push to another branch in order to collaborate with John: $ git push -u origin featureA
...
To jessica@githost:simplegit.git
 * [new branch]      featureA -> featureA Jessica emails John to tell him that she’s pushed some work into a branch named featureA and he can look at it now.
While she waits for feedback from John, Jessica decides to start working on featureB with Josie.
To begin, she starts a new feature branch, basing it off the server’s master branch: # Jessica's Machine
$ git fetch origin
$ git checkout -b featureB origin/master
Switched to a new branch 'featureB' Now, Jessica makes a couple of commits on the featureB branch: $ vim lib/simplegit.rb
$ git commit -am 'Make ls-tree function recursive'
[featureB e5b0fdc] Make ls-tree function recursive
 1 files changed, 1 insertions(+), 1 deletions(-)
$ vim lib/simplegit.rb
$ git commit -am 'Add ls-files'
[featureB 8512791] Add ls-files
 1 files changed, 5 insertions(+), 0 deletions(-) Jessica’s repository now looks like this: She’s ready to push her work, but gets an email from Josie that a branch with some initial “featureB” work on it was already pushed to the server as the featureBee branch.
Jessica needs to merge those changes with her own before she can push her work to the server.
Jessica first fetches Josie’s changes with git fetch: $ git fetch origin
...
From jessica@githost:simplegit
 * [new branch]      featureBee -> origin/featureBee Assuming Jessica is still on her checked-out featureB branch, she can now merge Josie’s work into that branch with git merge: $ git merge origin/featureBee
Auto-merging lib/simplegit.rb
Merge made by the 'recursive' strategy.
 lib/simplegit.rb |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-) At this point, Jessica wants to push all of this merged “featureB” work back to the server, but she doesn’t want to simply push her own featureB branch.
Rather, since Josie has already started an upstream featureBee branch, Jessica wants to push to that branch, which she does with: $ git push -u origin featureB:featureBee
...
To jessica@githost:simplegit.git
   fba9af8..cd685d1  featureB -> featureBee This is called a refspec.
See The Refspec for a more detailed discussion of Git refspecs and different things you can do with them.
Also notice the -u flag; this is short for --set-upstream, which configures the branches for easier pushing and pulling later. Suddenly, Jessica gets email from John, who tells her he’s pushed some changes to the featureA branch on which they are collaborating, and he asks Jessica to take a look at them.
Again, Jessica runs a simple git fetch to fetch all new content from the server, including (of course) John’s latest work: $ git fetch origin
...
From jessica@githost:simplegit
   3300904..aad881d  featureA   -> origin/featureA Jessica can display the log of John’s new work by comparing the content of the newly-fetched featureA branch with her local copy of the same branch: $ git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith <jsmith@example.com>
Date:   Fri May 29 19:57:33 2009 -0700

    Increase log output to 30 from 25 If Jessica likes what she sees, she can merge John’s new work into her local featureA branch with: $ git checkout featureA
Switched to branch 'featureA'
$ git merge origin/featureA
Updating 3300904..aad881d
Fast forward
 lib/simplegit.rb |   10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-) Finally, Jessica might want to make a couple minor changes to all that merged content, so she is free to make those changes, commit them to her local featureA branch, and push the end result back to the server: $ git commit -am 'Add small tweak to merged content'
[featureA 774b3ed] Add small tweak to merged content
 1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
...
To jessica@githost:simplegit.git
   3300904..774b3ed  featureA -> featureA Jessica’s commit history now looks something like this: At some point, Jessica, Josie, and John inform the integrators that the featureA and featureBee branches on the server are ready for integration into the mainline.
After the integrators merge these branches into the mainline, a fetch will bring down the new merge commit, making the history look like this: Many groups switch to Git because of this ability to have multiple teams working in parallel, merging the different lines of work late in the process.
The ability of smaller subgroups of a team to collaborate via remote branches without necessarily having to involve or impede the entire team is a huge benefit of Git.
The sequence for the workflow you saw here is something like this:"
1.Getting Started,Forked Public Project,"Contributing to public projects is a bit different.
Because you don’t have the permissions to directly update branches on the project, you have to get the work to the maintainers some other way.
This first example describes contributing via forking on Git hosts that support easy forking.
Many hosting sites support this (including GitHub, BitBucket, repo.or.cz, and others), and many project maintainers expect this style of contribution.
The next section deals with projects that prefer to accept contributed patches via email. First, you’ll probably want to clone the main repository, create a topic branch for the patch or patch series you’re planning to contribute, and do your work there.
The sequence looks basically like this: $ git clone <url>
$ cd project
$ git checkout -b featureA
  ... work ...
$ git commit
  ... work ...
$ git commit You may want to use rebase -i to squash your work down to a single commit, or rearrange the work in the commits to make the patch easier for the maintainer to review — see Rewriting History for more information about interactive rebasing. When your branch work is finished and you’re ready to contribute it back to the maintainers, go to the original project page and click the “Fork” button, creating your own writable fork of the project.
You then need to add this repository URL as a new remote of your local repository; in this example, let’s call it myfork: $ git remote add myfork <url> You then need to push your new work to this repository.
It’s easiest to push the topic branch you’re working on to your forked repository, rather than merging that work into your master branch and pushing that.
The reason is that if your work isn’t accepted or is cherry-picked, you don’t have to rewind your master branch (the Git cherry-pick operation is covered in more detail in Rebasing and Cherry-Picking Workflows).
If the maintainers merge, rebase, or cherry-pick your work, you’ll eventually get it back via pulling from their repository anyhow. In any event, you can push your work with: $ git push -u myfork featureA Once your work has been pushed to your fork of the repository, you need to notify the maintainers of the original project that you have work you’d like them to merge.
This is often called a pull request, and you typically generate such a request either via the website — GitHub has its own “Pull Request” mechanism that we’ll go over in GitHub — or you can run the git request-pull command and email the subsequent output to the project maintainer manually. The git request-pull command takes the base branch into which you want your topic branch pulled and the Git repository URL you want them to pull from, and produces a summary of all the changes you’re asking to be pulled.
For instance, if Jessica wants to send John a pull request, and she’s done two commits on the topic branch she just pushed, she can run this: $ git request-pull origin/master myfork
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
Jessica Smith (1):
        Create new function

are available in the git repository at:

  https://githost/simplegit.git featureA

Jessica Smith (2):
      Add limit to log function
      Increase log output to 30 from 25

 lib/simplegit.rb |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-) This output can be sent to the maintainer — it tells them where the work was branched from, summarizes the commits, and identifies from where the new work is to be pulled. On a project for which you’re not the maintainer, it’s generally easier to have a branch like master always track origin/master and to do your work in topic branches that you can easily discard if they’re rejected.
Having work themes isolated into topic branches also makes it easier for you to rebase your work if the tip of the main repository has moved in the meantime and your commits no longer apply cleanly.
For example, if you want to submit a second topic of work to the project, don’t continue working on the topic branch you just pushed up — start over from the main repository’s master branch: $ git checkout -b featureB origin/master
  ... work ...
$ git commit
$ git push myfork featureB
$ git request-pull origin/master myfork
  ... email generated request pull to maintainer ...
$ git fetch origin Now, each of your topics is contained within a silo — similar to a patch queue — that you can rewrite, rebase, and modify without the topics interfering or interdepending on each other, like so: Let’s say the project maintainer has pulled in a bunch of other patches and tried your first branch, but it no longer cleanly merges.
In this case, you can try to rebase that branch on top of origin/master, resolve the conflicts for the maintainer, and then resubmit your changes: $ git checkout featureA
$ git rebase origin/master
$ git push -f myfork featureA This rewrites your history to now look like Commit history after featureA work. Because you rebased the branch, you have to specify the -f to your push command in order to be able to replace the featureA branch on the server with a commit that isn’t a descendant of it.
An alternative would be to push this new work to a different branch on the server (perhaps called featureAv2). Let’s look at one more possible scenario: the maintainer has looked at work in your second branch and likes the concept but would like you to change an implementation detail.
You’ll also take this opportunity to move the work to be based off the project’s current master branch.
You start a new branch based off the current origin/master branch, squash the featureB changes there, resolve any conflicts, make the implementation change, and then push that as a new branch:  $ git checkout -b featureBv2 origin/master
$ git merge --squash featureB
  ... change implementation ...
$ git commit
$ git push myfork featureBv2 The --squash option takes all the work on the merged branch and squashes it into one changeset producing the repository state as if a real merge happened, without actually making a merge commit.
This means your future commit will have one parent only and allows you to introduce all the changes from another branch and then make more changes before recording the new commit.
Also the --no-commit option can be useful to delay the merge commit in case of the default merge process. At this point, you can notify the maintainer that you’ve made the requested changes, and that they can find those changes in your featureBv2 branch."
1.Getting Started,Public Project over Email,"Many projects have established procedures for accepting patches — you’ll need to check the specific rules for each project, because they will differ.
Since there are several older, larger projects which accept patches via a developer mailing list, we’ll go over an example of that now. The workflow is similar to the previous use case — you create topic branches for each patch series you work on.
The difference is how you submit them to the project.
Instead of forking the project and pushing to your own writable version, you generate email versions of each commit series and email them to the developer mailing list: $ git checkout -b topicA
  ... work ...
$ git commit
  ... work ...
$ git commit Now you have two commits that you want to send to the mailing list.
You use git format-patch to generate the mbox-formatted files that you can email to the list — it turns each commit into an email message with the first line of the commit message as the subject and the rest of the message plus the patch that the commit introduces as the body.
The nice thing about this is that applying a patch from an email generated with format-patch preserves all the commit information properly. $ git format-patch -M origin/master
0001-add-limit-to-log-function.patch
0002-increase-log-output-to-30-from-25.patch The format-patch command prints out the names of the patch files it creates.
The -M switch tells Git to look for renames.
The files end up looking like this: $ cat 0001-add-limit-to-log-function.patch
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] Add limit to log function

Limit log functionality to the first 20

---
 lib/simplegit.rb |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 76f47bc..f9815f1 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -14,7 +14,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command(""git log #{treeish}"")
+    command(""git log -n 20 #{treeish}"")
   end

   def ls_tree(treeish = 'master')
--
2.1.0 You can also edit these patch files to add more information for the email list that you don’t want to show up in the commit message.
If you add text between the --- line and the beginning of the patch (the diff --git line), the developers can read it, but that content is ignored by the patching process. To email this to a mailing list, you can either paste the file into your email program or send it via a command-line program.
Pasting the text often causes formatting issues, especially with “smarter” clients that don’t preserve newlines and other whitespace appropriately.
Luckily, Git provides a tool to help you send properly formatted patches via IMAP, which may be easier for you.
We’ll demonstrate how to send a patch via Gmail, which happens to be the email agent we know best; you can read detailed instructions for a number of mail programs at the end of the aforementioned Documentation/SubmittingPatches file in the Git source code. First, you need to set up the imap section in your ~/.gitconfig file.
You can set each value separately with a series of git config commands, or you can add them manually, but in the end your config file should look something like this: [imap]
  folder = ""[Gmail]/Drafts""
  host = imaps://imap.gmail.com
  user = user@gmail.com
  pass = YX]8g76G_2^sFbd
  port = 993
  sslverify = false If your IMAP server doesn’t use SSL, the last two lines probably aren’t necessary, and the host value will be imap:// instead of imaps://.
When that is set up, you can use git imap-send to place the patch series in the Drafts folder of the specified IMAP server: $ cat *.patch |git imap-send
Resolving imap.gmail.com... ok
Connecting to [74.125.142.109]:993... ok
Logging in...
sending 2 messages
100% (2/2) done At this point, you should be able to go to your Drafts folder, change the To field to the mailing list you’re sending the patch to, possibly CC the maintainer or person responsible for that section, and send it off. You can also send the patches through an SMTP server.
As before, you can set each value separately with a series of git config commands, or you can add them manually in the sendemail section in your ~/.gitconfig file: [sendemail]
  smtpencryption = tls
  smtpserver = smtp.gmail.com
  smtpuser = user@gmail.com
  smtpserverport = 587 After this is done, you can use git send-email to send your patches: $ git send-email *.patch
0001-add-limit-to-log-function.patch
0002-increase-log-output-to-30-from-25.patch
Who should the emails appear to be from? [Jessica Smith <jessica@example.com>]
Emails will be sent from: Jessica Smith <jessica@example.com>
Who should the emails be sent to? jessica@example.com
Message-ID to be used as In-Reply-To for the first email? y Then, Git spits out a bunch of log information looking something like this for each patch you’re sending: (mbox) Adding cc: Jessica Smith <jessica@example.com> from
  \line 'From: Jessica Smith <jessica@example.com>'
OK. Log says:
Sendmail: /usr/sbin/sendmail -i jessica@example.com
From: Jessica Smith <jessica@example.com>
To: jessica@example.com
Subject: [PATCH 1/2] Add limit to log function
Date: Sat, 30 May 2009 13:29:15 -0700
Message-Id: <1243715356-61726-1-git-send-email-jessica@example.com>
X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty
In-Reply-To: <y>
References: <y>

Result: OK For help on configuring your system and email, more tips and tricks, and a sandbox to send a trial patch via email, go to git-send-email.io."
1.Getting Started,1.Getting Started,"In addition to knowing how to contribute effectively to a project, you’ll likely need to know how to maintain one.
This can consist of accepting and applying patches generated via format-patch and emailed to you, or integrating changes in remote branches for repositories you’ve added as remotes to your project.
Whether you maintain a canonical repository or want to help by verifying or approving patches, you need to know how to accept work in a way that is clearest for other contributors and sustainable by you over the long run."
1.Getting Started,Working in Topic Branches,"When you’re thinking of integrating new work, it’s generally a good idea to try it out in a topic branch — a temporary branch specifically made to try out that new work.
This way, it’s easy to tweak a patch individually and leave it if it’s not working until you have time to come back to it.
If you create a simple branch name based on the theme of the work you’re going to try, such as ruby_client or something similarly descriptive, you can easily remember it if you have to abandon it for a while and come back later.
The maintainer of the Git project tends to namespace these branches as well — such as sc/ruby_client, where sc is short for the person who contributed the work.
As you’ll remember, you can create the branch based off your master branch like this: $ git branch sc/ruby_client master Or, if you want to also switch to it immediately, you can use the checkout -b option: $ git checkout -b sc/ruby_client master Now you’re ready to add the contributed work that you received into this topic branch and determine if you want to merge it into your longer-term branches."
1.Getting Started,Applying Patches from Email,"If you receive a patch over email that you need to integrate into your project, you need to apply the patch in your topic branch to evaluate it.
There are two ways to apply an emailed patch: with git apply or with git am. If you received the patch from someone who generated it with git diff or some variation of the Unix diff command (which is not recommended; see the next section), you can apply it with the git apply command.
Assuming you saved the patch at /tmp/patch-ruby-client.patch, you can apply the patch like this: $ git apply /tmp/patch-ruby-client.patch This modifies the files in your working directory.
It’s almost identical to running a patch -p1 command to apply the patch, although it’s more paranoid and accepts fewer fuzzy matches than patch.
It also handles file adds, deletes, and renames if they’re described in the git diff format, which patch won’t do.
Finally, git apply is an “apply all or abort all” model where either everything is applied or nothing is, whereas patch can partially apply patchfiles, leaving your working directory in a weird state.
git apply is overall much more conservative than patch.
It won’t create a commit for you — after running it, you must stage and commit the changes introduced manually. You can also use git apply to see if a patch applies cleanly before you try actually applying it — you can run git apply --check with the patch: $ git apply --check 0001-see-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply If there is no output, then the patch should apply cleanly.
This command also exits with a non-zero status if the check fails, so you can use it in scripts if you want. If the contributor is a Git user and was good enough to use the format-patch command to generate their patch, then your job is easier because the patch contains author information and a commit message for you.
If you can, encourage your contributors to use format-patch instead of diff to generate patches for you.
You should only have to use git apply for legacy patches and things like that. To apply a patch generated by format-patch, you use git am (the command is named am as it is used to ""apply a series of patches from a mailbox"").
Technically, git am is built to read an mbox file, which is a simple, plain-text format for storing one or more email messages in one text file.
It looks something like this: From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] Add limit to log function

Limit log functionality to the first 20 This is the beginning of the output of the git format-patch command that you saw in the previous section; it also represents a valid mbox email format.
If someone has emailed you the patch properly using git send-email, and you download that into an mbox format, then you can point git am to that mbox file, and it will start applying all the patches it sees.
If you run a mail client that can save several emails out in mbox format, you can save entire patch series into a file and then use git am to apply them one at a time. However, if someone uploaded a patch file generated via git format-patch to a ticketing system or something similar, you can save the file locally and then pass that file saved on your disk to git am to apply it: $ git am 0001-limit-log-function.patch
Applying: Add limit to log function You can see that it applied cleanly and automatically created the new commit for you.
The author information is taken from the email’s From and Date headers, and the message of the commit is taken from the Subject and body (before the patch) of the email.
For example, if this patch was applied from the mbox example above, the commit generated would look something like this: $ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   Add limit to log function

   Limit log functionality to the first 20 The Commit information indicates the person who applied the patch and the time it was applied.
The Author information is the individual who originally created the patch and when it was originally created. But it’s possible that the patch won’t apply cleanly.
Perhaps your main branch has diverged too far from the branch the patch was built from, or the patch depends on another patch you haven’t applied yet.
In that case, the git am process will fail and ask you what you want to do: $ git am 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run ""git am --resolved"".
If you would prefer to skip this patch, instead run ""git am --skip"".
To restore the original branch and stop patching run ""git am --abort"". This command puts conflict markers in any files it has issues with, much like a conflicted merge or rebase operation.
You solve this issue much the same way — edit the file to resolve the conflict, stage the new file, and then run git am --resolved to continue to the next patch: $ (fix the file)
$ git add ticgit.gemspec
$ git am --resolved
Applying: See if this helps the gem If you want Git to try a bit more intelligently to resolve the conflict, you can pass a -3 option to it, which makes Git attempt a three-way merge.
This option isn’t on by default because it doesn’t work if the commit the patch says it was based on isn’t in your repository.
If you do have that commit — if the patch was based on a public commit — then the -3 option is generally much smarter about applying a conflicting patch: $ git am -3 0001-see-if-this-helps-the-gem.patch
Applying: See if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied. In this case, without the -3 option the patch would have been considered as a conflict.
Since the -3 option was used the patch applied cleanly. If you’re applying a number of patches from an mbox, you can also run the am command in interactive mode, which stops at each patch it finds and asks if you want to apply it: $ git am -3 -i mbox
Commit Body is:
--------------------------
See if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all This is nice if you have a number of patches saved, because you can view the patch first if you don’t remember what it is, or not apply the patch if you’ve already done so. When all the patches for your topic are applied and committed into your branch, you can choose whether and how to integrate them into a longer-running branch."
1.Getting Started,Checking Out Remote Branches,"If your contribution came from a Git user who set up their own repository, pushed a number of changes into it, and then sent you the URL to the repository and the name of the remote branch the changes are in, you can add them as a remote and do merges locally. For instance, if Jessica sends you an email saying that she has a great new feature in the ruby-client branch of her repository, you can test it by adding the remote and checking out that branch locally: $ git remote add jessica https://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client If she emails you again later with another branch containing another great feature, you could directly fetch and checkout because you already have the remote setup. This is most useful if you’re working with a person consistently.
If someone only has a single patch to contribute once in a while, then accepting it over email may be less time consuming than requiring everyone to run their own server and having to continually add and remove remotes to get a few patches.
You’re also unlikely to want to have hundreds of remotes, each for someone who contributes only a patch or two.
However, scripts and hosted services may make this easier — it depends largely on how you develop and how your contributors develop. The other advantage of this approach is that you get the history of the commits as well.
Although you may have legitimate merge issues, you know where in your history their work is based; a proper three-way merge is the default rather than having to supply a -3 and hope the patch was generated off a public commit to which you have access. If you aren’t working with a person consistently but still want to pull from them in this way, you can provide the URL of the remote repository to the git pull command.
This does a one-time pull and doesn’t save the URL as a remote reference: $ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by the 'recursive' strategy."
1.Getting Started,Determining What Is Introduced,"Now you have a topic branch that contains contributed work.
At this point, you can determine what you’d like to do with it.
This section revisits a couple of commands so you can see how you can use them to review exactly what you’ll be introducing if you merge this into your main branch. It’s often helpful to get a review of all the commits that are in this branch but that aren’t in your master branch.
You can exclude commits in the master branch by adding the --not option before the branch name.
This does the same thing as the master..contrib format that we used earlier.
For example, if your contributor sends you two patches and you create a branch called contrib and applied those patches there, you can run this: $ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    See if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    Update gemspec to hopefully work better To see what changes each commit introduces, remember that you can pass the -p option to git log and it will append the diff introduced to each commit. To see a full diff of what would happen if you were to merge this topic branch with another branch, you may have to use a weird trick to get the correct results.
You may think to run this: $ git diff master This command gives you a diff, but it may be misleading.
If your master branch has moved forward since you created the topic branch from it, then you’ll get seemingly strange results.
This happens because Git directly compares the snapshots of the last commit of the topic branch you’re on and the snapshot of the last commit on the master branch.
For example, if you’ve added a line in a file on the master branch, a direct comparison of the snapshots will look like the topic branch is going to remove that line. If master is a direct ancestor of your topic branch, this isn’t a problem; but if the two histories have diverged, the diff will look like you’re adding all the new stuff in your topic branch and removing everything unique to the master branch. What you really want to see are the changes added to the topic branch — the work you’ll introduce if you merge this branch with master.
You do that by having Git compare the last commit on your topic branch with the first common ancestor it has with the master branch. Technically, you can do that by explicitly figuring out the common ancestor and then running your diff on it: $ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db or, more concisely: $ git diff $(git merge-base contrib master) However, neither of those is particularly convenient, so Git provides another shorthand for doing the same thing: the triple-dot syntax.
In the context of the git diff command, you can put three periods after another branch to do a diff between the last commit of the branch you’re on and its common ancestor with another branch: $ git diff master...contrib This command shows you only the work your current topic branch has introduced since its common ancestor with master.
That is a very useful syntax to remember."
1.Getting Started,Integrating Contributed Work,"When all the work in your topic branch is ready to be integrated into a more mainline branch, the question is how to do it.
Furthermore, what overall workflow do you want to use to maintain your project?
You have a number of choices, so we’ll cover a few of them. One basic workflow is to simply merge all that work directly into your master branch.
In this scenario, you have a master branch that contains basically stable code.
When you have work in a topic branch that you think you’ve completed, or work that someone else has contributed and you’ve verified, you merge it into your master branch, delete that just-merged topic branch, and repeat. For instance, if we have a repository with work in two branches named ruby_client and php_client that looks like History with several topic branches, and we merge ruby_client followed by php_client, your history will end up looking like After a topic branch merge. That is probably the simplest workflow, but it can possibly be problematic if you’re dealing with larger or more stable projects where you want to be really careful about what you introduce. If you have a more important project, you might want to use a two-phase merge cycle.
In this scenario, you have two long-running branches, master and develop, in which you determine that master is updated only when a very stable release is cut and all new code is integrated into the develop branch.
You regularly push both of these branches to the public repository.
Each time you have a new topic branch to merge in (Before a topic branch merge), you merge it into develop (After a topic branch merge); then, when you tag a release, you fast-forward master to wherever the now-stable develop branch is (After a project release). This way, when people clone your project’s repository, they can either check out master to build the latest stable version and keep up to date on that easily, or they can check out develop, which is the more cutting-edge content.
You can also extend this concept by having an integrate branch where all the work is merged together.
Then, when the codebase on that branch is stable and passes tests, you merge it into a develop branch; and when that has proven itself stable for a while, you fast-forward your master branch. The Git project has four long-running branches: master, next, and seen (formerly 'pu' — proposed updates) for new work, and maint for maintenance backports.
When new work is introduced by contributors, it’s collected into topic branches in the maintainer’s repository in a manner similar to what we’ve described (see Managing a complex series of parallel contributed topic branches).
At this point, the topics are evaluated to determine whether they’re safe and ready for consumption or whether they need more work.
If they’re safe, they’re merged into next, and that branch is pushed up so everyone can try the topics integrated together. If the topics still need work, they’re merged into seen instead.
When it’s determined that they’re totally stable, the topics are re-merged into master.
The next and seen branches are then rebuilt from the master.
This means master almost always moves forward, next is rebased occasionally, and seen is rebased even more often: When a topic branch has finally been merged into master, it’s removed from the repository.
The Git project also has a maint branch that is forked off from the last release to provide backported patches in case a maintenance release is required.
Thus, when you clone the Git repository, you have four branches that you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute; and the maintainer has a structured workflow to help them vet new contributions.
The Git project’s workflow is specialized.
To clearly understand this you could check out the Git Maintainer’s guide. Other maintainers prefer to rebase or cherry-pick contributed work on top of their master branch, rather than merging it in, to keep a mostly linear history.
When you have work in a topic branch and have determined that you want to integrate it, you move to that branch and run the rebase command to rebuild the changes on top of your current master (or develop, and so on) branch.
If that works well, you can fast-forward your master branch, and you’ll end up with a linear project history. The other way to move introduced work from one branch to another is to cherry-pick it.
A cherry-pick in Git is like a rebase for a single commit.
It takes the patch that was introduced in a commit and tries to reapply it on the branch you’re currently on.
This is useful if you have a number of commits on a topic branch and you want to integrate only one of them, or if you only have one commit on a topic branch and you’d prefer to cherry-pick it rather than run rebase.
For example, suppose you have a project that looks like this: If you want to pull commit e43a6 into your master branch, you can run: $ git cherry-pick e43a6
Finished one cherry-pick.
[master]: created a0a41a9: ""More friendly message when locking the index fails.""
 3 files changed, 17 insertions(+), 3 deletions(-) This pulls the same change introduced in e43a6, but you get a new commit SHA-1 value, because the date applied is different.
Now your history looks like this: Now you can remove your topic branch and drop the commits you didn’t want to pull in. If you’re doing lots of merging and rebasing, or you’re maintaining a long-lived topic branch, Git has a feature called “rerere” that can help. Rerere stands for “reuse recorded resolution” — it’s a way of shortcutting manual conflict resolution.
When rerere is enabled, Git will keep a set of pre- and post-images from successful merges, and if it notices that there’s a conflict that looks exactly like one you’ve already fixed, it’ll just use the fix from last time, without bothering you with it. This feature comes in two parts: a configuration setting and a command.
The configuration setting is rerere.enabled, and it’s handy enough to put in your global config: $ git config --global rerere.enabled true Now, whenever you do a merge that resolves conflicts, the resolution will be recorded in the cache in case you need it in the future. If you need to, you can interact with the rerere cache using the git rerere command.
When it’s invoked alone, Git checks its database of resolutions and tries to find a match with any current merge conflicts and resolve them (although this is done automatically if rerere.enabled is set to true).
There are also subcommands to see what will be recorded, to erase specific resolution from the cache, and to clear the entire cache.
We will cover rerere in more detail in Rerere."
1.Getting Started,Tagging Your Releases,"When you’ve decided to cut a release, you’ll probably want to assign a tag so you can re-create that release at any point going forward.
You can create a new tag as discussed in Git Basics.
If you decide to sign the tag as the maintainer, the tagging may look something like this: $ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: ""Scott Chacon <schacon@gmail.com>""
1024-bit DSA key, ID F721C45A, created 2009-02-09 If you do sign your tags, you may have the problem of distributing the public PGP key used to sign your tags.
The maintainer of the Git project has solved this issue by including their public key as a blob in the repository and then adding a tag that points directly to that content.
To do this, you can figure out which key you want by running gpg --list-keys: $ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09] Then, you can directly import the key into the Git database by exporting it and piping that through git hash-object, which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob: $ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92 Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA-1 value that the hash-object command gave you: $ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92 If you run git push --tags, the maintainer-pgp-pub tag will be shared with everyone.
If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG: $ git show maintainer-pgp-pub | gpg --import They can use that key to verify all your signed tags.
Also, if you include instructions in the tag message, running git show <tag> will let you give the end user more specific instructions about tag verification."
1.Getting Started,Generating a Build Number,"Because Git doesn’t have monotonically increasing numbers like 'v123' or the equivalent to go with each commit, if you want to have a human-readable name to go with a commit, you can run git describe on that commit.
In response, Git generates a string consisting of the name of the most recent tag earlier than that commit, followed by the number of commits since that tag, followed finally by a partial SHA-1 value of the commit being described (prefixed with the letter ""g"" meaning Git): $ git describe master
v1.6.2-rc1-20-g8c5b85c This way, you can export a snapshot or build and name it something understandable to people.
In fact, if you build Git from source code cloned from the Git repository, git --version gives you something that looks like this.
If you’re describing a commit that you have directly tagged, it gives you simply the tag name. By default, the git describe command requires annotated tags (tags created with the -a or -s flag); if you want to take advantage of lightweight (non-annotated) tags as well, add the --tags option to the command.
You can also use this string as the target of a git checkout or git show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.
For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure SHA-1 object uniqueness, so older git describe output names were invalidated."
1.Getting Started,Preparing a Release,"Now you want to release a build.
One of the things you’ll want to do is create an archive of the latest snapshot of your code for those poor souls who don’t use Git.
The command to do this is git archive: $ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz If someone opens that tarball, they get the latest snapshot of your project under a project directory.
You can also create a zip archive in much the same way, but by passing the --format=zip option to git archive: $ git archive master --prefix='project/' --format=zip > `git describe master`.zip You now have a nice tarball and a zip archive of your project release that you can upload to your website or email to people."
1.Getting Started,1.Getting Started,"GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects.
A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things.
So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally. This chapter is about using GitHub effectively.
We’ll cover signing up for and managing an account, creating and using Git repositories, common workflows to contribute to projects and to accept contributions to yours, GitHub’s programmatic interface and lots of little tips to make your life easier in general. If you are not interested in using GitHub to host your own projects or to collaborate with other projects that are hosted on GitHub, you can safely skip to Git Tools. The first thing you need to do is set up a free user account.
Simply visit https://github.com, choose a user name that isn’t already taken, provide an email address and a password, and click the big green “Sign up for GitHub” button. The next thing you’ll see is the pricing page for upgraded plans, but it’s safe to ignore this for now.
GitHub will send you an email to verify the address you provided.
Go ahead and do this; it’s pretty important (as we’ll see later). GitHub provides almost all of its functionality with free accounts, except some advanced features. GitHub’s paid plans include advanced tools and features as well as increased limits for free services, but we won’t be covering those in this book.
To get more information about available plans and their comparison, visit https://github.com/pricing. Clicking the Octocat logo at the top-left of the screen will take you to your dashboard page.
You’re now ready to use GitHub."
1.Getting Started,SSH Access,"As of right now, you’re fully able to connect with Git repositories using the https:// protocol, authenticating with the username and password you just set up.
However, to simply clone public projects, you don’t even need to sign up - the account we just created comes into play when we fork projects and push to our forks a bit later. If you’d like to use SSH remotes, you’ll need to configure a public key.
If you don’t already have one, see Generating Your SSH Public Key.
Open up your account settings using the link at the top-right of the window: Then select the “SSH keys” section along the left-hand side. From there, click the “Add an SSH key” button, give your key a name, paste the contents of your ~/.ssh/id_rsa.pub (or whatever you named it) public-key file into the text area, and click “Add key”. Be sure to name your SSH key something you can remember.
You can name each of your keys (e.g. ""My Laptop"" or ""Work Account"") so that if you need to revoke a key later, you can easily tell which one you’re looking for."
1.Getting Started,Your Avatar,"Next, if you wish, you can replace the avatar that is generated for you with an image of your choosing.
First go to the “Profile” tab (above the SSH Keys tab) and click “Upload new picture”. We’ll choose a copy of the Git logo that is on our hard drive and then we get a chance to crop it. Now anywhere you interact on the site, people will see your avatar next to your username. If you happen to have uploaded an avatar to the popular Gravatar service (often used for WordPress accounts), that avatar will be used by default and you don’t need to do this step."
1.Getting Started,Your Email Addresses,"The way that GitHub maps your Git commits to your user is by email address.
If you use multiple email addresses in your commits and you want GitHub to link them up properly, you need to add all the email addresses you have used to the Emails section of the admin section. In Add all your email addresses we can see some of the different states that are possible.
The top address is verified and set as the primary address, meaning that is where you’ll get any notifications and receipts.
The second address is verified and so can be set as the primary if you wish to switch them.
The final address is unverified, meaning that you can’t make it your primary address.
If GitHub sees any of these in commit messages in any repository on the site, it will be linked to your user now."
1.Getting Started,1.Getting Started,"GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects.
A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things.
So while it’s not a direct part of the Git open source project, there’s a good chance that you’ll want or need to interact with GitHub at some point while using Git professionally. This chapter is about using GitHub effectively.
We’ll cover signing up for and managing an account, creating and using Git repositories, common workflows to contribute to projects and to accept contributions to yours, GitHub’s programmatic interface and lots of little tips to make your life easier in general. If you are not interested in using GitHub to host your own projects or to collaborate with other projects that are hosted on GitHub, you can safely skip to Git Tools. The first thing you need to do is set up a free user account.
Simply visit https://github.com, choose a user name that isn’t already taken, provide an email address and a password, and click the big green “Sign up for GitHub” button. The next thing you’ll see is the pricing page for upgraded plans, but it’s safe to ignore this for now.
GitHub will send you an email to verify the address you provided.
Go ahead and do this; it’s pretty important (as we’ll see later). GitHub provides almost all of its functionality with free accounts, except some advanced features. GitHub’s paid plans include advanced tools and features as well as increased limits for free services, but we won’t be covering those in this book.
To get more information about available plans and their comparison, visit https://github.com/pricing. Clicking the Octocat logo at the top-left of the screen will take you to your dashboard page.
You’re now ready to use GitHub."
1.Getting Started,SSH Access,"As of right now, you’re fully able to connect with Git repositories using the https:// protocol, authenticating with the username and password you just set up.
However, to simply clone public projects, you don’t even need to sign up - the account we just created comes into play when we fork projects and push to our forks a bit later. If you’d like to use SSH remotes, you’ll need to configure a public key.
If you don’t already have one, see Generating Your SSH Public Key.
Open up your account settings using the link at the top-right of the window: Then select the “SSH keys” section along the left-hand side. From there, click the “Add an SSH key” button, give your key a name, paste the contents of your ~/.ssh/id_rsa.pub (or whatever you named it) public-key file into the text area, and click “Add key”. Be sure to name your SSH key something you can remember.
You can name each of your keys (e.g. ""My Laptop"" or ""Work Account"") so that if you need to revoke a key later, you can easily tell which one you’re looking for."
1.Getting Started,Your Avatar,"Next, if you wish, you can replace the avatar that is generated for you with an image of your choosing.
First go to the “Profile” tab (above the SSH Keys tab) and click “Upload new picture”. We’ll choose a copy of the Git logo that is on our hard drive and then we get a chance to crop it. Now anywhere you interact on the site, people will see your avatar next to your username. If you happen to have uploaded an avatar to the popular Gravatar service (often used for WordPress accounts), that avatar will be used by default and you don’t need to do this step."
1.Getting Started,Your Email Addresses,"The way that GitHub maps your Git commits to your user is by email address.
If you use multiple email addresses in your commits and you want GitHub to link them up properly, you need to add all the email addresses you have used to the Emails section of the admin section. In Add all your email addresses we can see some of the different states that are possible.
The top address is verified and set as the primary address, meaning that is where you’ll get any notifications and receipts.
The second address is verified and so can be set as the primary if you wish to switch them.
The final address is unverified, meaning that you can’t make it your primary address.
If GitHub sees any of these in commit messages in any repository on the site, it will be linked to your user now."
1.Getting Started,1.Getting Started,"Now that our account is set up, let’s walk through some details that could be useful in helping you contribute to an existing project."
1.Getting Started,Forking Projects,"If you want to contribute to an existing project to which you don’t have push access, you can “fork” the project.
When you “fork” a project, GitHub will make a copy of the project that is entirely yours; it lives in your namespace, and you can push to it. Historically, the term “fork” has been somewhat negative in context, meaning that someone took an open source project in a different direction, sometimes creating a competing project and splitting the contributors.
In GitHub, a “fork” is simply the same project in your own namespace, allowing you to make changes to a project publicly as a way to contribute in a more open manner. This way, projects don’t have to worry about adding users as collaborators to give them push access.
People can fork a project, push to it, and contribute their changes back to the original repository by creating what’s called a Pull Request, which we’ll cover next.
This opens up a discussion thread with code review, and the owner and the contributor can then communicate about the change until the owner is happy with it, at which point the owner can merge it in. To fork a project, visit the project page and click the “Fork” button at the top-right of the page. After a few seconds, you’ll be taken to your new project page, with your own writeable copy of the code."
1.Getting Started,The GitHub Flow,"GitHub is designed around a particular collaboration workflow, centered on Pull Requests.
This flow works whether you’re collaborating with a tightly-knit team in a single shared repository, or a globally-distributed company or network of strangers contributing to a project through dozens of forks.
It is centered on the Topic Branches workflow covered in Git Branching. Here’s how it generally works: Fork the project. Create a topic branch from master. Make some commits to improve the project. Push this branch to your GitHub project. Open a Pull Request on GitHub. Discuss, and optionally continue committing. The project owner merges or closes the Pull Request. Sync the updated master back to your fork. This is basically the Integration Manager workflow covered in Integration-Manager Workflow, but instead of using email to communicate and review changes, teams use GitHub’s web based tools. Let’s walk through an example of proposing a change to an open source project hosted on GitHub using this flow. You can use the official GitHub CLI tool instead of the GitHub web interface for most things.
The tool can be used on Windows, macOS, and Linux systems.
Go to the GitHub CLI homepage for installation instructions and the manual. Tony is looking for code to run on his Arduino programmable microcontroller and has found a great program file on GitHub at https://github.com/schacon/blink. The only problem is that the blinking rate is too fast.
We think it’s much nicer to wait 3 seconds instead of 1 in between each state change.
So let’s improve the program and submit it back to the project as a proposed change. First, we click the 'Fork' button as mentioned earlier to get our own copy of the project.
Our user name here is “tonychacon” so our copy of this project is at https://github.com/tonychacon/blink and that’s where we can edit it.
We will clone it locally, create a topic branch, make the code change and finally push that change back up to GitHub. $ git clone https://github.com/tonychacon/blink (1)
Cloning into 'blink'...

$ cd blink
$ git checkout -b slow-blink (2)
Switched to a new branch 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino (macOS) (3)
# If you're on a Linux system, do this instead:
# $ sed -i 's/1000/3000/' blink.ino (3)

$ git diff --word-diff (4)
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'Change delay to 3 seconds' (5)
[slow-blink 5ca509d] Change delay to 3 seconds
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink (6)
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink Clone our fork of the project locally. Create a descriptive topic branch. Make our change to the code. Check that the change is good. Commit our change to the topic branch. Push our new topic branch back up to our GitHub fork. Now if we go back to our fork on GitHub, we can see that GitHub noticed that we pushed a new topic branch up and presents us with a big green button to check out our changes and open a Pull Request to the original project. You can alternatively go to the “Branches” page at https://github.com/<user>/<project>/branches to locate your branch and open a new Pull Request from there. If we click that green button, we’ll see a screen that asks us to give our Pull Request a title and description.
It is almost always worthwhile to put some effort into this, since a good description helps the owner of the original project determine what you were trying to do, whether your proposed changes are correct, and whether accepting the changes would improve the original project. We also see a list of the commits in our topic branch that are “ahead” of the master branch (in this case, just the one) and a unified diff of all the changes that will be made should this branch get merged by the project owner. When you hit the 'Create pull request' button on this screen, the owner of the project you forked will get a notification that someone is suggesting a change and will link to a page that has all of this information on it. Though Pull Requests are used commonly for public projects like this when the contributor has a complete change ready to be made, it’s also often used in internal projects at the beginning of the development cycle.
Since you can keep pushing to the topic branch even after the Pull Request is opened, it’s often opened early and used as a way to iterate on work as a team within a context, rather than opened at the very end of the process. At this point, the project owner can look at the suggested change and merge it, reject it or comment on it.
Let’s say that he likes the idea, but would prefer a slightly longer time for the light to be off than on. Where this conversation may take place over email in the workflows presented in Distributed Git, on GitHub this happens online.
The project owner can review the unified diff and leave a comment by clicking on any of the lines. Once the maintainer makes this comment, the person who opened the Pull Request (and indeed, anyone else watching the repository) will get a notification.
We’ll go over customizing this later, but if he had email notifications turned on, Tony would get an email like this: Anyone can also leave general comments on the Pull Request.
In Pull Request discussion page we can see an example of the project owner both commenting on a line of code and then leaving a general comment in the discussion section.
You can see that the code comments are brought into the conversation as well. Now the contributor can see what they need to do in order to get their change accepted.
Luckily this is very straightforward.
Where over email you may have to re-roll your series and resubmit it to the mailing list, with GitHub you simply commit to the topic branch again and push, which will automatically update the Pull Request.
In Pull Request final you can also see that the old code comment has been collapsed in the updated Pull Request, since it was made on a line that has since been changed. Adding commits to an existing Pull Request doesn’t trigger a notification, so once Tony has pushed his corrections he decides to leave a comment to inform the project owner that he made the requested change. An interesting thing to notice is that if you click on the “Files Changed” tab on this Pull Request, you’ll get the “unified” diff — that is, the total aggregate difference that would be introduced to your main branch if this topic branch was merged in.
In git diff terms, it basically automatically shows you git diff master…​<branch> for the branch this Pull Request is based on.
See Determining What Is Introduced for more about this type of diff. The other thing you’ll notice is that GitHub checks to see if the Pull Request merges cleanly and provides a button to do the merge for you on the server.
This button only shows up if you have write access to the repository and a trivial merge is possible.
If you click it GitHub will perform a “non-fast-forward” merge, meaning that even if the merge could be a fast-forward, it will still create a merge commit. If you would prefer, you can simply pull the branch down and merge it locally.
If you merge this branch into the master branch and push it to GitHub, the Pull Request will automatically be closed. This is the basic workflow that most GitHub projects use.
Topic branches are created, Pull Requests are opened on them, a discussion ensues, possibly more work is done on the branch and eventually the request is either closed or merged. It’s important to note that you can also open a Pull Request between two branches in the same repository.
If you’re working on a feature with someone and you both have write access to the project, you can push a topic branch to the repository and open a Pull Request on it to the master branch of that same project to initiate the code review and discussion process.
No forking necessary."
1.Getting Started,Advanced Pull Requests,"Now that we’ve covered the basics of contributing to a project on GitHub, let’s cover a few interesting tips and tricks about Pull Requests so you can be more effective in using them. It’s important to understand that many projects don’t really think of Pull Requests as queues of perfect patches that should apply cleanly in order, as most mailing list-based projects think of patch series contributions.
Most GitHub projects think about Pull Request branches as iterative conversations around a proposed change, culminating in a unified diff that is applied by merging. This is an important distinction, because generally the change is suggested before the code is thought to be perfect, which is far more rare with mailing list based patch series contributions.
This enables an earlier conversation with the maintainers so that arriving at the proper solution is more of a community effort.
When code is proposed with a Pull Request and the maintainers or community suggest a change, the patch series is generally not re-rolled, but instead the difference is pushed as a new commit to the branch, moving the conversation forward with the context of the previous work intact. For instance, if you go back and look again at Pull Request final, you’ll notice that the contributor did not rebase his commit and send another Pull Request.
Instead they added new commits and pushed them to the existing branch.
This way if you go back and look at this Pull Request in the future, you can easily find all of the context of why decisions were made.
Pushing the “Merge” button on the site purposefully creates a merge commit that references the Pull Request so that it’s easy to go back and research the original conversation if necessary. If your Pull Request becomes out of date or otherwise doesn’t merge cleanly, you will want to fix it so the maintainer can easily merge it.
GitHub will test this for you and let you know at the bottom of every Pull Request if the merge is trivial or not. If you see something like Pull Request does not merge cleanly, you’ll want to fix your branch so that it turns green and the maintainer doesn’t have to do extra work. You have two main options in order to do this.
You can either rebase your branch on top of whatever the target branch is (normally the master branch of the repository you forked), or you can merge the target branch into your branch. Most developers on GitHub will choose to do the latter, for the same reasons we just went over in the previous section.
What matters is the history and the final merge, so rebasing isn’t getting you much other than a slightly cleaner history and in return is far more difficult and error prone. If you want to merge in the target branch to make your Pull Request mergeable, you would add the original repository as a new remote, fetch from it, merge the main branch of that repository into your topic branch, fix any issues and finally push it back up to the same branch you opened the Pull Request on. For example, let’s say that in the “tonychacon” example we were using before, the original author made a change that would create a conflict in the Pull Request.
Let’s go through those steps. $ git remote add upstream https://github.com/schacon/blink (1)

$ git fetch upstream (2)
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -> upstream/master

$ git merge upstream/master (3)
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and then commit the result.

$ vim blink.ino (4)
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
    into slower-blink

$ git push origin slow-blink (5)
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -> slow-blink Add the original repository as a remote named upstream. Fetch the newest work from that remote. Merge the main branch of that repository into your topic branch. Fix the conflict that occurred. Push back up to the same topic branch. Once you do that, the Pull Request will be automatically updated and re-checked to see if it merges cleanly. One of the great things about Git is that you can do that continuously.
If you have a very long-running project, you can easily merge from the target branch over and over again and only have to deal with conflicts that have arisen since the last time that you merged, making the process very manageable. If you absolutely wish to rebase the branch to clean it up, you can certainly do so, but it is highly encouraged to not force push over the branch that the Pull Request is already opened on.
If other people have pulled it down and done more work on it, you run into all of the issues outlined in The Perils of Rebasing.
Instead, push the rebased branch to a new branch on GitHub and open a brand new Pull Request referencing the old one, then close the original. Your next question may be “How do I reference the old Pull Request?”.
It turns out there are many, many ways to reference other things almost anywhere you can write in GitHub. Let’s start with how to cross-reference another Pull Request or an Issue.
All Pull Requests and Issues are assigned numbers and they are unique within the project.
For example, you can’t have Pull Request #3 and Issue #3.
If you want to reference any Pull Request or Issue from any other one, you can simply put #<num> in any comment or description.
You can also be more specific if the Issue or Pull request lives somewhere else; write username#<num> if you’re referring to an Issue or Pull Request in a fork of the repository you’re in, or username/repo#<num> to reference something in another repository. Let’s look at an example.
Say we rebased the branch in the previous example, created a new pull request for it, and now we want to reference the old pull request from the new one.
We also want to reference an issue in the fork of the repository and an issue in a completely different project.
We can fill out the description just like Cross references in a Pull Request. When we submit this pull request, we’ll see all of that rendered like Cross references rendered in a Pull Request. Notice that the full GitHub URL we put in there was shortened to just the information needed. Now if Tony goes back and closes out the original Pull Request, we can see that by mentioning it in the new one, GitHub has automatically created a trackback event in the Pull Request timeline.
This means that anyone who visits this Pull Request and sees that it is closed can easily link back to the one that superseded it.
The link will look something like Link back to the new Pull Request in the closed Pull Request timeline. In addition to issue numbers, you can also reference a specific commit by SHA-1.
You have to specify a full 40 character SHA-1, but if GitHub sees that in a comment, it will link directly to the commit.
Again, you can reference commits in forks or other repositories in the same way you did with issues."
1.Getting Started,GitHub Flavored Markdown,"Linking to other Issues is just the beginning of interesting things you can do with almost any text box on GitHub.
In Issue and Pull Request descriptions, comments, code comments and more, you can use what is called “GitHub Flavored Markdown”.
Markdown is like writing in plain text but which is rendered richly. See An example of GitHub Flavored Markdown as written and as rendered for an example of how comments or text can be written and then rendered using Markdown. The GitHub flavor of Markdown adds more things you can do beyond the basic Markdown syntax.
These can all be really useful when creating useful Pull Request or Issue comments or descriptions. The first really useful GitHub specific Markdown feature, especially for use in Pull Requests, is the Task List.
A task list is a list of checkboxes of things you want to get done.
Putting them into an Issue or Pull Request normally indicates things that you want to get done before you consider the item complete. You can create a task list like this: - [X] Write the code
- [ ] Write all the tests
- [ ] Document the code If we include this in the description of our Pull Request or Issue, we’ll see it rendered like Task lists rendered in a Markdown comment. This is often used in Pull Requests to indicate what all you would like to get done on the branch before the Pull Request will be ready to merge.
The really cool part is that you can simply click the checkboxes to update the comment — you don’t have to edit the Markdown directly to check tasks off. What’s more, GitHub will look for task lists in your Issues and Pull Requests and show them as metadata on the pages that list them out.
For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you can see how far done it is.
This helps people break down Pull Requests into subtasks and helps other people track the progress of the branch.
You can see an example of this in Task list summary in the Pull Request list. These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature. You can also add code snippets to comments.
This is especially useful if you want to present something that you could try to do before actually implementing it as a commit on your branch.
This is also often used to add example code of what is not working or what this Pull Request could implement. To add a snippet of code you have to “fence” it in backticks. ```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println(""i is : "" + i);
}
``` If you add a language name like we did there with 'java', GitHub will also try to syntax highlight the snippet.
In the case of the above example, it would end up rendering like Rendered fenced code example. If you’re responding to a small part of a long comment, you can selectively quote out of the other comment by preceding the lines with the > character.
In fact, this is so common and so useful that there is a keyboard shortcut for it.
If you highlight text in a comment that you want to directly reply to and hit the r key, it will quote that text in the comment box for you. The quotes look something like this: > Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows? Once rendered, the comment will look like Rendered quoting example. Finally, you can also use emoji in your comments.
This is actually used quite extensively in comments you see on many GitHub Issues and Pull Requests.
There is even an emoji helper in GitHub.
If you are typing a comment and you start with a : character, an autocompleter will help you find what you’re looking for. Emojis take the form of :<name>: anywhere in the comment.
For instance, you could write something like this: I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face: When rendered, it would look something like Heavy emoji commenting. Not that this is incredibly useful, but it does add an element of fun and emotion to a medium that is otherwise hard to convey emotion in. There are actually quite a number of web services that make use of emoji characters these days.
A great cheat sheet to reference to find emoji that expresses what you want to say can be found at: https://www.webfx.com/tools/emoji-cheat-sheet/ This isn’t technically GitHub Flavored Markdown, but it is incredibly useful.
In addition to adding Markdown image links to comments, which can be difficult to find and embed URLs for, GitHub allows you to drag and drop images into text areas to embed them. If you look at Drag and drop images to upload them and auto-embed them, you can see a small “Parsed as Markdown” hint above the text area.
Clicking on that will give you a full cheat sheet of everything you can do with Markdown on GitHub."
1.Getting Started,1.Getting Started,"Now that we’re comfortable contributing to a project, let’s look at the other side: creating, maintaining and administering your own project."
1.Getting Started,Creating a New Repository,"Let’s create a new repository to share our project code with.
Start by clicking the “New repository” button on the right-hand side of the dashboard, or from the + button in the top toolbar next to your username as seen in The “New repository” dropdown. This takes you to the “new repository” form: All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the “Create Repository” button, and boom — you have a new repository on GitHub, named <user>/<project_name>. Since you have no code there yet, GitHub will show you instructions for how to create a brand-new Git repository, or connect an existing Git project.
We won’t belabor this here; if you need a refresher, check out Git Basics. Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTPS as https://github.com/<user>/<project_name>, and over SSH as git@github.com:<user>/<project_name>.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them. It is often preferable to share the HTTPS based URL for a public project, since the user does not have to have a GitHub account to access it for cloning.
Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL.
The HTTPS one is also exactly the same URL they would paste into a browser to view the project there."
1.Getting Started,Adding Collaborators,"If you’re working with other people who you want to give commit access to, you need to add them as “collaborators”.
If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project.
Doing so will give them “push” access, which means they have both read and write access to the project and Git repository. Click the “Settings” link at the bottom of the right-hand sidebar. Then select “Collaborators” from the menu on the left-hand side.
Then, just type a username into the box, and click “Add collaborator.”
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the “X” on the right-hand side of their row."
1.Getting Started,Managing Pull Requests,"Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let’s go over what to do when you get a Pull Request yourself. Pull Requests can either come from a branch in a fork of your repository or they can come from another branch in the same repository.
The only difference is that the ones in a fork are often from people where you can’t push to their branch and they can’t push to yours, whereas with internal Pull Requests generally both parties can access the branch. For these examples, let’s assume you are “tonychacon” and you’ve created a new Arduino code project named “fade”. Someone comes along and makes a change to your code and sends you a Pull Request.
You should get an email notifying you about the new Pull Request and it should look something like Email notification of a new Pull Request. There are a few things to notice about this email.
It will give you a small diffstat — a list of files that have changed in the Pull Request and by how much.
It gives you a link to the Pull Request on GitHub.
It also gives you a few URLs that you can use from the command line. If you notice the line that says git pull <url> patch-1, this is a simple way to merge in a remote branch without having to add a remote.
We went over this quickly in Checking Out Remote Branches.
If you wish, you can create and switch to a topic branch and then run this command to merge in the Pull Request changes. The other interesting URLs are the .diff and .patch URLs, which as you may guess, provide unified diff and patch versions of the Pull Request.
You could technically merge in the Pull Request work with something like this: $ curl https://github.com/tonychacon/fade/pull/1.patch | git am As we covered in The GitHub Flow, you can now have a conversation with the person who opened the Pull Request.
You can comment on specific lines of code, comment on whole commits or comment on the entire Pull Request itself, using GitHub Flavored Markdown everywhere. Every time someone else comments on the Pull Request you will continue to get email notifications so you know there is activity happening.
They will each have a link to the Pull Request where the activity is happening and you can also directly respond to the email to comment on the Pull Request thread. Once the code is in a place you like and want to merge it in, you can either pull the code down and merge it locally, either with the git pull <url> <branch> syntax we saw earlier, or by adding the fork as a remote and fetching and merging. If the merge is trivial, you can also just hit the “Merge” button on the GitHub site.
This will do a “non-fast-forward” merge, creating a merge commit even if a fast-forward merge was possible.
This means that no matter what, every time you hit the merge button, a merge commit is created.
As you can see in Merge button and instructions for merging a Pull Request manually, GitHub gives you all of this information if you click the hint link. If you decide you don’t want to merge it, you can also just close the Pull Request and the person who opened it will be notified. If you’re dealing with a lot of Pull Requests and don’t want to add a bunch of remotes or do one time pulls every time, there is a neat trick that GitHub allows you to do.
This is a bit of an advanced trick and we’ll go over the details of this a bit more in The Refspec, but it can be pretty useful. GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches on the server.
By default you don’t get them when you clone, but they are there in an obscured way and you can access them pretty easily. To demonstrate this, we’re going to use a low-level command (often referred to as a “plumbing” command, which we’ll read about more in Plumbing and Porcelain) called ls-remote.
This command is generally not used in day-to-day Git operations but it’s useful to show us what references are present on the server. If we run this command against the “blink” repository we were using earlier, we will get a list of all the branches and tags and other references in the repository. $ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge Of course, if you’re in your repository and you run git ls-remote origin or whatever remote you want to check, it will show you something similar to this. If the repository is on GitHub and you have any Pull Requests that have been opened, you’ll get these references that are prefixed with refs/pull/.
These are basically branches, but since they’re not under refs/heads/ you don’t get them normally when you clone or fetch from the server — the process of fetching ignores them normally. There are two references per Pull Request - the one that ends in /head points to exactly the same commit as the last commit in the Pull Request branch.
So if someone opens a Pull Request in our repository and their branch is named bug-fix and it points to commit a5a775, then in our repository we will not have a bug-fix branch (since that’s in their fork), but we will have pull/<pr#>/head that points to a5a775.
This means that we can pretty easily pull down every Pull Request branch in one go without having to add a bunch of remotes. Now, you could do something like fetching the reference directly. $ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD This tells Git, “Connect to the origin remote, and download the ref named refs/pull/958/head.”
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under .git/FETCH_HEAD.
You can follow that up with git merge FETCH_HEAD into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you’re reviewing a lot of pull requests, this gets tedious. There’s also a way to fetch all of the pull requests, and keep them up to date whenever you connect to the remote.
Open up .git/config in your favorite editor, and look for the origin remote.
It should look a bit like this: [remote ""origin""]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/* That line that begins with fetch = is a “refspec.”
It’s a way of mapping names on the remote with names in your local .git directory.
This particular one tells Git, ""the things on the remote that are under refs/heads should go in my local repository under refs/remotes/origin.""
You can modify this section to add another refspec: [remote ""origin""]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/* That last line tells Git, “All the refs that look like refs/pull/123/head should be stored locally like refs/remotes/origin/pr/123.”
Now, if you save that file, and do a git fetch: $ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# … Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they’re read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally: $ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2' The eagle-eyed among you would note the head on the end of the remote portion of the refspec.
There’s also a refs/pull/#/merge ref on the GitHub side, which represents the commit that would result if you push the “merge” button on the site.
This can allow you to test the merge before even hitting the button. Not only can you open Pull Requests that target the main or master branch, you can actually open a Pull Request targeting any branch in the network.
In fact, you can even target another Pull Request. If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you’re not sure is a good idea, or you just don’t have push access to the target branch, you can open a Pull Request directly to it. When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you’re requesting to pull to and which you’re requesting to pull from.
If you hit the “Edit” button at the right of that box you can change not only the branches but also which fork. Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project."
1.Getting Started,Mentions and Notifications,"GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams. In any comment you can start typing a @ character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project. You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster. Once you post a comment with a user mention, that user will be notified.
This means that this can be a really effective way of pulling people into conversations rather than making them poll.
Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request. If someone gets mentioned on a Pull Request or Issue, they will be “subscribed” to it and will continue getting notifications any time some activity occurs on it.
You will also be subscribed to something if you opened it, if you’re watching the repository or if you comment on something.
If you no longer wish to receive notifications, there is an “Unsubscribe” button on the page you can click to stop receiving updates on it. When we mention “notifications” here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the “Notification center” tab from the settings page, you can see some of the options you have. The two choices are to get notifications over “Email” and over “Web” and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching. Web notifications only exist on GitHub and you can only check them on GitHub.
If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in Notification center. If you click on that, you will see a list of all the items you have been notified about, grouped by project.
You can filter to the notifications of a specific project by clicking on its name in the left hand sidebar.
You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge all of the notifications in a project by clicking the checkmark at the top of the group.
There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item. All of these tools are very useful for handling large numbers of notifications.
Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen. Email notifications are the other way you can handle notifications through GitHub.
If you have this turned on you will get emails for each notification.
We saw examples of this in Comments sent as email notifications and Email notification of a new Pull Request.
The emails will also be threaded properly, which is nice if you’re using a threading email client. There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules. For instance, if we look at the actual email headers sent to Tony in the email shown in Email notification of a new Pull Request, we will see the following among the information sent: To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com There are a couple of interesting things here.
If you want to highlight or re-route emails to this particular project or even Pull Request, the information in Message-ID gives you all the data in <user>/<project>/<type>/<id> format.
If this was an issue, for example, the <type> field would have been “issues” rather than “pull”. The List-Post and List-Unsubscribe fields mean that if you have a mail client that understands those, you can easily post to the list or “Unsubscribe” from the thread.
That would be essentially the same as clicking the “mute” button on the web version of the notification or “Unsubscribe” on the Issue or Pull Request page itself. It’s also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client."
1.Getting Started,Special Files,There are a couple of special files that GitHub will notice if they are present in your repository.
1.Getting Started,README,"The first is the README file, which can be of nearly any format that GitHub recognizes as prose.
For example, it could be README, README.md, README.asciidoc, etc.
If GitHub sees a README file in your source, it will render it on the landing page of the project. Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project.
This generally includes things like: What the project is for How to configure and install it An example of how to use it or get it running The license that the project is offered under How to contribute to it Since GitHub will render this file, you can embed images or links in it for added ease of understanding."
1.Getting Started,CONTRIBUTING,"The other special file that GitHub recognizes is the CONTRIBUTING file.
If you have a file named CONTRIBUTING with any file extension, GitHub will show Opening a Pull Request when a CONTRIBUTING file exists when anyone starts opening a Pull Request. The idea here is that you can specify specific things you want or don’t want in a Pull Request sent to your project.
This way people may actually read the guidelines before opening the Pull Request."
1.Getting Started,1.Getting Started,"In addition to single-user accounts, GitHub has what are called Organizations.
Like personal accounts, Organizational accounts have a namespace where all their projects exist, but many other things are different.
These accounts represent a group of people with shared ownership of projects, and there are many tools to manage subgroups of those people.
Normally these accounts are used for Open Source groups (such as “perl” or “rails”) or companies (such as “google” or “twitter”)."
1.Getting Started,Organization Basics,"An organization is pretty easy to create; just click on the “+” icon at the top-right of any GitHub page, and select “New organization” from the menu. First you’ll need to name your organization and provide an email address for a main point of contact for the group.
Then you can invite other users to be co-owners of the account if you want to. Follow these steps and you’ll soon be the owner of a brand-new organization.
Like personal accounts, organizations are free if everything you plan to store there will be open source. As an owner in an organization, when you fork a repository, you’ll have the choice of forking it to your organization’s namespace.
When you create new repositories you can create them either under your personal account or under any of the organizations that you are an owner in.
You also automatically “watch” any new repository created under these organizations. Just like in Your Avatar, you can upload an avatar for your organization to personalize it a bit.
Also just like personal accounts, you have a landing page for the organization that lists all of your repositories and can be viewed by other people. Now let’s cover some of the things that are a bit different with an organizational account."
1.Getting Started,Teams,"Organizations are associated with individual people by way of teams, which are simply a grouping of individual user accounts and repositories within the organization and what kind of access those people have in those repositories. For example, say your company has three repositories: frontend, backend, and deployscripts.
You’d want your HTML/CSS/JavaScript developers to have access to frontend and maybe backend, and your Operations people to have access to backend and deployscripts.
Teams make this easy, without having to manage the collaborators for every individual repository. The Organization page shows you a simple dashboard of all the repositories, users and teams that are under this organization. To manage your Teams, you can click on the Teams sidebar on the right hand side of the page in The Organization page.
This will bring you to a page you can use to add members to the team, add repositories to the team or manage the settings and access control levels for the team.
Each team can have read only, read/write or administrative access to the repositories.
You can change that level by clicking the “Settings” button in The Team page. When you invite someone to a team, they will get an email letting them know they’ve been invited. Additionally, team @mentions (such as @acmecorp/frontend) work much the same as they do with individual users, except that all members of the team are then subscribed to the thread.
This is useful if you want the attention from someone on a team, but you don’t know exactly who to ask. A user can belong to any number of teams, so don’t limit yourself to only access-control teams.
Special-interest teams like ux, css, or refactoring are useful for certain kinds of questions, and others like legal and colorblind for an entirely different kind."
1.Getting Started,1.Getting Started,"So now we’ve covered all of the major features and workflows of GitHub, but any large group or project will have customizations they may want to make or external services they may want to integrate. Luckily for us, GitHub is really quite hackable in many ways.
In this section we’ll cover how to use the GitHub hooks system and its API to make GitHub work how we want it to."
1.Getting Started,Services and Hooks,"The Hooks and Services section of GitHub repository administration is the easiest way to have GitHub interact with external systems. First we’ll take a look at Services.
Both the Hooks and Services integrations can be found in the Settings section of your repository, where we previously looked at adding Collaborators and changing the default branch of your project.
Under the “Webhooks and Services” tab you will see something like Services and Hooks configuration section. There are dozens of services you can choose from, most of them integrations into other commercial and open source systems.
Most of them are for Continuous Integration services, bug and issue trackers, chat room systems and documentation systems.
We’ll walk through setting up a very simple one, the Email hook.
If you choose “email” from the “Add Service” dropdown, you’ll get a configuration screen like Email service configuration. In this case, if we hit the “Add service” button, the email address we specified will get an email every time someone pushes to the repository.
Services can listen for lots of different types of events, but most only listen for push events and then do something with that data. If there is a system you are using that you would like to integrate with GitHub, you should check here to see if there is an existing service integration available.
For example, if you’re using Jenkins to run tests on your codebase, you can enable the Jenkins builtin service integration to kick off a test run every time someone pushes to your repository. If you need something more specific or you want to integrate with a service or site that is not included in this list, you can instead use the more generic hooks system.
GitHub repository hooks are pretty simple.
You specify a URL and GitHub will post an HTTP payload to that URL on any event you want. Generally the way this works is you can setup a small web service to listen for a GitHub hook payload and then do something with the data when it is received. To enable a hook, you click the “Add webhook” button in Services and Hooks configuration section.
This will bring you to a page that looks like Web hook configuration. The configuration for a web hook is pretty simple.
In most cases you simply enter a URL and a secret key and hit “Add webhook”.
There are a few options for which events you want GitHub to send you a payload for — the default is to only get a payload for the push event, when someone pushes new code to any branch of your repository. Let’s see a small example of a web service you may set up to handle a web hook.
We’ll use the Ruby web framework Sinatra since it’s fairly concise and you should be able to easily see what we’re doing. Let’s say we want to get an email if a specific person pushes to a specific branch of our project modifying a specific file.
We could fairly easily do that with code like this: require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON

  # gather the data we're looking for
  pusher = push[""pusher""][""name""]
  branch = push[""ref""]

  # get a list of all the files touched
  files = push[""commits""].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # check for our criteria
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     ""ALARM""
    end
  end
end Here we’re taking the JSON payload that GitHub delivers us and looking up who pushed it, what branch they pushed to and what files were touched in all the commits that were pushed.
Then we check that against our criteria and send an email if it matches. In order to develop and test something like this, you have a nice developer console in the same screen where you set the hook up.
You can see the last few deliveries that GitHub has tried to make for that webhook.
For each hook you can dig down into when it was delivered, if it was successful and the body and headers for both the request and the response.
This makes it incredibly easy to test and debug your hooks. The other great feature of this is that you can redeliver any of the payloads to test your service easily. For more information on how to write webhooks and all the different event types you can listen for, go to the GitHub Developer documentation at https://docs.github.com/en/webhooks-and-events/webhooks/about-webhooks."
1.Getting Started,The GitHub API,"Services and hooks give you a way to receive push notifications about events that happen on your repositories, but what if you need more information about these events?
What if you need to automate something like adding collaborators or labeling issues? This is where the GitHub API comes in handy.
GitHub has tons of API endpoints for doing nearly anything you can do on the website in an automated fashion.
In this section we’ll learn how to authenticate and connect to the API, how to comment on an issue and how to change the status of a Pull Request through the API."
1.Getting Started,Basic Usage,"The most basic thing you can do is a simple GET request on an endpoint that doesn’t require authentication.
This could be a user or read-only information on an open source project.
For example, if we want to know more about a user named “schacon”, we can run something like this: $ curl https://api.github.com/users/schacon
{
  ""login"": ""schacon"",
  ""id"": 70,
  ""avatar_url"": ""https://avatars.githubusercontent.com/u/70"",
# …
  ""name"": ""Scott Chacon"",
  ""company"": ""GitHub"",
  ""following"": 19,
  ""created_at"": ""2008-01-27T17:19:28Z"",
  ""updated_at"": ""2014-06-10T02:37:23Z""
} There are tons of endpoints like this to get information about organizations, projects, issues, commits — just about anything you can publicly see on GitHub.
You can even use the API to render arbitrary Markdown or find a .gitignore template. $ curl https://api.github.com/gitignore/templates/Java
{
  ""name"": ""Java"",
  ""source"": ""*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see https://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
""
}"
1.Getting Started,Commenting on an Issue,"However, if you want to do an action on the website such as comment on an Issue or Pull Request or if you want to view or interact with private content, you’ll need to authenticate. There are several ways to authenticate.
You can use basic authentication with just your username and password, but generally it’s a better idea to use a personal access token.
You can generate this from the “Applications” tab of your settings page. It will ask you which scopes you want for this token and a description.
Make sure to use a good description so you feel comfortable removing the token when your script or application is no longer used. GitHub will only show you the token once, so be sure to copy it.
You can now use this to authenticate in your script instead of using a username and password.
This is nice because you can limit the scope of what you want to do and the token is revocable. This also has the added advantage of increasing your rate limit.
Without authenticating, you will be limited to 60 requests per hour.
If you authenticate you can make up to 5,000 requests per hour. So let’s use it to make a comment on one of our issues.
Let’s say we want to leave a comment on a specific issue, Issue #6.
To do so we have to do an HTTP POST request to repos/<user>/<repo>/issues/<num>/comments with the token we just generated as an Authorization header. $ curl -H ""Content-Type: application/json"" \
       -H ""Authorization: token TOKEN"" \
       --data '{""body"":""A new comment, :+1:""}' \
       https://api.github.com/repos/schacon/blink/issues/6/comments
{
  ""id"": 58322100,
  ""html_url"": ""https://github.com/schacon/blink/issues/6#issuecomment-58322100"",
  ...
  ""user"": {
    ""login"": ""tonychacon"",
    ""id"": 7874698,
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/7874698?v=2"",
    ""type"": ""User"",
  },
  ""created_at"": ""2014-10-08T07:48:19Z"",
  ""updated_at"": ""2014-10-08T07:48:19Z"",
  ""body"": ""A new comment, :+1:""
} Now if you go to that issue, you can see the comment that we just successfully posted as in A comment posted from the GitHub API. You can use the API to do just about anything you can do on the website — creating and setting milestones, assigning people to Issues and Pull Requests, creating and changing labels, accessing commit data, creating new commits and branches, opening, closing or merging Pull Requests, creating and editing teams, commenting on lines of code in a Pull Request, searching the site and on and on."
1.Getting Started,Changing the Status of a Pull Request,"There is one final example we’ll look at since it’s really useful if you’re working with Pull Requests.
Each commit can have one or more statuses associated with it and there is an API to add and query that status. Most of the Continuous Integration and testing services make use of this API to react to pushes by testing the code that was pushed, and then report back if that commit has passed all the tests.
You could also use this to check if the commit message is properly formatted, if the submitter followed all your contribution guidelines, if the commit was validly signed — any number of things. Let’s say you set up a webhook on your repository that hits a small web service that checks for a Signed-off-by string in the commit message. require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON
  repo_name = push['repository']['full_name']

  # look through each commit message
  push[""commits""].each do |commit|

    # look for a Signed-off-by string
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # post status to GitHub
    sha = commit[""id""]
    status_url = ""https://api.github.com/repos/#{repo_name}/statuses/#{sha}""

    status = {
      ""state""       => state,
      ""description"" => description,
      ""target_url""  => ""http://example.com/how-to-signoff"",
      ""context""     => ""validate/signoff""
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => ""token #{ENV['TOKEN']}"" }
    )
  end
end Hopefully this is fairly simple to follow.
In this web hook handler we look through each commit that was just pushed, we look for the string 'Signed-off-by' in the commit message and finally we POST via HTTP to the /repos/<user>/<repo>/statuses/<commit_sha> API endpoint with the status. In this case you can send a state ('success', 'failure', 'error'), a description of what happened, a target URL the user can go to for more information and a “context” in case there are multiple statuses for a single commit.
For example, a testing service may provide a status and a validation service like this may also provide a status — the “context” field is how they’re differentiated. If someone opens a new Pull Request on GitHub and this hook is set up, you may see something like Commit status via the API. You can now see a little green check mark next to the commit that has a “Signed-off-by” string in the message and a red cross through the one where the author forgot to sign off.
You can also see that the Pull Request takes the status of the last commit on the branch and warns you if it is a failure.
This is really useful if you’re using this API for test results so you don’t accidentally merge something where the last commit is failing tests."
1.Getting Started,1.Getting Started,"By now, you’ve learned most of the day-to-day commands and workflows that you need to manage or maintain a Git repository for your source code control.
You’ve accomplished the basic tasks of tracking and committing files, and you’ve harnessed the power of the staging area and lightweight topic branching and merging. Now you’ll explore a number of very powerful things that Git can do that you may not necessarily use on a day-to-day basis but that you may need at some point. Git allows you to refer to a single commit, set of commits, or range of commits in a number of ways.
They aren’t necessarily obvious but are helpful to know."
1.Getting Started,Single Revisions,"You can obviously refer to any single commit by its full, 40-character SHA-1 hash, but there are more human-friendly ways to refer to commits as well.
This section outlines the various ways you can refer to any commit."
1.Getting Started,Short SHA-1,"Git is smart enough to figure out what commit you’re referring to if you provide the first few characters of the SHA-1 hash, as long as that partial hash is at least four characters long and unambiguous; that is, no other object in the object database can have a hash that begins with the same prefix. For example, to examine a specific commit where you know you added certain functionality, you might first run the git log command to locate the commit: $ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff In this case, say you’re interested in the commit whose hash begins with 1c002dd…​.
You can inspect that commit with any of the following variations of git show (assuming the shorter versions are unambiguous): $ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d Git can figure out a short, unique abbreviation for your SHA-1 values.
If you pass --abbrev-commit to the git log command, the output will use shorter values but keep them unique; it defaults to using seven characters but makes them longer if necessary to keep the SHA-1 unambiguous: $ git log --abbrev-commit --pretty=oneline
ca82a6d Change the version number
085bb3b Remove unnecessary test code
a11bef0 Initial commit Generally, eight to ten characters are more than enough to be unique within a project.
For example, as of February 2019, the Linux kernel (which is a fairly sizable project) has over 875,000 commits and almost seven million objects in its object database, with no two objects whose SHA-1s are identical in the first 12 characters. A lot of people become concerned at some point that they will, by random happenstance, have two distinct objects in their repository that hash to the same SHA-1 value.
What then? If you do happen to commit an object that hashes to the same SHA-1 value as a previous different object in your repository, Git will see the previous object already in your Git database, assume it was already written and simply reuse it.
If you try to check out that object again at some point, you’ll always get the data of the first object. However, you should be aware of how ridiculously unlikely this scenario is.
The SHA-1 digest is 20 bytes or 160 bits.
The number of randomly hashed objects needed to ensure a 50% probability of a single collision is about 280 (the formula for determining collision probability is p = (n(n-1)/2) * (1/2^160)).
280 is 1.2 x 1024 or 1 million billion billion.
That’s 1,200 times the number of grains of sand on the earth. Here’s an example to give you an idea of what it would take to get a SHA-1 collision.
If all 6.5 billion humans on Earth were programming, and every second, each one was producing code that was the equivalent of the entire Linux kernel history (6.5 million Git objects) and pushing it into one enormous Git repository, it would take roughly 2 years until that repository contained enough objects to have a 50% probability of a single SHA-1 object collision.
Thus, an organic SHA-1 collision is less likely than every member of your programming team being attacked and killed by wolves in unrelated incidents on the same night. If you dedicate several thousands of dollars' worth of computing power to it, it is possible to synthesize two files with the same hash, as proven on https://shattered.io/ in February 2017.
Git is moving towards using SHA256 as the default hashing algorithm, which is much more resilient to collision attacks, and has code in place to help mitigate this attack (although it cannot completely eliminate it)."
1.Getting Started,Branch References,"One straightforward way to refer to a particular commit is if it’s the commit at the tip of a branch; in that case, you can simply use the branch name in any Git command that expects a reference to a commit.
For instance, if you want to examine the last commit object on a branch, the following commands are equivalent, assuming that the topic1 branch points to commit ca82a6d…​: $ git show ca82a6dff817ec66f44342007202690a93763949
$ git show topic1 If you want to see which specific SHA-1 a branch points to, or if you want to see what any of these examples boils down to in terms of SHA-1s, you can use a Git plumbing tool called rev-parse.
You can see Git Internals for more information about plumbing tools; basically, rev-parse exists for lower-level operations and isn’t designed to be used in day-to-day operations.
However, it can be helpful sometimes when you need to see what’s really going on.
Here you can run rev-parse on your branch. $ git rev-parse topic1
ca82a6dff817ec66f44342007202690a93763949"
1.Getting Started,RefLog Shortnames,"One of the things Git does in the background while you’re working away is keep a “reflog” — a log of where your HEAD and branch references have been for the last few months. You can see your reflog by using git reflog: $ git reflog
734713b HEAD@{0}: commit: Fix refs handling, add gc auto, update tests
d921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.
1c002dd HEAD@{2}: commit: Add some blame and merge stuff
1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
95df984 HEAD@{4}: commit: # This is a combination of two commits.
1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD Every time your branch tip is updated for any reason, Git stores that information for you in this temporary history.
You can use your reflog data to refer to older commits as well.
For example, if you want to see the fifth prior value of the HEAD of your repository, you can use the @{5} reference that you see in the reflog output: $ git show HEAD@{5} You can also use this syntax to see where a branch was some specific amount of time ago.
For instance, to see where your master branch was yesterday, you can type: $ git show master@{yesterday} That would show you where the tip of your master branch was yesterday.
This technique only works for data that’s still in your reflog, so you can’t use it to look for commits older than a few months. To see reflog information formatted like the git log output, you can run git log -g: $ git log -g master
commit 734713bc047d87bf7eac9674765ae793478c50d3
Reflog: master@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: commit: Fix refs handling, add gc auto, update tests
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Reflog: master@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: merge phedders/rdocs: Merge made by recursive.
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs' It’s important to note that reflog information is strictly local — it’s a log only of what you’ve done in your repository.
The references won’t be the same on someone else’s copy of the repository; also, right after you initially clone a repository, you’ll have an empty reflog, as no activity has occurred yet in your repository.
Running git show HEAD@{2.months.ago} will show you the matching commit only if you cloned the project at least two months ago — if you cloned it any more recently than that, you’ll see only your first local commit. If you have a UNIX or Linux background, you can think of the reflog as Git’s version of shell history, which emphasizes that what’s there is clearly relevant only for you and your “session”, and has nothing to do with anyone else who might be working on the same machine. When using PowerShell, braces like { and } are special characters and must be escaped.
You can escape them with a backtick ` or put the commit reference in quotes: $ git show HEAD@{0}     # will NOT work
$ git show HEAD@`{0`}   # OK
$ git show ""HEAD@{0}""   # OK"
1.Getting Started,Ancestry References,"The other main way to specify a commit is via its ancestry.
If you place a ^ (caret) at the end of a reference, Git resolves it to mean the parent of that commit.
Suppose you look at the history of your project: $ git log --pretty=format:'%h %s' --graph
* 734713b Fix refs handling, add gc auto, update tests
*   d921970 Merge commit 'phedders/rdocs'
|\
| * 35cfb2b Some rdoc changes
* | 1c002dd Add some blame and merge stuff
|/
* 1c36188 Ignore *.gem
* 9b29157 Add open3_detach to gemspec file list Then, you can see the previous commit by specifying HEAD^, which means “the parent of HEAD”: $ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs' On Windows in cmd.exe, ^ is a special character and needs to be treated differently.
You can either double it or put the commit reference in quotes: $ git show HEAD^     # will NOT work on Windows
$ git show HEAD^^    # OK
$ git show ""HEAD^""   # OK You can also specify a number after the ^ to identify which parent you want; for example, d921970^2 means “the second parent of d921970.”
This syntax is useful only for merge commits, which have more than one parent — the first parent of a merge commit is from the branch you were on when you merged (frequently master), while the second parent of a merge commit is from the branch that was merged (say, topic): $ git show d921970^
commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff

$ git show d921970^2
commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
Author: Paul Hedderly <paul+git@mjr.org>
Date:   Wed Dec 10 22:22:03 2008 +0000

    Some rdoc changes The other main ancestry specification is the ~ (tilde).
This also refers to the first parent, so HEAD~ and HEAD^ are equivalent.
The difference becomes apparent when you specify a number.
HEAD~2 means “the first parent of the first parent,” or “the grandparent” — it traverses the first parents the number of times you specify.
For example, in the history listed earlier, HEAD~3 would be: $ git show HEAD~3
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem This can also be written HEAD~~~, which again is the first parent of the first parent of the first parent: $ git show HEAD~~~
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem You can also combine these syntaxes — you can get the second parent of the previous reference (assuming it was a merge commit) by using HEAD~3^2, and so on."
1.Getting Started,1.Getting Started,"By now, you’ve learned most of the day-to-day commands and workflows that you need to manage or maintain a Git repository for your source code control.
You’ve accomplished the basic tasks of tracking and committing files, and you’ve harnessed the power of the staging area and lightweight topic branching and merging. Now you’ll explore a number of very powerful things that Git can do that you may not necessarily use on a day-to-day basis but that you may need at some point. Git allows you to refer to a single commit, set of commits, or range of commits in a number of ways.
They aren’t necessarily obvious but are helpful to know."
1.Getting Started,Single Revisions,"You can obviously refer to any single commit by its full, 40-character SHA-1 hash, but there are more human-friendly ways to refer to commits as well.
This section outlines the various ways you can refer to any commit."
1.Getting Started,Short SHA-1,"Git is smart enough to figure out what commit you’re referring to if you provide the first few characters of the SHA-1 hash, as long as that partial hash is at least four characters long and unambiguous; that is, no other object in the object database can have a hash that begins with the same prefix. For example, to examine a specific commit where you know you added certain functionality, you might first run the git log command to locate the commit: $ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff In this case, say you’re interested in the commit whose hash begins with 1c002dd…​.
You can inspect that commit with any of the following variations of git show (assuming the shorter versions are unambiguous): $ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d Git can figure out a short, unique abbreviation for your SHA-1 values.
If you pass --abbrev-commit to the git log command, the output will use shorter values but keep them unique; it defaults to using seven characters but makes them longer if necessary to keep the SHA-1 unambiguous: $ git log --abbrev-commit --pretty=oneline
ca82a6d Change the version number
085bb3b Remove unnecessary test code
a11bef0 Initial commit Generally, eight to ten characters are more than enough to be unique within a project.
For example, as of February 2019, the Linux kernel (which is a fairly sizable project) has over 875,000 commits and almost seven million objects in its object database, with no two objects whose SHA-1s are identical in the first 12 characters. A lot of people become concerned at some point that they will, by random happenstance, have two distinct objects in their repository that hash to the same SHA-1 value.
What then? If you do happen to commit an object that hashes to the same SHA-1 value as a previous different object in your repository, Git will see the previous object already in your Git database, assume it was already written and simply reuse it.
If you try to check out that object again at some point, you’ll always get the data of the first object. However, you should be aware of how ridiculously unlikely this scenario is.
The SHA-1 digest is 20 bytes or 160 bits.
The number of randomly hashed objects needed to ensure a 50% probability of a single collision is about 280 (the formula for determining collision probability is p = (n(n-1)/2) * (1/2^160)).
280 is 1.2 x 1024 or 1 million billion billion.
That’s 1,200 times the number of grains of sand on the earth. Here’s an example to give you an idea of what it would take to get a SHA-1 collision.
If all 6.5 billion humans on Earth were programming, and every second, each one was producing code that was the equivalent of the entire Linux kernel history (6.5 million Git objects) and pushing it into one enormous Git repository, it would take roughly 2 years until that repository contained enough objects to have a 50% probability of a single SHA-1 object collision.
Thus, an organic SHA-1 collision is less likely than every member of your programming team being attacked and killed by wolves in unrelated incidents on the same night. If you dedicate several thousands of dollars' worth of computing power to it, it is possible to synthesize two files with the same hash, as proven on https://shattered.io/ in February 2017.
Git is moving towards using SHA256 as the default hashing algorithm, which is much more resilient to collision attacks, and has code in place to help mitigate this attack (although it cannot completely eliminate it)."
1.Getting Started,Branch References,"One straightforward way to refer to a particular commit is if it’s the commit at the tip of a branch; in that case, you can simply use the branch name in any Git command that expects a reference to a commit.
For instance, if you want to examine the last commit object on a branch, the following commands are equivalent, assuming that the topic1 branch points to commit ca82a6d…​: $ git show ca82a6dff817ec66f44342007202690a93763949
$ git show topic1 If you want to see which specific SHA-1 a branch points to, or if you want to see what any of these examples boils down to in terms of SHA-1s, you can use a Git plumbing tool called rev-parse.
You can see Git Internals for more information about plumbing tools; basically, rev-parse exists for lower-level operations and isn’t designed to be used in day-to-day operations.
However, it can be helpful sometimes when you need to see what’s really going on.
Here you can run rev-parse on your branch. $ git rev-parse topic1
ca82a6dff817ec66f44342007202690a93763949"
1.Getting Started,RefLog Shortnames,"One of the things Git does in the background while you’re working away is keep a “reflog” — a log of where your HEAD and branch references have been for the last few months. You can see your reflog by using git reflog: $ git reflog
734713b HEAD@{0}: commit: Fix refs handling, add gc auto, update tests
d921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.
1c002dd HEAD@{2}: commit: Add some blame and merge stuff
1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
95df984 HEAD@{4}: commit: # This is a combination of two commits.
1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD Every time your branch tip is updated for any reason, Git stores that information for you in this temporary history.
You can use your reflog data to refer to older commits as well.
For example, if you want to see the fifth prior value of the HEAD of your repository, you can use the @{5} reference that you see in the reflog output: $ git show HEAD@{5} You can also use this syntax to see where a branch was some specific amount of time ago.
For instance, to see where your master branch was yesterday, you can type: $ git show master@{yesterday} That would show you where the tip of your master branch was yesterday.
This technique only works for data that’s still in your reflog, so you can’t use it to look for commits older than a few months. To see reflog information formatted like the git log output, you can run git log -g: $ git log -g master
commit 734713bc047d87bf7eac9674765ae793478c50d3
Reflog: master@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: commit: Fix refs handling, add gc auto, update tests
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    Fix refs handling, add gc auto, update tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Reflog: master@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: merge phedders/rdocs: Merge made by recursive.
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs' It’s important to note that reflog information is strictly local — it’s a log only of what you’ve done in your repository.
The references won’t be the same on someone else’s copy of the repository; also, right after you initially clone a repository, you’ll have an empty reflog, as no activity has occurred yet in your repository.
Running git show HEAD@{2.months.ago} will show you the matching commit only if you cloned the project at least two months ago — if you cloned it any more recently than that, you’ll see only your first local commit. If you have a UNIX or Linux background, you can think of the reflog as Git’s version of shell history, which emphasizes that what’s there is clearly relevant only for you and your “session”, and has nothing to do with anyone else who might be working on the same machine. When using PowerShell, braces like { and } are special characters and must be escaped.
You can escape them with a backtick ` or put the commit reference in quotes: $ git show HEAD@{0}     # will NOT work
$ git show HEAD@`{0`}   # OK
$ git show ""HEAD@{0}""   # OK"
1.Getting Started,Ancestry References,"The other main way to specify a commit is via its ancestry.
If you place a ^ (caret) at the end of a reference, Git resolves it to mean the parent of that commit.
Suppose you look at the history of your project: $ git log --pretty=format:'%h %s' --graph
* 734713b Fix refs handling, add gc auto, update tests
*   d921970 Merge commit 'phedders/rdocs'
|\
| * 35cfb2b Some rdoc changes
* | 1c002dd Add some blame and merge stuff
|/
* 1c36188 Ignore *.gem
* 9b29157 Add open3_detach to gemspec file list Then, you can see the previous commit by specifying HEAD^, which means “the parent of HEAD”: $ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs' On Windows in cmd.exe, ^ is a special character and needs to be treated differently.
You can either double it or put the commit reference in quotes: $ git show HEAD^     # will NOT work on Windows
$ git show HEAD^^    # OK
$ git show ""HEAD^""   # OK You can also specify a number after the ^ to identify which parent you want; for example, d921970^2 means “the second parent of d921970.”
This syntax is useful only for merge commits, which have more than one parent — the first parent of a merge commit is from the branch you were on when you merged (frequently master), while the second parent of a merge commit is from the branch that was merged (say, topic): $ git show d921970^
commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    Add some blame and merge stuff

$ git show d921970^2
commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
Author: Paul Hedderly <paul+git@mjr.org>
Date:   Wed Dec 10 22:22:03 2008 +0000

    Some rdoc changes The other main ancestry specification is the ~ (tilde).
This also refers to the first parent, so HEAD~ and HEAD^ are equivalent.
The difference becomes apparent when you specify a number.
HEAD~2 means “the first parent of the first parent,” or “the grandparent” — it traverses the first parents the number of times you specify.
For example, in the history listed earlier, HEAD~3 would be: $ git show HEAD~3
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem This can also be written HEAD~~~, which again is the first parent of the first parent of the first parent: $ git show HEAD~~~
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    Ignore *.gem You can also combine these syntaxes — you can get the second parent of the previous reference (assuming it was a merge commit) by using HEAD~3^2, and so on."
1.Getting Started,1.Getting Started,"In this section, you’ll look at a few interactive Git commands that can help you craft your commits to include only certain combinations and parts of files.
These tools are helpful if you modify a number of files extensively, then decide that you want those changes to be partitioned into several focused commits rather than one big messy commit.
This way, you can make sure your commits are logically separate changesets and can be reviewed easily by the developers working with you. If you run git add with the -i or --interactive option, Git enters an interactive shell mode, displaying something like this: $ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> You can see that this command shows you a much different view of your staging area than you’re probably used to — basically, the same information you get with git status but a bit more succinct and informative.
It lists the changes you’ve staged on the left and unstaged changes on the right. After this comes a “Commands” section, which allows you to do a number of things like staging and unstaging files, staging parts of files, adding untracked files, and displaying diffs of what has been staged."
1.Getting Started,Staging and Unstaging Files,"If you type u or 2 (for update) at the What now> prompt, you’re prompted for which files you want to stage: What now> u
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>> To stage the TODO and index.html files, you can type the numbers: Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>> The * next to each file means the file is selected to be staged.
If you press Enter after typing nothing at the Update>> prompt, Git takes anything selected and stages it for you: Update>>
updated 2 paths

*** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb Now you can see that the TODO and index.html files are staged and the simplegit.rb file is still unstaged.
If you want to unstage the TODO file at this point, you use the r or 3 (for revert) option: *** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> r
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path Looking at your Git status again, you can see that you’ve unstaged the TODO file: *** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> s
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb To see the diff of what you’ve staged, you can use the d or 6 (for diff) command.
It shows you a list of your staged files, and you can select the ones for which you would like to see the staged diff.
This is much like specifying git diff --cached on the command line: *** Commands ***
  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp
What now> d
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id=""out"">...</p>

-<div id=""footer"">contact : support@github.com</div>
+<div id=""footer"">contact : email.support@github.com</div>

 <script type=""text/javascript""> With these basic commands, you can use the interactive add mode to deal with your staging area a little more easily."
1.Getting Started,1.Getting Started,"Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else.
The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later.
The answer to this issue is the git stash command. Stashing takes the dirty state of your working directory — that is, your modified tracked files and staged changes — and saves it on a stack of unfinished changes that you can reapply at any time (even on a different branch). As of late October 2017, there has been extensive discussion on the Git mailing list, wherein the command git stash save is being deprecated in favour of the existing alternative git stash push.
The main reason for this is that git stash push introduces the option of stashing selected pathspecs, something git stash save does not support. git stash save is not going away any time soon, so don’t worry about it suddenly disappearing.
But you might want to start migrating over to the push alternative for the new functionality."
1.Getting Started,Stashing Your Work,"To demonstrate stashing, you’ll go into your project and start working on a couple of files and possibly stage one of the changes.
If you run git status, you can see your dirty state: $ git status
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

	modified:   index.html

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   lib/simplegit.rb Now you want to switch branches, but you don’t want to commit what you’ve been working on yet, so you’ll stash the changes.
To push a new stash onto your stack, run git stash or git stash push: $ git stash
Saved working directory and index state \
  ""WIP on master: 049d078 Create index file""
HEAD is now at 049d078 Create index file
(To restore them type ""git stash apply"") You can now see that your working directory is clean: $ git status
# On branch master
nothing to commit, working directory clean At this point, you can switch branches and do work elsewhere; your changes are stored on your stack.
To see which stashes you’ve stored, you can use git stash list: $ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert ""Add file_size""
stash@{2}: WIP on master: 21d80a5 Add number to log In this case, two stashes were saved previously, so you have access to three different stashed works.
You can reapply the one you just stashed by using the command shown in the help output of the original stash command: git stash apply.
If you want to apply one of the older stashes, you can specify it by naming it, like this: git stash apply stash@{2}.
If you don’t specify a stash, Git assumes the most recent stash and tries to apply it: $ git stash apply
On branch master
Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   index.html
	modified:   lib/simplegit.rb

no changes added to commit (use ""git add"" and/or ""git commit -a"") You can see that Git re-modifies the files you reverted when you saved the stash.
In this case, you had a clean working directory when you tried to apply the stash, and you tried to apply it on the same branch you saved it from.
Having a clean working directory and applying it on the same branch aren’t necessary to successfully apply a stash.
You can save a stash on one branch, switch to another branch later, and try to reapply the changes.
You can also have modified and uncommitted files in your working directory when you apply a stash — Git gives you merge conflicts if anything no longer applies cleanly. The changes to your files were reapplied, but the file you staged before wasn’t restaged.
To do that, you must run the git stash apply command with a --index option to tell the command to try to reapply the staged changes.
If you had run that instead, you’d have gotten back to your original position: $ git stash apply --index
On branch master
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

	modified:   index.html

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   lib/simplegit.rb The apply option only tries to apply the stashed work — you continue to have it on your stack.
To remove it, you can run git stash drop with the name of the stash to remove: $ git stash list
stash@{0}: WIP on master: 049d078 Create index file
stash@{1}: WIP on master: c264051 Revert ""Add file_size""
stash@{2}: WIP on master: 21d80a5 Add number to log
$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43) You can also run git stash pop to apply the stash and then immediately drop it from your stack."
1.Getting Started,Creative Stashing,"There are a few stash variants that may also be helpful.
The first option that is quite popular is the --keep-index option to the git stash command.
This tells Git to not only include all staged content in the stash being created, but simultaneously leave it in the index. $ git status -s
M  index.html
 M lib/simplegit.rb

$ git stash --keep-index
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
M  index.html Another common thing you may want to do with stash is to stash the untracked files as well as the tracked ones.
By default, git stash will stash only modified and staged tracked files.
If you specify --include-untracked or -u, Git will include untracked files in the stash being created.
However, including untracked files in the stash will still not include explicitly ignored files; to additionally include ignored files, use --all (or just -a). $ git status -s
M  index.html
 M lib/simplegit.rb
?? new-file.txt

$ git stash -u
Saved working directory and index state WIP on master: 1b65b17 added the index file
HEAD is now at 1b65b17 added the index file

$ git status -s
$ Finally, if you specify the --patch flag, Git will not stash everything that is modified but will instead prompt you interactively which of the changes you would like to stash and which you would like to keep in your working directory. $ git stash --patch
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index 66d332e..8bb5674 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -16,6 +16,10 @@ class SimpleGit
         return `#{git_cmd} 2>&1`.chomp
       end
     end
+
+    def show(treeish = 'master')
+      command(""git show #{treeish}"")
+    end

 end
 test
Stash this hunk [y,n,q,a,d,/,e,?]? y

Saved working directory and index state WIP on master: 1b65b17 added the index file"
1.Getting Started,Creating a Branch from a Stash,"If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work.
If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.
If you want an easier way to test the stashed changes again, you can run git stash branch <new branchname>, which creates a new branch for you with your selected branch name, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully: $ git stash branch testchanges
M	index.html
M	lib/simplegit.rb
Switched to a new branch 'testchanges'
On branch testchanges
Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

	modified:   index.html

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   lib/simplegit.rb

Dropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014) This is a nice shortcut to recover stashed work easily and work on it in a new branch."
1.Getting Started,1.Getting Started,"Git is cryptographically secure, but it’s not foolproof.
If you’re taking work from others on the internet and want to verify that commits are actually from a trusted source, Git has a few ways to sign and verify work using GPG."
1.Getting Started,GPG Introduction,"First of all, if you want to sign anything you need to get GPG configured and your personal key installed. $ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   2048R/0A46826A 2014-06-04
uid                  Scott Chacon (Git signing key) <schacon@gmail.com>
sub   2048R/874529A9 2014-06-04 If you don’t have a key installed, you can generate one with gpg --gen-key. $ gpg --gen-key Once you have a private key to sign with, you can configure Git to use it for signing things by setting the user.signingkey config setting. $ git config --global user.signingkey 0A46826A! Now Git will use your key by default to sign tags and commits if you want."
1.Getting Started,Signing Tags,"If you have a GPG private key set up, you can now use it to sign new tags.
All you have to do is use -s instead of -a: $ git tag -s v1.5 -m 'my signed 1.5 tag'

You need a passphrase to unlock the secret key for
user: ""Ben Straub <ben@straub.cc>""
2048-bit RSA key, ID 800430EB, created 2014-05-04 If you run git show on that tag, you can see your GPG signature attached to it: $ git show v1.5
tag v1.5
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:29:41 2014 -0700

my signed 1.5 tag
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAABAgAGBQJTZbQlAAoJEF0+sviABDDrZbQH/09PfE51KPVPlanr6q1v4/Ut
LQxfojUWiLQdg2ESJItkcuweYg+kc3HCyFejeDIBw9dpXt00rY26p05qrpnG+85b
hM1/PswpPLuBSr+oCIDj5GMC2r2iEKsfv2fJbNW8iWAXVLoWZRF8B0MfqX/YTMbm
ecorc4iXzQu7tupRihslbNkfvfciMnSDeSvzCpWAHl7h8Wj6hhqePmLm9lAYqnKp
8S5B/1SSQuEAjRZgI4IexpZoeKGVDptPHxLLS38fozsyi0QyDyzEgJxcJQVMXxVi
RUysgqjcpT8+iQM1PblGfHR4XAhuOqN5Fx06PSaFZhqvWFezJ28/CLyX5q+oIVk=
=EFTF
-----END PGP SIGNATURE-----

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number"
1.Getting Started,Verifying Tags,"To verify a signed tag, you use git tag -v <tag-name>.
This command uses GPG to verify the signature.
You need the signer’s public key in your keyring for this to work properly: $ git tag -v v1.4.2.1
object 883653babd8ee7ea23e6a5c392bb739348b1eb61
type commit
tag v1.4.2.1
tagger Junio C Hamano <junkio@cox.net> 1158138501 -0700

GIT 1.4.2.1

Minor fixes since 1.4.2, including git-mv and git-http with alternates.
gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
gpg: Good signature from ""Junio C Hamano <junkio@cox.net>""
gpg:                 aka ""[jpeg image of size 1513]""
Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A If you don’t have the signer’s public key, you get something like this instead: gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
gpg: Can't check signature: public key not found
error: could not verify the tag 'v1.4.2.1'"
1.Getting Started,Signing Commits,"In more recent versions of Git (v1.7.9 and above), you can now also sign individual commits.
If you’re interested in signing commits directly instead of just the tags, all you need to do is add a -S to your git commit command. $ git commit -a -S -m 'Signed commit'

You need a passphrase to unlock the secret key for
user: ""Scott Chacon (Git signing key) <schacon@gmail.com>""
2048-bit RSA key, ID 0A46826A, created 2014-06-04

[master 5c3386c] Signed commit
 4 files changed, 4 insertions(+), 24 deletions(-)
 rewrite Rakefile (100%)
 create mode 100644 lib/git.rb To see and verify these signatures, there is also a --show-signature option to git log. $ git log --show-signature -1
commit 5c3386cf54bba0a33a32da706aa52bc0155503c2
gpg: Signature made Wed Jun  4 19:49:17 2014 PDT using RSA key ID 0A46826A
gpg: Good signature from ""Scott Chacon (Git signing key) <schacon@gmail.com>""
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Jun 4 19:49:17 2014 -0700

    Signed commit Additionally, you can configure git log to check any signatures it finds and list them in its output with the %G? format. $ git log --pretty=""format:%h %G? %aN  %s""

5c3386c G Scott Chacon  Signed commit
ca82a6d N Scott Chacon  Change the version number
085bb3b N Scott Chacon  Remove unnecessary test code
a11bef0 N Scott Chacon  Initial commit Here we can see that only the latest commit is signed and valid and the previous commits are not. In Git 1.8.3 and later, git merge and git pull can be told to inspect and reject when merging a commit that does not carry a trusted GPG signature with the --verify-signatures command. If you use this option when merging a branch and it contains commits that are not signed and valid, the merge will not work. $ git merge --verify-signatures non-verify
fatal: Commit ab06180 does not have a GPG signature. If the merge contains only valid signed commits, the merge command will show you all the signatures it has checked and then move forward with the merge. $ git merge --verify-signatures signed-branch
Commit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>
Updating 5c3386c..13ad65e
Fast-forward
 README | 2 ++
 1 file changed, 2 insertions(+) You can also use the -S option with the git merge command to sign the resulting merge commit itself.
The following example both verifies that every commit in the branch to be merged is signed and furthermore signs the resulting merge commit. $ git merge --verify-signatures -S  signed-branch
Commit 13ad65e has a good GPG signature by Scott Chacon (Git signing key) <schacon@gmail.com>

You need a passphrase to unlock the secret key for
user: ""Scott Chacon (Git signing key) <schacon@gmail.com>""
2048-bit RSA key, ID 0A46826A, created 2014-06-04

Merge made by the 'recursive' strategy.
 README | 2 ++
 1 file changed, 2 insertions(+)"
1.Getting Started,1.Getting Started,"With just about any size codebase, you’ll often need to find where a function is called or defined, or display the history of a method.
Git provides a couple of useful tools for looking through the code and commits stored in its database quickly and easily.
We’ll go through a few of them."
1.Getting Started,Git Grep,"Git ships with a command called grep that allows you to easily search through any committed tree, the working directory, or even the index for a string or regular expression.
For the examples that follow, we’ll search through the source code for Git itself. By default, git grep will look through the files in your working directory.
As a first variation, you can use either of the -n or --line-number options to print out the line numbers where Git has found matches: $ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:826:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:206:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:482:             if (gmtime_r(&now, &now_tm))
date.c:545:             if (gmtime_r(&time, tm)) {
date.c:758:             /* gmtime_r() in match_digit() may have clobbered it */
git-compat-util.h:1138:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:1140:#define gmtime_r git_gmtime_r In addition to the basic search shown above, git grep supports a plethora of other interesting options. For instance, instead of printing all of the matches, you can ask git grep to summarize the output by showing you only which files contained the search string and how many matches there were in each file with the -c or --count option: $ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:3
git-compat-util.h:2 If you’re interested in the context of a search string, you can display the enclosing method or function for each matching string with either of the -p or --show-function options: $ git grep -p gmtime_r *.c
date.c=static int match_multi_number(timestamp_t num, char c, const char *date,
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
date.c=int parse_date_basic(const char *date, timestamp_t *timestamp, int *offset)
date.c:         /* gmtime_r() in match_digit() may have clobbered it */ As you can see, the gmtime_r routine is called from both the match_multi_number and match_digit functions in the date.c file (the third match displayed represents just the string appearing in a comment). You can also search for complex combinations of strings with the --and flag, which ensures that multiple matches must occur in the same line of text.
For instance, let’s look for any lines that define a constant whose name contains either of the substrings “LINK” or “BUF_MAX”, specifically in an older version of the Git codebase represented by the tag v1.8.0 (we’ll throw in the --break and --heading options which help split up the output into a more readable format): $ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */ The git grep command has a few advantages over normal searching commands like grep and ack.
The first is that it’s really fast, the second is that you can search through any tree in Git, not just the working directory.
As we saw in the above example, we looked for terms in an older version of the Git source code, not the version that was currently checked out."
1.Getting Started,1.Getting Started,"Many times, when working with Git, you may want to revise your local commit history.
One of the great things about Git is that it allows you to make decisions at the last possible moment.
You can decide what files go into which commits right before you commit with the staging area, you can decide that you didn’t mean to be working on something yet with git stash, and you can rewrite commits that already happened so they look like they happened in a different way.
This can involve changing the order of the commits, changing messages or modifying files in a commit, squashing together or splitting apart commits, or removing commits entirely — all before you share your work with others. In this section, you’ll see how to accomplish these tasks so that you can make your commit history look the way you want before you share it with others. One of the cardinal rules of Git is that, since so much work is local within your clone, you have a great deal of freedom to rewrite your history locally.
However, once you push your work, it is a different story entirely, and you should consider pushed work as final unless you have good reason to change it.
In short, you should avoid pushing your work until you’re happy with it and ready to share it with the rest of the world."
1.Getting Started,Changing the Last Commit,"Changing your most recent commit is probably the most common rewriting of history that you’ll do.
You’ll often want to do two basic things to your last commit: simply change the commit message, or change the actual content of the commit by adding, removing and modifying files. If you simply want to modify your last commit message, that’s easy: $ git commit --amend The command above loads the previous commit message into an editor session, where you can make changes to the message, save those changes and exit.
When you save and close the editor, the editor writes a new commit containing that updated commit message and makes it your new last commit. If, on the other hand, you want to change the actual content of your last commit, the process works basically the same way — first make the changes you think you forgot, stage those changes, and the subsequent git commit --amend replaces that last commit with your new, improved commit. You need to be careful with this technique because amending changes the SHA-1 of the commit.
It’s like a very small rebase — don’t amend your last commit if you’ve already pushed it. When you amend a commit, you have the opportunity to change both the commit message and the content of the commit.
If you amend the content of the commit substantially, you should almost certainly update the commit message to reflect that amended content. On the other hand, if your amendments are suitably trivial (fixing a silly typo or adding a file you forgot to stage) such that the earlier commit message is just fine, you can simply make the changes, stage them, and avoid the unnecessary editor session entirely with: $ git commit --amend --no-edit"
1.Getting Started,Changing Multiple Commit Messages,"To modify a commit that is farther back in your history, you must move to more complex tools.
Git doesn’t have a modify-history tool, but you can use the rebase tool to rebase a series of commits onto the HEAD that they were originally based on instead of moving them to another one.
With the interactive rebase tool, you can then stop after each commit you want to modify and change the message, add files, or do whatever you wish.
You can run rebase interactively by adding the -i option to git rebase.
You must indicate how far back you want to rewrite commits by telling the command which commit to rebase onto. For example, if you want to change the last three commit messages, or any of the commit messages in that group, you supply as an argument to git rebase -i the parent of the last commit you want to edit, which is HEAD~2^ or HEAD~3.
It may be easier to remember the ~3 because you’re trying to edit the last three commits, but keep in mind that you’re actually designating four commits ago, the parent of the last commit you want to edit: $ git rebase -i HEAD~3 Remember again that this is a rebasing command — every commit in the range HEAD~3..HEAD with a changed message and all of its descendants will be rewritten.
Don’t include any commit you’ve already pushed to a central server — doing so will confuse other developers by providing an alternate version of the same change. Running this command gives you a list of commits in your text editor that looks something like this: pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file

# Rebase 710f0f8..a5f4a0d onto 710f0f8
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like ""squash"", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out It’s important to note that these commits are listed in the opposite order than you normally see them using the log command.
If you run a log, you see something like this: $ git log --pretty=format:""%h %s"" HEAD~3..HEAD
a5f4a0d Add cat-file
310154e Update README formatting and add blame
f7f3f6d Change my name a bit Notice the reverse order.
The interactive rebase gives you a script that it’s going to run.
It will start at the commit you specify on the command line (HEAD~3) and replay the changes introduced in each of these commits from top to bottom.
It lists the oldest at the top, rather than the newest, because that’s the first one it will replay. You need to edit the script so that it stops at the commit you want to edit.
To do so, change the word “pick” to the word “edit” for each of the commits you want the script to stop after.
For example, to modify only the third commit message, you change the file to look like this: edit f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file When you save and exit the editor, Git rewinds you back to the last commit in that list and drops you on the command line with the following message: $ git rebase -i HEAD~3
Stopped at f7f3f6d... Change my name a bit
You can amend the commit now, with

       git commit --amend

Once you're satisfied with your changes, run

       git rebase --continue These instructions tell you exactly what to do.
Type: $ git commit --amend Change the commit message, and exit the editor.
Then, run: $ git rebase --continue This command will apply the other two commits automatically, and then you’re done.
If you change pick to edit on more lines, you can repeat these steps for each commit you change to edit.
Each time, Git will stop, let you amend the commit, and continue when you’re finished."
1.Getting Started,Reordering Commits,"You can also use interactive rebases to reorder or remove commits entirely.
If you want to remove the “Add cat-file” commit and change the order in which the other two commits are introduced, you can change the rebase script from this: pick f7f3f6d Change my name a bit
pick 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file to this: pick 310154e Update README formatting and add blame
pick f7f3f6d Change my name a bit When you save and exit the editor, Git rewinds your branch to the parent of these commits, applies 310154e and then f7f3f6d, and then stops.
You effectively change the order of those commits and remove the “Add cat-file” commit completely."
1.Getting Started,Squashing Commits,"It’s also possible to take a series of commits and squash them down into a single commit with the interactive rebasing tool.
The script puts helpful instructions in the rebase message: #
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like ""squash"", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out If, instead of “pick” or “edit”, you specify “squash”, Git applies both that change and the change directly before it and makes you merge the commit messages together.
So, if you want to make a single commit from these three commits, you make the script look like this: pick f7f3f6d Change my name a bit
squash 310154e Update README formatting and add blame
squash a5f4a0d Add cat-file When you save and exit the editor, Git applies all three changes and then puts you back into the editor to merge the three commit messages: # This is a combination of 3 commits.
# The first commit's message is:
Change my name a bit

# This is the 2nd commit message:

Update README formatting and add blame

# This is the 3rd commit message:

Add cat-file When you save that, you have a single commit that introduces the changes of all three previous commits."
1.Getting Started,Splitting a Commit,"Splitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.
For example, suppose you want to split the middle commit of your three commits.
Instead of “Update README formatting and add blame”, you want to split it into two commits: “Update README formatting” for the first, and “Add blame” for the second.
You can do that in the rebase -i script by changing the instruction on the commit you want to split to “edit”: pick f7f3f6d Change my name a bit
edit 310154e Update README formatting and add blame
pick a5f4a0d Add cat-file Then, when the script drops you to the command line, you reset that commit, take the changes that have been reset, and create multiple commits out of them.
When you save and exit the editor, Git rewinds to the parent of the first commit in your list, applies the first commit (f7f3f6d), applies the second (310154e), and drops you to the console.
There, you can do a mixed reset of that commit with git reset HEAD^, which effectively undoes that commit and leaves the modified files unstaged.
Now you can stage and commit files until you have several commits, and run git rebase --continue when you’re done: $ git reset HEAD^
$ git add README
$ git commit -m 'Update README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'Add blame'
$ git rebase --continue Git applies the last commit (a5f4a0d) in the script, and your history looks like this: $ git log -4 --pretty=format:""%h %s""
1c002dd Add cat-file
9b29157 Add blame
35cfb2b Update README formatting
f7f3f6d Change my name a bit This changes the SHA-1s of the three most recent commits in your list, so make sure no changed commit shows up in that list that you’ve already pushed to a shared repository.
Notice that the last commit (f7f3f6d) in the list is unchanged.
Despite this commit being shown in the script, because it was marked as “pick” and was applied prior to any rebase changes, Git leaves the commit unmodified."
1.Getting Started,Deleting a commit,"If you want to get rid of a commit, you can delete it using the rebase -i script.
In the list of commits, put the word “drop” before the commit you want to delete (or just delete that line from the rebase script): pick 461cb2a This commit is OK
drop 5aecc10 This commit is broken Because of the way Git builds commit objects, deleting or altering a commit will cause the rewriting of all the commits that follow it.
The further back in your repo’s history you go, the more commits will need to be recreated.
This can cause lots of merge conflicts if you have many commits later in the sequence that depend on the one you just deleted. If you get partway through a rebase like this and decide it’s not a good idea, you can always stop.
Type git rebase --abort, and your repo will be returned to the state it was in before you started the rebase. If you finish a rebase and decide it’s not what you want, you can use git reflog to recover an earlier version of your branch.
See Data Recovery for more information on the reflog command. Drew DeVault made a practical hands-on guide with exercises to learn how to use git rebase.
You can find it at: https://git-rebase.io/"
1.Getting Started,1.Getting Started,"Before moving on to more specialized tools, let’s talk about the Git reset and checkout commands.
These commands are two of the most confusing parts of Git when you first encounter them.
They do so many things that it seems hopeless to actually understand them and employ them properly.
For this, we recommend a simple metaphor."
1.Getting Started,The Three Trees,"An easier way to think about reset and checkout is through the mental frame of Git being a content manager of three different trees.
By “tree” here, we really mean “collection of files”, not specifically the data structure.
There are a few cases where the index doesn’t exactly act like a tree, but for our purposes it is easier to think about it this way for now. Git as a system manages and manipulates three trees in its normal operation: HEAD Last commit snapshot, next parent Index Proposed next commit snapshot Working Directory Sandbox HEAD is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch.
That means HEAD will be the parent of the next commit that is created.
It’s generally simplest to think of HEAD as the snapshot of your last commit on that branch. In fact, it’s pretty easy to see what that snapshot looks like.
Here is an example of getting the actual directory listing and SHA-1 checksums for each file in the HEAD snapshot: $ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -0700
committer Scott Chacon  1301511835 -0700

initial commit

$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib The Git cat-file and ls-tree commands are “plumbing” commands that are used for lower level things and not really used in day-to-day work, but they help us see what’s going on here. The index is your proposed next commit.
We’ve also been referring to this concept as Git’s “Staging Area” as this is what Git looks at when you run git commit. Git populates this index with a list of all the file contents that were last checked out into your working directory and what they looked like when they were originally checked out.
You then replace some of those files with new versions of them, and git commit converts that into the tree for a new commit. $ git ls-files -s
100644 a906cb2a4a904a152e80877d4088654daad0c859 0	README
100644 8f94139338f9404f26296befa88755fc2598c289 0	Rakefile
100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0	lib/simplegit.rb Again, here we’re using git ls-files, which is more of a behind the scenes command that shows you what your index currently looks like. The index is not technically a tree structure — it’s actually implemented as a flattened manifest — but for our purposes it’s close enough. Finally, you have your working directory (also commonly referred to as the “working tree”).
The other two trees store their content in an efficient but inconvenient manner, inside the .git folder.
The working directory unpacks them into actual files, which makes it much easier for you to edit them.
Think of the working directory as a sandbox, where you can try changes out before committing them to your staging area (index) and then to history. $ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files"
1.Getting Started,The Workflow,"Git’s typical workflow is to record snapshots of your project in successively better states, by manipulating these three trees. Let’s visualize this process: say you go into a new directory with a single file in it.
We’ll call this v1 of the file, and we’ll indicate it in blue.
Now we run git init, which will create a Git repository with a HEAD reference which points to the unborn master branch. At this point, only the working directory tree has any content. Now we want to commit this file, so we use git add to take content in the working directory and copy it to the index. Then we run git commit, which takes the contents of the index and saves it as a permanent snapshot, creates a commit object which points to that snapshot, and updates master to point to that commit. If we run git status, we’ll see no changes, because all three trees are the same. Now we want to make a change to that file and commit it.
We’ll go through the same process; first, we change the file in our working directory.
Let’s call this v2 of the file, and indicate it in red. If we run git status right now, we’ll see the file in red as “Changes not staged for commit”, because that entry differs between the index and the working directory.
Next we run git add on it to stage it into our index. At this point, if we run git status, we will see the file in green under “Changes to be committed” because the index and HEAD differ — that is, our proposed next commit is now different from our last commit.
Finally, we run git commit to finalize the commit. Now git status will give us no output, because all three trees are the same again. Switching branches or cloning goes through a similar process.
When you checkout a branch, it changes HEAD to point to the new branch ref, populates your index with the snapshot of that commit, then copies the contents of the index into your working directory."
1.Getting Started,The Role of Reset,"The reset command makes more sense when viewed in this context. For the purposes of these examples, let’s say that we’ve modified file.txt again and committed it a third time.
So now our history looks like this: Let’s now walk through exactly what reset does when you call it.
It directly manipulates these three trees in a simple and predictable way.
It does up to three basic operations. The first thing reset will do is move what HEAD points to.
This isn’t the same as changing HEAD itself (which is what checkout does); reset moves the branch that HEAD is pointing to.
This means if HEAD is set to the master branch (i.e. you’re currently on the master branch), running git reset 9e5e6a4 will start by making master point to 9e5e6a4. No matter what form of reset with a commit you invoke, this is the first thing it will always try to do.
With reset --soft, it will simply stop there. Now take a second to look at that diagram and realize what happened: it essentially undid the last git commit command.
When you run git commit, Git creates a new commit and moves the branch that HEAD points to up to it.
When you reset back to HEAD~ (the parent of HEAD), you are moving the branch back to where it was, without changing the index or working directory.
You could now update the index and run git commit again to accomplish what git commit --amend would have done (see Changing the Last Commit). Note that if you run git status now you’ll see in green the difference between the index and what the new HEAD is. The next thing reset will do is to update the index with the contents of whatever snapshot HEAD now points to. If you specify the --mixed option, reset will stop at this point.
This is also the default, so if you specify no option at all (just git reset HEAD~ in this case), this is where the command will stop. Now take another second to look at that diagram and realize what happened: it still undid your last commit, but also unstaged everything.
You rolled back to before you ran all your git add and git commit commands. The third thing that reset will do is to make the working directory look like the index.
If you use the --hard option, it will continue to this stage. So let’s think about what just happened.
You undid your last commit, the git add and git commit commands, and all the work you did in your working directory. It’s important to note that this flag (--hard) is the only way to make the reset command dangerous, and one of the very few cases where Git will actually destroy data.
Any other invocation of reset can be pretty easily undone, but the --hard option cannot, since it forcibly overwrites files in the working directory.
In this particular case, we still have the v3 version of our file in a commit in our Git DB, and we could get it back by looking at our reflog, but if we had not committed it, Git still would have overwritten the file and it would be unrecoverable. The reset command overwrites these three trees in a specific order, stopping when you tell it to: Move the branch HEAD points to (stop here if --soft). Make the index look like HEAD (stop here unless --hard). Make the working directory look like the index."
1.Getting Started,Reset With a Path,"That covers the behavior of reset in its basic form, but you can also provide it with a path to act upon.
If you specify a path, reset will skip step 1, and limit the remainder of its actions to a specific file or set of files.
This actually sort of makes sense — HEAD is just a pointer, and you can’t point to part of one commit and part of another.
But the index and working directory can be partially updated, so reset proceeds with steps 2 and 3. So, assume we run git reset file.txt.
This form (since you did not specify a commit SHA-1 or branch, and you didn’t specify --soft or --hard) is shorthand for git reset --mixed HEAD file.txt, which will: Move the branch HEAD points to (skipped). Make the index look like HEAD (stop here). So it essentially just copies file.txt from HEAD to the index. This has the practical effect of unstaging the file.
If we look at the diagram for that command and think about what git add does, they are exact opposites. This is why the output of the git status command suggests that you run this to unstage a file (see Unstaging a Staged File for more on this). We could just as easily not let Git assume we meant “pull the data from HEAD” by specifying a specific commit to pull that file version from.
We would just run something like git reset eb43bf file.txt. This effectively does the same thing as if we had reverted the content of the file to v1 in the working directory, ran git add on it, then reverted it back to v3 again (without actually going through all those steps).
If we run git commit now, it will record a change that reverts that file back to v1, even though we never actually had it in our working directory again. It’s also interesting to note that like git add, the reset command will accept a --patch option to unstage content on a hunk-by-hunk basis.
So you can selectively unstage or revert content."
1.Getting Started,Squashing,"Let’s look at how to do something interesting with this newfound power — squashing commits. Say you have a series of commits with messages like “oops.”, “WIP” and “forgot this file”.
You can use reset to quickly and easily squash them into a single commit that makes you look really smart.
Squashing Commits shows another way to do this, but in this example it’s simpler to use reset. Let’s say you have a project where the first commit has one file, the second commit added a new file and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it down. You can run git reset --soft HEAD~2 to move the HEAD branch back to an older commit (the most recent commit you want to keep): And then simply run git commit again: Now you can see that your reachable history, the history you would push, now looks like you had one commit with file-a.txt v1, then a second that both modified file-a.txt to v3 and added file-b.txt.
The commit with the v2 version of the file is no longer in the history."
1.Getting Started,Check It Out,"Finally, you may wonder what the difference between checkout and reset is.
Like reset, checkout manipulates the three trees, and it is a bit different depending on whether you give the command a file path or not. Running git checkout [branch] is pretty similar to running git reset --hard [branch] in that it updates all three trees for you to look like [branch], but there are two important differences. First, unlike reset --hard, checkout is working-directory safe; it will check to make sure it’s not blowing away files that have changes to them.
Actually, it’s a bit smarter than that — it tries to do a trivial merge in the working directory, so all of the files you haven’t changed will be updated.
reset --hard, on the other hand, will simply replace everything across the board without checking. The second important difference is how checkout updates HEAD.
Whereas reset will move the branch that HEAD points to, checkout will move HEAD itself to point to another branch. For instance, say we have master and develop branches which point at different commits, and we’re currently on develop (so HEAD points to it).
If we run git reset master, develop itself will now point to the same commit that master does.
If we instead run git checkout master, develop does not move, HEAD itself does.
HEAD will now point to master. So, in both cases we’re moving HEAD to point to commit A, but how we do so is very different.
reset will move the branch HEAD points to, checkout moves HEAD itself. The other way to run checkout is with a file path, which, like reset, does not move HEAD.
It is just like git reset [branch] file in that it updates the index with that file at that commit, but it also overwrites the file in the working directory.
It would be exactly like git reset --hard [branch] file (if reset would let you run that) — it’s not working-directory safe, and it does not move HEAD. Also, like git reset and git add, checkout will accept a --patch option to allow you to selectively revert file contents on a hunk-by-hunk basis."
1.Getting Started,1.Getting Started,"Merging in Git is typically fairly easy.
Since Git makes it easy to merge another branch multiple times, it means that you can have a very long lived branch but you can keep it up to date as you go, solving small conflicts often, rather than be surprised by one enormous conflict at the end of the series. However, sometimes tricky conflicts do occur.
Unlike some other version control systems, Git does not try to be overly clever about merge conflict resolution.
Git’s philosophy is to be smart about determining when a merge resolution is unambiguous, but if there is a conflict, it does not try to be clever about automatically resolving it.
Therefore, if you wait too long to merge two branches that diverge quickly, you can run into some issues. In this section, we’ll go over what some of those issues might be and what tools Git gives you to help handle these more tricky situations.
We’ll also cover some of the different, non-standard types of merges you can do, as well as see how to back out of merges that you’ve done."
1.Getting Started,Merge Conflicts,"While we covered some basics on resolving merge conflicts in Basic Merge Conflicts, for more complex conflicts, Git provides a few tools to help you figure out what’s going on and how to better deal with the conflict. First of all, if at all possible, try to make sure your working directory is clean before doing a merge that may have conflicts.
If you have work in progress, either commit it to a temporary branch or stash it.
This makes it so that you can undo anything you try here.
If you have unsaved changes in your working directory when you try a merge, some of these tips may help you preserve that work. Let’s walk through a very simple example.
We have a super simple Ruby file that prints 'hello world'. #! /usr/bin/env ruby

def hello
  puts 'hello world'
end

hello() In our repository, we create a new branch named whitespace and proceed to change all the Unix line endings to DOS line endings, essentially changing every line of the file, but just with whitespace.
Then we change the line “hello world” to “hello mundo”. $ git checkout -b whitespace
Switched to a new branch 'whitespace'

$ unix2dos hello.rb
unix2dos: converting file hello.rb to DOS format ...
$ git commit -am 'Convert hello.rb to DOS'
[whitespace 3270f76] Convert hello.rb to DOS
 1 file changed, 7 insertions(+), 7 deletions(-)

$ vim hello.rb
$ git diff -b
diff --git a/hello.rb b/hello.rb
index ac51efd..e85207e 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-  puts 'hello world'
+  puts 'hello mundo'^M
 end

 hello()

$ git commit -am 'Use Spanish instead of English'
[whitespace 6d338d2] Use Spanish instead of English
 1 file changed, 1 insertion(+), 1 deletion(-) Now we switch back to our master branch and add some documentation for the function. $ git checkout master
Switched to branch 'master'

$ vim hello.rb
$ git diff
diff --git a/hello.rb b/hello.rb
index ac51efd..36c06c8 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello world'
 end

$ git commit -am 'Add comment documenting the function'
[master bec6336] Add comment documenting the function
 1 file changed, 1 insertion(+) Now we try to merge in our whitespace branch and we’ll get conflicts because of the whitespace changes. $ git merge whitespace
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result. We now have a few options.
First, let’s cover how to get out of this situation.
If you perhaps weren’t expecting conflicts and don’t want to quite deal with the situation yet, you can simply back out of the merge with git merge --abort. $ git status -sb
## master
UU hello.rb

$ git merge --abort

$ git status -sb
## master The git merge --abort option tries to revert back to your state before you ran the merge.
The only cases where it may not be able to do this perfectly would be if you had unstashed, uncommitted changes in your working directory when you ran it, otherwise it should work fine. If for some reason you just want to start over, you can also run git reset --hard HEAD, and your repository will be back to the last committed state.
Remember that any uncommitted work will be lost, so make sure you don’t want any of your changes. In this specific case, the conflicts are whitespace related.
We know this because the case is simple, but it’s also pretty easy to tell in real cases when looking at the conflict because every line is removed on one side and added again on the other.
By default, Git sees all of these lines as being changed, so it can’t merge the files. The default merge strategy can take arguments though, and a few of them are about properly ignoring whitespace changes.
If you see that you have a lot of whitespace issues in a merge, you can simply abort it and do it again, this time with -Xignore-all-space or -Xignore-space-change.
The first option ignores whitespace completely when comparing lines, the second treats sequences of one or more whitespace characters as equivalent. $ git merge -Xignore-space-change whitespace
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-) Since in this case, the actual file changes were not conflicting, once we ignore the whitespace changes, everything merges just fine. This is a lifesaver if you have someone on your team who likes to occasionally reformat everything from spaces to tabs or vice-versa. Though Git handles whitespace pre-processing pretty well, there are other types of changes that perhaps Git can’t handle automatically, but are scriptable fixes.
As an example, let’s pretend that Git could not handle the whitespace change and we needed to do it by hand. What we really need to do is run the file we’re trying to merge in through a dos2unix program before trying the actual file merge.
So how would we do that? First, we get into the merge conflict state.
Then we want to get copies of our version of the file, their version (from the branch we’re merging in) and the common version (from where both sides branched off).
Then we want to fix up either their side or our side and re-try the merge again for just this single file. Getting the three file versions is actually pretty easy.
Git stores all of these versions in the index under “stages” which each have numbers associated with them.
Stage 1 is the common ancestor, stage 2 is your version and stage 3 is from the MERGE_HEAD, the version you’re merging in (“theirs”). You can extract a copy of each of these versions of the conflicted file with the git show command and a special syntax. $ git show :1:hello.rb > hello.common.rb
$ git show :2:hello.rb > hello.ours.rb
$ git show :3:hello.rb > hello.theirs.rb If you want to get a little more hard core, you can also use the ls-files -u plumbing command to get the actual SHA-1s of the Git blobs for each of these files. $ git ls-files -u
100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1	hello.rb
100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2	hello.rb
100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3	hello.rb The :1:hello.rb is just a shorthand for looking up that blob SHA-1. Now that we have the content of all three stages in our working directory, we can manually fix up theirs to fix the whitespace issue and re-merge the file with the little-known git merge-file command which does just that. $ dos2unix hello.theirs.rb
dos2unix: converting file hello.theirs.rb to Unix format ...

$ git merge-file -p \
    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb

$ git diff -b
diff --cc hello.rb
index 36c06c8,e85207e..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,8 -1,7 +1,8 @@@
  #! /usr/bin/env ruby

 +# prints out a greeting
  def hello
-   puts 'hello world'
+   puts 'hello mundo'
  end

  hello() At this point we have nicely merged the file.
In fact, this actually works better than the ignore-space-change option because this actually fixes the whitespace changes before merge instead of simply ignoring them.
In the ignore-space-change merge, we actually ended up with a few lines with DOS line endings, making things mixed. If you want to get an idea before finalizing this commit about what was actually changed between one side or the other, you can ask git diff to compare what is in your working directory that you’re about to commit as the result of the merge to any of these stages.
Let’s go through them all. To compare your result to what you had in your branch before the merge, in other words, to see what the merge introduced, you can run git diff --ours: $ git diff --ours
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index 36c06c8..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -2,7 +2,7 @@

 # prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello() So here we can easily see that what happened in our branch, what we’re actually introducing to this file with this merge, is changing that single line. If we want to see how the result of the merge differed from what was on their side, you can run git diff --theirs.
In this and the following example, we have to use -b to strip out the whitespace because we’re comparing it to what is in Git, not our cleaned up hello.theirs.rb file. $ git diff --theirs -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index e85207e..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello mundo'
 end Finally, you can see how the file has changed from both sides with git diff --base. $ git diff --base -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index ac51efd..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,8 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello() At this point we can use the git clean command to clear out the extra files we created to do the manual merge but no longer need. $ git clean -f
Removing hello.common.rb
Removing hello.ours.rb
Removing hello.theirs.rb Perhaps we’re not happy with the resolution at this point for some reason, or maybe manually editing one or both sides still didn’t work well and we need more context. Let’s change up the example a little.
For this example, we have two longer lived branches that each have a few commits in them but create a legitimate content conflict when merged. $ git log --graph --oneline --decorate --all
* f1270f7 (HEAD, master) Update README
* 9af9d3b Create README
* 694971d Update phrase to 'hola world'
| * e3eb223 (mundo) Add more tests
| * 7cff591 Create initial testing script
| * c3ffff1 Change text to 'hello mundo'
|/
* b7dcc89 Initial hello world code We now have three unique commits that live only on the master branch and three others that live on the mundo branch.
If we try to merge the mundo branch in, we get a conflict. $ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result. We would like to see what the merge conflict is.
If we open up the file, we’ll see something like this: #! /usr/bin/env ruby

def hello
<<<<<<< HEAD
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> mundo
end

hello() Both sides of the merge added content to this file, but some of the commits modified the file in the same place that caused this conflict. Let’s explore a couple of tools that you now have at your disposal to determine how this conflict came to be.
Perhaps it’s not obvious how exactly you should fix this conflict.
You need more context. One helpful tool is git checkout with the --conflict option.
This will re-checkout the file again and replace the merge conflict markers.
This can be useful if you want to reset the markers and try to resolve them again. You can pass --conflict either diff3 or merge (which is the default).
If you pass it diff3, Git will use a slightly different version of conflict markers, not only giving you the “ours” and “theirs” versions, but also the “base” version inline to give you more context. $ git checkout --conflict=diff3 hello.rb Once we run that, the file will look like this instead: #! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
||||||| base
  puts 'hello world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end

hello() If you like this format, you can set it as the default for future merge conflicts by setting the merge.conflictstyle setting to diff3. $ git config --global merge.conflictstyle diff3 The git checkout command can also take --ours and --theirs options, which can be a really fast way of just choosing either one side or the other without merging things at all. This can be particularly useful for conflicts of binary files where you can simply choose one side, or where you only want to merge certain files in from another branch — you can do the merge and then checkout certain files from one side or the other before committing. Another useful tool when resolving merge conflicts is git log.
This can help you get context on what may have contributed to the conflicts.
Reviewing a little bit of history to remember why two lines of development were touching the same area of code can be really helpful sometimes. To get a full list of all of the unique commits that were included in either branch involved in this merge, we can use the “triple dot” syntax that we learned in Triple Dot. $ git log --oneline --left-right HEAD...MERGE_HEAD
< f1270f7 Update README
< 9af9d3b Create README
< 694971d Update phrase to 'hola world'
> e3eb223 Add more tests
> 7cff591 Create initial testing script
> c3ffff1 Change text to 'hello mundo' That’s a nice list of the six total commits involved, as well as which line of development each commit was on. We can further simplify this though to give us much more specific context.
If we add the --merge option to git log, it will only show the commits in either side of the merge that touch a file that’s currently conflicted. $ git log --oneline --left-right --merge
< 694971d Update phrase to 'hola world'
> c3ffff1 Change text to 'hello mundo' If you run that with the -p option instead, you get just the diffs to the file that ended up in conflict.
This can be really helpful in quickly giving you the context you need to help understand why something conflicts and how to more intelligently resolve it. Since Git stages any merge results that are successful, when you run git diff while in a conflicted merge state, you only get what is currently still in conflict.
This can be helpful to see what you still have to resolve. When you run git diff directly after a merge conflict, it will give you information in a rather unique diff output format. $ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,11 @@@
  #! /usr/bin/env ruby

  def hello
++<<<<<<< HEAD
 +  puts 'hola world'
++=======
+   puts 'hello mundo'
++>>>>>>> mundo
  end

  hello() The format is called “Combined Diff” and gives you two columns of data next to each line.
The first column shows you if that line is different (added or removed) between the “ours” branch and the file in your working directory and the second column does the same between the “theirs” branch and your working directory copy. So in that example you can see that the <<<<<<< and >>>>>>> lines are in the working copy but were not in either side of the merge.
This makes sense because the merge tool stuck them in there for our context, but we’re expected to remove them. If we resolve the conflict and run git diff again, we’ll see the same thing, but it’s a little more useful. $ vim hello.rb
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello() This shows us that “hola world” was in our side but not in the working copy, that “hello mundo” was in their side but not in the working copy and finally that “hola mundo” was not in either side but is now in the working copy.
This can be useful to review before committing the resolution. You can also get this from the git log for any merge to see how something was resolved after the fact.
Git will output this format if you run git show on a merge commit, or if you add a --cc option to a git log -p (which by default only shows patches for non-merge commits). $ git log --cc -p -1
commit 14f41939956d80b9e17bb8721354c33f8d5b5a79
Merge: f1270f7 e3eb223
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Sep 19 18:14:49 2014 +0200

    Merge branch 'mundo'

    Conflicts:
        hello.rb

diff --cc hello.rb
index 0399cd5,59727f0..e1d0799
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()"
1.Getting Started,Undoing Merges,"Now that you know how to create a merge commit, you’ll probably make some by mistake.
One of the great things about working with Git is that it’s okay to make mistakes, because it’s possible (and in many cases easy) to fix them. Merge commits are no different.
Let’s say you started work on a topic branch, accidentally merged it into master, and now your commit history looks like this: There are two ways to approach this problem, depending on what your desired outcome is. If the unwanted merge commit only exists on your local repository, the easiest and best solution is to move the branches so that they point where you want them to.
In most cases, if you follow the errant git merge with git reset --hard HEAD~, this will reset the branch pointers so they look like this: We covered reset back in Reset Demystified, so it shouldn’t be too hard to figure out what’s going on here.
Here’s a quick refresher: reset --hard usually goes through three steps: Move the branch HEAD points to.
In this case, we want to move master to where it was before the merge commit (C6). Make the index look like HEAD. Make the working directory look like the index. The downside of this approach is that it’s rewriting history, which can be problematic with a shared repository.
Check out The Perils of Rebasing for more on what can happen; the short version is that if other people have the commits you’re rewriting, you should probably avoid reset.
This approach also won’t work if any other commits have been created since the merge; moving the refs would effectively lose those changes. If moving the branch pointers around isn’t going to work for you, Git gives you the option of making a new commit which undoes all the changes from an existing one.
Git calls this operation a “revert”, and in this particular scenario, you’d invoke it like this: $ git revert -m 1 HEAD
[master b1d8379] Revert ""Merge branch 'topic'"" The -m 1 flag indicates which parent is the “mainline” and should be kept.
When you invoke a merge into HEAD (git merge topic), the new commit has two parents: the first one is HEAD (C6), and the second is the tip of the branch being merged in (C4).
In this case, we want to undo all the changes introduced by merging in parent #2 (C4), while keeping all the content from parent #1 (C6). The history with the revert commit looks like this: The new commit ^M has exactly the same contents as C6, so starting from here it’s as if the merge never happened, except that the now-unmerged commits are still in HEAD’s history.
Git will get confused if you try to merge topic into master again: $ git merge topic
Already up-to-date. There’s nothing in topic that isn’t already reachable from master.
What’s worse, if you add work to topic and merge again, Git will only bring in the changes since the reverted merge: The best way around this is to un-revert the original merge, since now you want to bring in the changes that were reverted out, then create a new merge commit: $ git revert ^M
[master 09f0126] Revert ""Revert ""Merge branch 'topic'""""
$ git merge topic In this example, M and ^M cancel out.
^^M effectively merges in the changes from C3 and C4, and C8 merges in the changes from C7, so now topic is fully merged."
1.Getting Started,1.Getting Started,"In addition to being primarily for version control, Git also provides a couple commands to help you debug your source code projects.
Because Git is designed to handle nearly any type of content, these tools are pretty generic, but they can often help you hunt for a bug or culprit when things go wrong."
1.Getting Started,File Annotation,"If you track down a bug in your code and want to know when it was introduced and why, file annotation is often your best tool.
It shows you what commit was the last to modify each line of any file.
So if you see that a method in your code is buggy, you can annotate the file with git blame to determine which commit was responsible for the introduction of that line. The following example uses git blame to determine which commit and committer was responsible for lines in the top-level Linux kernel Makefile and, further, uses the -L option to restrict the output of the annotation to lines 69 through 82 of that file: $ git blame -L 69,82 Makefile
b8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 69) ifeq (""$(origin V)"", ""command line"")
b8b0618cf6fab (Cheng Renquan  2009-05-26 16:03:07 +0800 70)   KBUILD_VERBOSE = $(V)
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 71) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 72) ifndef KBUILD_VERBOSE
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 73)   KBUILD_VERBOSE = 0
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 74) endif
^1da177e4c3f4 (Linus Torvalds 2005-04-16 15:20:36 -0700 75)
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 76) ifeq ($(KBUILD_VERBOSE),1)
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 77)   quiet =
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 78)   Q =
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 79) else
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 80)   quiet=quiet_
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 81)   Q = @
066b7ed955808 (Michal Marek   2014-07-04 14:29:30 +0200 82) endif Notice that the first field is the partial SHA-1 of the commit that last modified that line.
The next two fields are values extracted from that commit — the author name and the authored date of that commit — so you can easily see who modified that line and when.
After that come the line number and the content of the file.
Also note the ^1da177e4c3f4 commit lines, where the ^ prefix designates lines that were introduced in the repository’s initial commit and have remained unchanged ever since.
This is a tad confusing, because now you’ve seen at least three different ways that Git uses the ^ to modify a commit SHA-1, but that is what it means here. Another cool thing about Git is that it doesn’t track file renames explicitly.
It records the snapshots and then tries to figure out what was renamed implicitly, after the fact.
One of the interesting features of this is that you can ask it to figure out all sorts of code movement as well.
If you pass -C to git blame, Git analyzes the file you’re annotating and tries to figure out where snippets of code within it originally came from if they were copied from elsewhere.
For example, say you are refactoring a file named GITServerHandler.m into multiple files, one of which is GITPackUpload.m.
By blaming GITPackUpload.m with the -C option, you can see where sections of the code originally came from: $ git blame -C -L 141,153 GITPackUpload.m
f344f58d GITServerHandler.m (Scott 2009-01-04 141)
f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC
f344f58d GITServerHandler.m (Scott 2009-01-04 143) {
70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@""GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@""GATHER COMMI
ad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)
56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {
56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb
56ef2caf GITServerHandler.m (Scott 2009-01-05 153) This is really useful.
Normally, you get as the original commit the commit where you copied the code over, because that is the first time you touched those lines in this file.
Git tells you the original commit where you wrote those lines, even if it was in another file."
1.Getting Started,1.Getting Started,"It often happens that while working on one project, you need to use another project from within it.
Perhaps it’s a library that a third party developed or that you’re developing separately and using in multiple parent projects.
A common issue arises in these scenarios: you want to be able to treat the two projects as separate yet still be able to use one from within the other. Here’s an example.
Suppose you’re developing a website and creating Atom feeds.
Instead of writing your own Atom-generating code, you decide to use a library.
You’re likely to have to either include this code from a shared library like a CPAN install or Ruby gem, or copy the source code into your own project tree.
The issue with including the library is that it’s difficult to customize the library in any way and often more difficult to deploy it, because you need to make sure every client has that library available.
The issue with copying the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available. Git addresses this issue using submodules.
Submodules allow you to keep a Git repository as a subdirectory of another Git repository.
This lets you clone another repository into your project and keep your commits separate."
1.Getting Started,Starting with Submodules,"We’ll walk through developing a simple project that has been split up into a main project and a few sub-projects. Let’s start by adding an existing Git repository as a submodule of the repository that we’re working on.
To add a new submodule you use the git submodule add command with the absolute or relative URL of the project you would like to start tracking.
In this example, we’ll add a library called “DbConnector”. $ git submodule add https://github.com/chaconinc/DbConnector
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done. By default, submodules will add the subproject into a directory named the same as the repository, in this case “DbConnector”.
You can add a different path at the end of the command if you want it to go elsewhere. If you run git status at this point, you’ll notice a few things. $ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes to be committed:
  (use ""git reset HEAD <file>..."" to unstage)

	new file:   .gitmodules
	new file:   DbConnector First you should notice the new .gitmodules file.
This is a configuration file that stores the mapping between the project’s URL and the local subdirectory you’ve pulled it into: [submodule ""DbConnector""]
	path = DbConnector
	url = https://github.com/chaconinc/DbConnector If you have multiple submodules, you’ll have multiple entries in this file.
It’s important to note that this file is version-controlled with your other files, like your .gitignore file.
It’s pushed and pulled with the rest of your project.
This is how other people who clone this project know where to get the submodule projects from. Since the URL in the .gitmodules file is what other people will first try to clone/fetch from, make sure to use a URL that they can access if possible.
For example, if you use a different URL to push to than others would to pull from, use the one that others have access to.
You can overwrite this value locally with git config submodule.DbConnector.url PRIVATE_URL for your own use.
When applicable, a relative URL can be helpful. The other listing in the git status output is the project folder entry.
If you run git diff on that, you see something interesting: $ git diff --cached DbConnector
diff --git a/DbConnector b/DbConnector
new file mode 160000
index 0000000..c3f01dc
--- /dev/null
+++ b/DbConnector
@@ -0,0 +1 @@
+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc Although DbConnector is a subdirectory in your working directory, Git sees it as a submodule and doesn’t track its contents when you’re not in that directory.
Instead, Git sees it as a particular commit from that repository. If you want a little nicer diff output, you can pass the --submodule option to git diff. $ git diff --cached --submodule
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..71fc376
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule ""DbConnector""]
+       path = DbConnector
+       url = https://github.com/chaconinc/DbConnector
Submodule DbConnector 0000000...c3f01dc (new submodule) When you commit, you see something like this: $ git commit -am 'Add DbConnector module'
[master fb9093c] Add DbConnector module
 2 files changed, 4 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 DbConnector Notice the 160000 mode for the DbConnector entry.
That is a special mode in Git that basically means you’re recording a commit as a directory entry rather than a subdirectory or a file. Lastly, push these changes: $ git push origin master"
1.Getting Started,Cloning a Project with Submodules,"Here we’ll clone a project with a submodule in it.
When you clone such a project, by default you get the directories that contain submodules, but none of the files within them yet: $ git clone https://github.com/chaconinc/MainProject
Cloning into 'MainProject'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 14 (delta 1), reused 13 (delta 0)
Unpacking objects: 100% (14/14), done.
Checking connectivity... done.
$ cd MainProject
$ ls -la
total 16
drwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .
drwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..
drwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git
-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules
drwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector
-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile
drwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src
$ cd DbConnector/
$ ls
$ The DbConnector directory is there, but empty.
You must run two commands: git submodule init to initialize your local configuration file, and git submodule update to fetch all the data from that project and check out the appropriate commit listed in your superproject: $ git submodule init
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'
$ git submodule update
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc' Now your DbConnector subdirectory is at the exact state it was in when you committed earlier. There is another way to do this which is a little simpler, however.
If you pass --recurse-submodules to the git clone command, it will automatically initialize and update each submodule in the repository, including nested submodules if any of the submodules in the repository have submodules themselves. $ git clone --recurse-submodules https://github.com/chaconinc/MainProject
Cloning into 'MainProject'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 14 (delta 1), reused 13 (delta 0)
Unpacking objects: 100% (14/14), done.
Checking connectivity... done.
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc' If you already cloned the project and forgot --recurse-submodules, you can combine the git submodule init and git submodule update steps by running git submodule update --init.
To also initialize, fetch and checkout any nested submodules, you can use the foolproof git submodule update --init --recursive."
1.Getting Started,Working on a Project with Submodules,"Now we have a copy of a project with submodules in it and will collaborate with our teammates on both the main project and the submodule project. The simplest model of using submodules in a project would be if you were simply consuming a subproject and wanted to get updates from it from time to time but were not actually modifying anything in your checkout.
Let’s walk through a simple example there. If you want to check for new work in a submodule, you can go into the directory and run git fetch and git merge the upstream branch to update the local code. $ git fetch
From https://github.com/chaconinc/DbConnector
   c3f01dc..d0354fc  master     -> origin/master
$ git merge origin/master
Updating c3f01dc..d0354fc
Fast-forward
 scripts/connect.sh | 1 +
 src/db.c           | 1 +
 2 files changed, 2 insertions(+) Now if you go back into the main project and run git diff --submodule you can see that the submodule was updated and get a list of commits that were added to it.
If you don’t want to type --submodule every time you run git diff, you can set it as the default format by setting the diff.submodule config value to “log”. $ git config --global diff.submodule log
$ git diff
Submodule DbConnector c3f01dc..d0354fc:
  > more efficient db routine
  > better connection routine If you commit at this point then you will lock the submodule into having the new code when other people update. There is an easier way to do this as well, if you prefer to not manually fetch and merge in the subdirectory.
If you run git submodule update --remote, Git will go into your submodules and fetch and update for you. $ git submodule update --remote DbConnector
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   3f19983..d0354fc  master     -> origin/master
Submodule path 'DbConnector': checked out 'd0354fc054692d3906c85c3af05ddce39a1c0644' This command will by default assume that you want to update the checkout to the default branch of the remote submodule repository (the one pointed to by HEAD on the remote).
You can, however, set this to something different if you want.
For example, if you want to have the DbConnector submodule track that repository’s “stable” branch, you can set it in either your .gitmodules file (so everyone else also tracks it), or just in your local .git/config file.
Let’s set it in the .gitmodules file: $ git config -f .gitmodules submodule.DbConnector.branch stable

$ git submodule update --remote
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   27cf5d3..c87d55d  stable -> origin/stable
Submodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687' If you leave off the -f .gitmodules it will only make the change for you, but it probably makes more sense to track that information with the repository so everyone else does as well. When we run git status at this point, Git will show us that we have “new commits” on the submodule. $ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

  modified:   .gitmodules
  modified:   DbConnector (new commits)

no changes added to commit (use ""git add"" and/or ""git commit -a"") If you set the configuration setting status.submodulesummary, Git will also show you a short summary of changes to your submodules: $ git config status.submodulesummary 1

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   .gitmodules
	modified:   DbConnector (new commits)

Submodules changed but not updated:

* DbConnector c3f01dc...c87d55d (4):
  > catch non-null terminated lines At this point if you run git diff we can see both that we have modified our .gitmodules file and also that there are a number of commits that we’ve pulled down and are ready to commit to our submodule project. $ git diff
diff --git a/.gitmodules b/.gitmodules
index 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule ""DbConnector""]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
 Submodule DbConnector c3f01dc..c87d55d:
  > catch non-null terminated lines
  > more robust error handling
  > more efficient db routine
  > better connection routine This is pretty cool as we can actually see the log of commits that we’re about to commit to in our submodule.
Once committed, you can see this information after the fact as well when you run git log -p. $ git log -p --submodule
commit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Sep 17 16:37:02 2014 +0200

    updating DbConnector for bug fixes

diff --git a/.gitmodules b/.gitmodules
index 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule ""DbConnector""]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
Submodule DbConnector c3f01dc..c87d55d:
  > catch non-null terminated lines
  > more robust error handling
  > more efficient db routine
  > better connection routine Git will by default try to update all of your submodules when you run git submodule update --remote.
If you have a lot of them, you may want to pass the name of just the submodule you want to try to update. Let’s now step into the shoes of your collaborator, who has their own local clone of the MainProject repository.
Simply executing git pull to get your newly committed changes is not enough: $ git pull
From https://github.com/chaconinc/MainProject
   fb9093c..0a24cfc  master     -> origin/master
Fetching submodule DbConnector
From https://github.com/chaconinc/DbConnector
   c3f01dc..c87d55d  stable     -> origin/stable
Updating fb9093c..0a24cfc
Fast-forward
 .gitmodules         | 2 +-
 DbConnector         | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

$ git status
 On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git checkout -- <file>..."" to discard changes in working directory)

	modified:   DbConnector (new commits)

Submodules changed but not updated:

* DbConnector c87d55d...c3f01dc (4):
  < catch non-null terminated lines
  < more robust error handling
  < more efficient db routine
  < better connection routine

no changes added to commit (use ""git add"" and/or ""git commit -a"") By default, the git pull command recursively fetches submodules changes, as we can see in the output of the first command above.
However, it does not update the submodules.
This is shown by the output of the git status command, which shows the submodule is “modified”, and has “new commits”.
What’s more, the brackets showing the new commits point left (<), indicating that these commits are recorded in MainProject but are not present in the local DbConnector checkout.
To finalize the update, you need to run git submodule update: $ git submodule update --init --recursive
Submodule path 'vendor/plugins/demo': checked out '48679c6302815f6c76f1fe30625d795d9e55fc56'

$ git status
 On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working tree clean Note that to be on the safe side, you should run git submodule update with the --init flag in case the MainProject commits you just pulled added new submodules, and with the --recursive flag if any submodules have nested submodules. If you want to automate this process, you can add the --recurse-submodules flag to the git pull command (since Git 2.14).
This will make Git run git submodule update right after the pull, putting the submodules in the correct state.
Moreover, if you want to make Git always pull with --recurse-submodules, you can set the configuration option submodule.recurse to true (this works for git pull since Git 2.15).
This option will make Git use the --recurse-submodules flag for all commands that support it (except clone). There is a special situation that can happen when pulling superproject updates: it could be that the upstream repository has changed the URL of the submodule in the .gitmodules file in one of the commits you pull.
This can happen for example if the submodule project changes its hosting platform.
In that case, it is possible for git pull --recurse-submodules, or git submodule update, to fail if the superproject references a submodule commit that is not found in the submodule remote locally configured in your repository.
In order to remedy this situation, the git submodule sync command is required: # copy the new URL to your local config
$ git submodule sync --recursive
# update the submodule from the new URL
$ git submodule update --init --recursive It’s quite likely that if you’re using submodules, you’re doing so because you really want to work on the code in the submodule at the same time as you’re working on the code in the main project (or across several submodules).
Otherwise you would probably instead be using a simpler dependency management system (such as Maven or Rubygems). So now let’s go through an example of making changes to the submodule at the same time as the main project and committing and publishing those changes at the same time. So far, when we’ve run the git submodule update command to fetch changes from the submodule repositories, Git would get the changes and update the files in the subdirectory but will leave the sub-repository in what’s called a “detached HEAD” state.
This means that there is no local working branch (like master, for example) tracking changes.
With no working branch tracking changes, that means even if you commit changes to the submodule, those changes will quite possibly be lost the next time you run git submodule update.
You have to do some extra steps if you want changes in a submodule to be tracked. In order to set up your submodule to be easier to go in and hack on, you need to do two things.
You need to go into each submodule and check out a branch to work on.
Then you need to tell Git what to do if you have made changes and later git submodule update --remote pulls in new work from upstream.
The options are that you can merge them into your local work, or you can try to rebase your local work on top of the new changes. First of all, let’s go into our submodule directory and check out a branch. $ cd DbConnector/
$ git checkout stable
Switched to branch 'stable' Let’s try updating our submodule with the “merge” option.
To specify it manually, we can just add the --merge option to our update call.
Here we’ll see that there was a change on the server for this submodule and it gets merged in. $ cd ..
$ git submodule update --remote --merge
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   c87d55d..92c7337  stable     -> origin/stable
Updating c87d55d..92c7337
Fast-forward
 src/main.c | 1 +
 1 file changed, 1 insertion(+)
Submodule path 'DbConnector': merged in '92c7337b30ef9e0893e758dac2459d07362ab5ea' If we go into the DbConnector directory, we have the new changes already merged into our local stable branch.
Now let’s see what happens when we make our own local change to the library and someone else pushes another change to the upstream at the same time. $ cd DbConnector/
$ vim src/db.c
$ git commit -am 'Unicode support'
[stable f906e16] Unicode support
 1 file changed, 1 insertion(+) Now if we update our submodule we can see what happens when we have made a local change and upstream also has a change we need to incorporate. $ cd ..
$ git submodule update --remote --rebase
First, rewinding head to replay your work on top of it...
Applying: Unicode support
Submodule path 'DbConnector': rebased into '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94' If you forget the --rebase or --merge, Git will just update the submodule to whatever is on the server and reset your project to a detached HEAD state. $ git submodule update --remote
Submodule path 'DbConnector': checked out '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94' If this happens, don’t worry, you can simply go back into the directory and check out your branch again (which will still contain your work) and merge or rebase origin/stable (or whatever remote branch you want) manually. If you haven’t committed your changes in your submodule and you run a submodule update that would cause issues, Git will fetch the changes but not overwrite unsaved work in your submodule directory. $ git submodule update --remote
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 4 (delta 0), reused 4 (delta 0)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   5d60ef9..c75e92a  stable     -> origin/stable
error: Your local changes to the following files would be overwritten by checkout:
	scripts/setup.sh
Please, commit your changes or stash them before you can switch branches.
Aborting
Unable to checkout 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector' If you made changes that conflict with something changed upstream, Git will let you know when you run the update. $ git submodule update --remote --merge
Auto-merging scripts/setup.sh
CONFLICT (content): Merge conflict in scripts/setup.sh
Recorded preimage for 'scripts/setup.sh'
Automatic merge failed; fix conflicts and then commit the result.
Unable to merge 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector' You can go into the submodule directory and fix the conflict just as you normally would. Now we have some changes in our submodule directory.
Some of these were brought in from upstream by our updates and others were made locally and aren’t available to anyone else yet as we haven’t pushed them yet. $ git diff
Submodule DbConnector c87d55d..82d2ad3:
  > Merge from origin/stable
  > Update setup script
  > Unicode support
  > Remove unnecessary method
  > Add new option for conn pooling If we commit in the main project and push it up without pushing the submodule changes up as well, other people who try to check out our changes are going to be in trouble since they will have no way to get the submodule changes that are depended on.
Those changes will only exist on our local copy. In order to make sure this doesn’t happen, you can ask Git to check that all your submodules have been pushed properly before pushing the main project.
The git push command takes the --recurse-submodules argument which can be set to either “check” or “on-demand”.
The “check” option will make push simply fail if any of the committed submodule changes haven’t been pushed. $ git push --recurse-submodules=check
The following submodule paths contain changes that can
not be found on any remote:
  DbConnector

Please try

	git push --recurse-submodules=on-demand

or cd to the path and use

	git push

to push them to a remote. As you can see, it also gives us some helpful advice on what we might want to do next.
The simple option is to go into each submodule and manually push to the remotes to make sure they’re externally available and then try this push again.
If you want the “check” behavior to happen for all pushes, you can make this behavior the default by doing git config push.recurseSubmodules check. The other option is to use the “on-demand” value, which will try to do this for you. $ git push --recurse-submodules=on-demand
Pushing submodule 'DbConnector'
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 3), reused 0 (delta 0)
To https://github.com/chaconinc/DbConnector
   c75e92a..82d2ad3  stable -> stable
Counting objects: 2, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done.
Total 2 (delta 1), reused 0 (delta 0)
To https://github.com/chaconinc/MainProject
   3d6d338..9a377d1  master -> master As you can see there, Git went into the DbConnector module and pushed it before pushing the main project.
If that submodule push fails for some reason, the main project push will also fail.
You can make this behavior the default by doing git config push.recurseSubmodules on-demand. If you change a submodule reference at the same time as someone else, you may run into some problems.
That is, if the submodule histories have diverged and are committed to diverging branches in a superproject, it may take a bit of work for you to fix. If one of the commits is a direct ancestor of the other (a fast-forward merge), then Git will simply choose the latter for the merge, so that works fine. Git will not attempt even a trivial merge for you, however.
If the submodule commits diverge and need to be merged, you will get something that looks like this: $ git pull
remote: Counting objects: 2, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 2 (delta 1), reused 2 (delta 1)
Unpacking objects: 100% (2/2), done.
From https://github.com/chaconinc/MainProject
   9a377d1..eb974f8  master     -> origin/master
Fetching submodule DbConnector
warning: Failed to merge submodule DbConnector (merge following commits not found)
Auto-merging DbConnector
CONFLICT (submodule): Merge conflict in DbConnector
Automatic merge failed; fix conflicts and then commit the result. So basically what has happened here is that Git has figured out that the two branches record points in the submodule’s history that are divergent and need to be merged.
It explains it as “merge following commits not found”, which is confusing but we’ll explain why that is in a bit. To solve the problem, you need to figure out what state the submodule should be in.
Strangely, Git doesn’t really give you much information to help out here, not even the SHA-1s of the commits of both sides of the history.
Fortunately, it’s simple to figure out.
If you run git diff you can get the SHA-1s of the commits recorded in both branches you were trying to merge. $ git diff
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector So, in this case, eb41d76 is the commit in our submodule that we had and c771610 is the commit that upstream had.
If we go into our submodule directory, it should already be on eb41d76 as the merge would not have touched it.
If for whatever reason it’s not, you can simply create and checkout a branch pointing to it. What is important is the SHA-1 of the commit from the other side.
This is what you’ll have to merge in and resolve.
You can either just try the merge with the SHA-1 directly, or you can create a branch for it and then try to merge that in.
We would suggest the latter, even if only to make a nicer merge commit message. So, we will go into our submodule directory, create a branch named “try-merge” based on that second SHA-1 from git diff, and manually merge. $ cd DbConnector

$ git rev-parse HEAD
eb41d764bccf88be77aced643c13a7fa86714135

$ git branch try-merge c771610

$ git merge try-merge
Auto-merging src/main.c
CONFLICT (content): Merge conflict in src/main.c
Recorded preimage for 'src/main.c'
Automatic merge failed; fix conflicts and then commit the result. We got an actual merge conflict here, so if we resolve that and commit it, then we can simply update the main project with the result. $ vim src/main.c (1)
$ git add src/main.c
$ git commit -am 'merged our changes'
Recorded resolution for 'src/main.c'.
[master 9fd905e] merged our changes

$ cd .. (2)
$ git diff (3)
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector
@@@ -1,1 -1,1 +1,1 @@@
- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135
 -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d
++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a
$ git add DbConnector (4)

$ git commit -m ""Merge Tom's Changes"" (5)
[master 10d2c60] Merge Tom's Changes First we resolve the conflict. Then we go back to the main project directory. We can check the SHA-1s again. Resolve the conflicted submodule entry. Commit our merge. It can be a bit confusing, but it’s really not very hard. Interestingly, there is another case that Git handles.
If a merge commit exists in the submodule directory that contains both commits in its history, Git will suggest it to you as a possible solution.
It sees that at some point in the submodule project, someone merged branches containing these two commits, so maybe you’ll want that one. This is why the error message from before was “merge following commits not found”, because it could not do this.
It’s confusing because who would expect it to try to do this? If it does find a single acceptable merge commit, you’ll see something like this: $ git merge origin/master
warning: Failed to merge submodule DbConnector (not fast-forward)
Found a possible merge resolution for the submodule:
 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changes
If this is correct simply add it to the index for example
by using:

  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a ""DbConnector""

which will accept this suggestion.
Auto-merging DbConnector
CONFLICT (submodule): Merge conflict in DbConnector
Automatic merge failed; fix conflicts and then commit the result. The suggested command Git is providing will update the index as though you had run git add (which clears the conflict), then commit.
You probably shouldn’t do this though.
You can just as easily go into the submodule directory, see what the difference is, fast-forward to this commit, test it properly, and then commit it. $ cd DbConnector/
$ git merge 9fd905e
Updating eb41d76..9fd905e
Fast-forward

$ cd ..
$ git add DbConnector
$ git commit -am 'Fast forward to a common submodule child' This accomplishes the same thing, but at least this way you can verify that it works and you have the code in your submodule directory when you’re done."
1.Getting Started,Submodule Tips,"There are a few things you can do to make working with submodules a little easier. There is a foreach submodule command to run some arbitrary command in each submodule.
This can be really helpful if you have a number of submodules in the same project. For example, let’s say we want to start a new feature or do a bugfix and we have work going on in several submodules.
We can easily stash all the work in all our submodules. $ git submodule foreach 'git stash'
Entering 'CryptoLibrary'
No local changes to save
Entering 'DbConnector'
Saved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stable
HEAD is now at 82d2ad3 Merge from origin/stable Then we can create a new branch and switch to it in all our submodules. $ git submodule foreach 'git checkout -b featureA'
Entering 'CryptoLibrary'
Switched to a new branch 'featureA'
Entering 'DbConnector'
Switched to a new branch 'featureA' You get the idea.
One really useful thing you can do is produce a nice unified diff of what is changed in your main project and all your subprojects as well. $ git diff; git submodule foreach 'git diff'
Submodule DbConnector contains modified content
diff --git a/src/main.c b/src/main.c
index 210f1ae..1f0acdc 100644
--- a/src/main.c
+++ b/src/main.c
@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)

      commit_pager_choice();

+     url = url_decode(url_orig);
+
      /* build alias_argv */
      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));
      alias_argv[0] = alias_string + 1;
Entering 'DbConnector'
diff --git a/src/db.c b/src/db.c
index 1aaefb6..5297645 100644
--- a/src/db.c
+++ b/src/db.c
@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)
        return url_decode_internal(&url, len, NULL, &out, 0);
 }

+char *url_decode(const char *url)
+{
+       return url_decode_mem(url, strlen(url));
+}
+
 char *url_decode_parameter_name(const char **query)
 {
        struct strbuf out = STRBUF_INIT; Here we can see that we’re defining a function in a submodule and calling it in the main project.
This is obviously a simplified example, but hopefully it gives you an idea of how this may be useful. You may want to set up some aliases for some of these commands as they can be quite long and you can’t set configuration options for most of them to make them defaults.
We covered setting up Git aliases in Git Aliases, but here is an example of what you may want to set up if you plan on working with submodules in Git a lot. $ git config alias.sdiff '!'""git diff && git submodule foreach 'git diff'""
$ git config alias.spush 'push --recurse-submodules=on-demand'
$ git config alias.supdate 'submodule update --remote --merge' This way you can simply run git supdate when you want to update your submodules, or git spush to push with submodule dependency checking."
1.Getting Started,1.Getting Started,"If you use the SSH transport for connecting to remotes, it’s possible for you to have a key without a passphrase, which allows you to securely transfer data without typing in your username and password.
However, this isn’t possible with the HTTP protocols — every connection needs a username and password.
This gets even harder for systems with two-factor authentication, where the token you use for a password is randomly generated and unpronounceable. Fortunately, Git has a credentials system that can help with this.
Git has a few options provided in the box: The default is not to cache at all.
Every connection will prompt you for your username and password. The “cache” mode keeps credentials in memory for a certain period of time.
None of the passwords are ever stored on disk, and they are purged from the cache after 15 minutes. The “store” mode saves the credentials to a plain-text file on disk, and they never expire.
This means that until you change your password for the Git host, you won’t ever have to type in your credentials again.
The downside of this approach is that your passwords are stored in cleartext in a plain file in your home directory. If you’re using macOS, Git comes with an “osxkeychain” mode, which caches credentials in the secure keychain that’s attached to your system account.
This method stores the credentials on disk, and they never expire, but they’re encrypted with the same system that stores HTTPS certificates and Safari auto-fills. If you’re using Windows, you can enable the Git Credential Manager feature when installing Git for Windows or separately install the latest GCM as a standalone service.
This is similar to the “osxkeychain” helper described above, but uses the Windows Credential Store to control sensitive information.
It can also serve credentials to WSL1 or WSL2.
See GCM Install Instructions for more information. You can choose one of these methods by setting a Git configuration value: $ git config --global credential.helper cache Some of these helpers have options.
The “store” helper can take a --file <path> argument, which customizes where the plain-text file is saved (the default is ~/.git-credentials).
The “cache” helper accepts the --timeout <seconds> option, which changes the amount of time its daemon is kept running (the default is “900”, or 15 minutes).
Here’s an example of how you’d configure the “store” helper with a custom file name: $ git config --global credential.helper 'store --file ~/.my-credentials' Git even allows you to configure several helpers.
When looking for credentials for a particular host, Git will query them in order, and stop after the first answer is provided.
When saving credentials, Git will send the username and password to all of the helpers in the list, and they can choose what to do with them.
Here’s what a .gitconfig would look like if you had a credentials file on a thumb drive, but wanted to use the in-memory cache to save some typing if the drive isn’t plugged in: [credential]
    helper = store --file /mnt/thumbdrive/.git-credentials
    helper = cache --timeout 30000"
1.Getting Started,Under the Hood,"How does this all work?
Git’s root command for the credential-helper system is git credential, which takes a command as an argument, and then more input through stdin. This might be easier to understand with an example.
Let’s say that a credential helper has been configured, and the helper has stored credentials for mygithost.
Here’s a session that uses the “fill” command, which is invoked when Git is trying to find credentials for a host: $ git credential fill (1)
protocol=https (2)
host=mygithost
(3)
protocol=https (4)
host=mygithost
username=bob
password=s3cre7
$ git credential fill (5)
protocol=https
host=unknownhost

Username for 'https://unknownhost': bob
Password for 'https://bob@unknownhost':
protocol=https
host=unknownhost
username=bob
password=s3cre7 This is the command line that initiates the interaction. Git-credential is then waiting for input on stdin.
We provide it with the things we know: the protocol and hostname. A blank line indicates that the input is complete, and the credential system should answer with what it knows. Git-credential then takes over, and writes to stdout with the bits of information it found. If credentials are not found, Git asks the user for the username and password, and provides them back to the invoking stdout (here they’re attached to the same console). The credential system is actually invoking a program that’s separate from Git itself; which one and how depends on the credential.helper configuration value.
There are several forms it can take: foo Runs git-credential-foo foo -a --opt=bcd Runs git-credential-foo -a --opt=bcd /absolute/path/foo -xyz Runs /absolute/path/foo -xyz !f() { echo ""password=s3cre7""; }; f Code after ! evaluated in shell So the helpers described above are actually named git-credential-cache, git-credential-store, and so on, and we can configure them to take command-line arguments.
The general form for this is “git-credential-foo [args] <action>.”
The stdin/stdout protocol is the same as git-credential, but they use a slightly different set of actions: get is a request for a username/password pair. store is a request to save a set of credentials in this helper’s memory. erase purge the credentials for the given properties from this helper’s memory. For the store and erase actions, no response is required (Git ignores it anyway).
For the get action, however, Git is very interested in what the helper has to say.
If the helper doesn’t know anything useful, it can simply exit with no output, but if it does know, it should augment the provided information with the information it has stored.
The output is treated like a series of assignment statements; anything provided will replace what Git already knows. Here’s the same example from above, but skipping git-credential and going straight for git-credential-store: $ git credential-store --file ~/git.store store (1)
protocol=https
host=mygithost
username=bob
password=s3cre7
$ git credential-store --file ~/git.store get (2)
protocol=https
host=mygithost

username=bob (3)
password=s3cre7 Here we tell git-credential-store to save some credentials: the username “bob” and the password “s3cre7” are to be used when https://mygithost is accessed. Now we’ll retrieve those credentials.
We provide the parts of the connection we already know (https://mygithost), and an empty line. git-credential-store replies with the username and password we stored above. Here’s what the ~/git.store file looks like: https://bob:s3cre7@mygithost It’s just a series of lines, each of which contains a credential-decorated URL.
The osxkeychain and wincred helpers use the native format of their backing stores, while cache uses its own in-memory format (which no other process can read)."
1.Getting Started,1.Getting Started,"So far, we’ve covered the basics of how Git works and how to use it, and we’ve introduced a number of tools that Git provides to help you use it easily and efficiently.
In this chapter, we’ll see how you can make Git operate in a more customized fashion, by introducing several important configuration settings and the hooks system.
With these tools, it’s easy to get Git to work exactly the way you, your company, or your group needs it to. As you read briefly in Getting Started, you can specify Git configuration settings with the git config command.
One of the first things you did was set up your name and email address: $ git config --global user.name ""John Doe""
$ git config --global user.email johndoe@example.com Now you’ll learn a few of the more interesting options that you can set in this manner to customize your Git usage. First, a quick review: Git uses a series of configuration files to determine non-default behavior that you may want.
The first place Git looks for these values is in the system-wide [path]/etc/gitconfig file, which contains settings that are applied to every user on the system and all of their repositories.
If you pass the option --system to git config, it reads and writes from this file specifically. The next place Git looks is the ~/.gitconfig (or ~/.config/git/config) file, which is specific to each user.
You can make Git read and write to this file by passing the --global option. Finally, Git looks for configuration values in the configuration file in the Git directory (.git/config) of whatever repository you’re currently using.
These values are specific to that single repository, and represent passing the --local option to git config.
If you don’t specify which level you want to work with, this is the default. Each of these “levels” (system, global, local) overwrites values in the previous level, so values in .git/config trump those in [path]/etc/gitconfig, for instance. Git’s configuration files are plain-text, so you can also set these values by manually editing the file and inserting the correct syntax.
It’s generally easier to run the git config command, though."
1.Getting Started,Basic Client Configuration,"The configuration options recognized by Git fall into two categories: client-side and server-side.
The majority of the options are client-side — configuring your personal working preferences.
Many, many configuration options are supported, but a large fraction of them are useful only in certain edge cases; we’ll cover just the most common and useful options here.
If you want to see a list of all the options your version of Git recognizes, you can run: $ man git-config This command lists all the available options in quite a bit of detail.
You can also find this reference material at https://git-scm.com/docs/git-config. For advanced use cases you may want to look up ""Conditional includes"" in the documentation mentioned above. By default, Git uses whatever you’ve set as your default text editor via one of the shell environment variables VISUAL or EDITOR, or else falls back to the vi editor to create and edit your commit and tag messages.
To change that default to something else, you can use the core.editor setting: $ git config --global core.editor emacs Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages. If you set this to the path of a file on your system, Git will use that file as the default initial message when you commit.
The value in creating a custom commit template is that you can use it to remind yourself (or others) of the proper format and style when creating a commit message. For instance, consider a template file at ~/.gitmessage.txt that looks like this: Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X] Note how this commit template reminds the committer to keep the subject line short (for the sake of git log --oneline output), to add further detail under that, and to refer to an issue or bug tracker ticket number if one exists. To tell Git to use it as the default message that appears in your editor when you run git commit, set the commit.template configuration value: $ git config --global commit.template ~/.gitmessage.txt
$ git commit Then, your editor will open to something like this for your placeholder commit message when you commit: Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD <file>..."" to unstage)
#
# modified:   lib/test.rb
#
~
~
"".git/COMMIT_EDITMSG"" 14L, 297C If your team has a commit-message policy, then putting a template for that policy on your system and configuring Git to use it by default can help increase the chance of that policy being followed regularly. This setting determines which pager is used when Git pages output such as log and diff.
You can set it to more or to your favorite pager (by default, it’s less), or you can turn it off by setting it to a blank string: $ git config --global core.pager '' If you run that, Git will print the entire output of all commands, no matter how long they are. If you’re making signed annotated tags (as discussed in Signing Your Work), setting your GPG signing key as a configuration setting makes things easier.
Set your key ID like so: $ git config --global user.signingkey <gpg-key-id> Now, you can sign tags without having to specify your key every time with the git tag command: $ git tag -s <tag-name> You can put patterns in your project’s .gitignore file to have Git not see them as untracked files or try to stage them when you run git add on them, as discussed in Ignoring Files. But sometimes you want to ignore certain files for all repositories that you work with.
If your computer is running macOS, you’re probably familiar with .DS_Store files.
If your preferred editor is Emacs or Vim, you know about filenames that end with a ~ or .swp. This setting lets you write a kind of global .gitignore file.
If you create a ~/.gitignore_global file with these contents: *~
.*.swp
.DS_Store …and you run git config --global core.excludesfile ~/.gitignore_global, Git will never again bother you about those files. If you mistype a command, it shows you something like this: $ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

The most similar command is
    checkout Git helpfully tries to figure out what you meant, but it still refuses to do it.
If you set help.autocorrect to 1, Git will actually run this command for you: $ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically... Note that “0.1 seconds” business.
help.autocorrect is actually an integer which represents tenths of a second.
So if you set it to 50, Git will give you 5 seconds to change your mind before executing the autocorrected command."
1.Getting Started,Colors in Git,"Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help you set the coloring to your preference. Git automatically colors most of its output, but there’s a master switch if you don’t like this behavior.
To turn off all Git’s colored terminal output, do this: $ git config --global color.ui false The default setting is auto, which colors output when it’s going straight to a terminal, but omits the color-control codes when the output is redirected to a pipe or a file. You can also set it to always to ignore the difference between terminals and pipes.
You’ll rarely want this; in most scenarios, if you want color codes in your redirected output, you can instead pass a --color flag to the Git command to force it to use color codes.
The default setting is almost always what you’ll want. If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.
Each of these can be set to true, false, or always: color.branch
color.diff
color.interactive
color.status In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.
For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run: $ git config --global color.diff.meta ""blue black bold"" You can set the color to any of the following values: normal, black, red, green, yellow, blue, magenta, cyan, or white.
If you want an attribute like bold in the previous example, you can choose from bold, dim, ul (underline), blink, and reverse (swap foreground and background)."
1.Getting Started,External Merge and Diff Tools,"Although Git has an internal implementation of diff, which is what we’ve been showing in this book, you can set up an external tool instead.
You can also set up a graphical merge-conflict-resolution tool instead of having to resolve conflicts manually.
We’ll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it’s a nice graphical tool and it’s free. If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.
We’ll use path names in the examples that work on macOS and Linux systems; for Windows, you’ll have to change /usr/local/bin to an executable path in your environment. To begin, download P4Merge from Perforce.
Next, you’ll set up external wrapper scripts to run your commands.
We’ll use the macOS path for the executable; in other systems, it will be where your p4merge binary is installed.
Set up a merge wrapper script named extMerge that calls your binary with all the arguments provided: $ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $* The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program: path old-file old-hex old-mode new-file new-hex new-mode Because you only want the old-file and new-file arguments, you use the wrapper script to pass the ones you need. $ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge ""$2"" ""$5"" You also need to make sure these tools are executable: $ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff Now you can set up your config file to use your custom merge resolution and diff tools.
This takes a number of custom settings: merge.tool to tell Git what strategy to use, mergetool.<tool>.cmd to specify how to run the command, mergetool.<tool>.trustExitCode to tell Git if the exit code of that program indicates a successful merge resolution or not, and diff.external to tell Git what command to run for diffs.
So, you can either run four config commands: $ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff or you can edit your ~/.gitconfig file to add these lines: [merge]
  tool = extMerge
[mergetool ""extMerge""]
  cmd = extMerge ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""
  trustExitCode = false
[diff]
  external = extDiff After all this is set, if you run diff commands such as this: $ git diff 32d1776b1^ 32d1776b1 Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like this: If you try to merge two branches and subsequently have merge conflicts, you can run the command git mergetool; it starts P4Merge to let you resolve the conflicts through that GUI tool. The nice thing about this wrapper setup is that you can change your diff and merge tools easily.
For example, to change your extDiff and extMerge tools to run the KDiff3 tool instead, all you have to do is edit your extMerge file: $ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $* Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution. Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.
To see a list of the tools it supports, try this: $ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail. If you’re not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run: $ git config --global merge.tool kdiff3 If you run this instead of setting up the extMerge and extDiff files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs."
1.Getting Started,Formatting and Whitespace,"Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It’s very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues. If you’re programming on Windows and working with people who are not (or vice-versa), you’ll probably run into line-ending issues at some point.
This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas macOS and Linux systems use only the linefeed character.
This is a subtle but incredibly annoying fact of cross-platform work; many editors on Windows silently replace existing LF-style line endings with CRLF, or insert both line-ending characters when the user hits the enter key. Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem.
You can turn on this functionality with the core.autocrlf setting.
If you’re on a Windows machine, set it to true — this converts LF endings into CRLF when you check out code: $ git config --global core.autocrlf true If you’re on a Linux or macOS system that uses LF line endings, then you don’t want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting core.autocrlf to input: $ git config --global core.autocrlf input This setup should leave you with CRLF endings in Windows checkouts, but LF endings on macOS and Linux systems and in the repository. If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false: $ git config --global core.autocrlf false Git comes preset to detect and fix some whitespace issues.
It can look for six primary whitespace issues — three are enabled by default and can be turned off, and three are disabled by default but can be activated. The three that are turned on by default are blank-at-eol, which looks for spaces at the end of a line; blank-at-eof, which notices blank lines at the end of a file; and space-before-tab, which looks for spaces before tabs at the beginning of a line. The three that are disabled by default but can be turned on are indent-with-non-tab, which looks for lines that begin with spaces instead of tabs (and is controlled by the tabwidth option); tab-in-indent, which watches for tabs in the indentation portion of a line; and cr-at-eol, which tells Git that carriage returns at the end of lines are OK. You can tell Git which of these you want enabled by setting core.whitespace to the values you want on or off, separated by commas.
You can disable an option by prepending a - in front of its name, or use the default value by leaving it out of the setting string entirely.
For example, if you want all but space-before-tab to be set, you can do this (with trailing-space being a short-hand to cover both blank-at-eol and blank-at-eof): $ git config --global core.whitespace \
    trailing-space,-space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol Or you can specify the customizing part only: $ git config --global core.whitespace \
    -space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol Git will detect these issues when you run a git diff command and try to color them so you can possibly fix them before you commit.
It will also use these values to help you when you apply patches with git apply.
When you’re applying patches, you can ask Git to warn you if it’s applying patches with the specified whitespace issues: $ git apply --whitespace=warn <patch> Or you can have Git try to automatically fix the issue before applying the patch: $ git apply --whitespace=fix <patch> These options apply to the git rebase command as well.
If you’ve committed whitespace issues but haven’t yet pushed upstream, you can run git rebase --whitespace=fix to have Git automatically fix whitespace issues as it’s rewriting the patches."
1.Getting Started,1.Getting Started,"So far, we’ve covered the basics of how Git works and how to use it, and we’ve introduced a number of tools that Git provides to help you use it easily and efficiently.
In this chapter, we’ll see how you can make Git operate in a more customized fashion, by introducing several important configuration settings and the hooks system.
With these tools, it’s easy to get Git to work exactly the way you, your company, or your group needs it to. As you read briefly in Getting Started, you can specify Git configuration settings with the git config command.
One of the first things you did was set up your name and email address: $ git config --global user.name ""John Doe""
$ git config --global user.email johndoe@example.com Now you’ll learn a few of the more interesting options that you can set in this manner to customize your Git usage. First, a quick review: Git uses a series of configuration files to determine non-default behavior that you may want.
The first place Git looks for these values is in the system-wide [path]/etc/gitconfig file, which contains settings that are applied to every user on the system and all of their repositories.
If you pass the option --system to git config, it reads and writes from this file specifically. The next place Git looks is the ~/.gitconfig (or ~/.config/git/config) file, which is specific to each user.
You can make Git read and write to this file by passing the --global option. Finally, Git looks for configuration values in the configuration file in the Git directory (.git/config) of whatever repository you’re currently using.
These values are specific to that single repository, and represent passing the --local option to git config.
If you don’t specify which level you want to work with, this is the default. Each of these “levels” (system, global, local) overwrites values in the previous level, so values in .git/config trump those in [path]/etc/gitconfig, for instance. Git’s configuration files are plain-text, so you can also set these values by manually editing the file and inserting the correct syntax.
It’s generally easier to run the git config command, though."
1.Getting Started,Basic Client Configuration,"The configuration options recognized by Git fall into two categories: client-side and server-side.
The majority of the options are client-side — configuring your personal working preferences.
Many, many configuration options are supported, but a large fraction of them are useful only in certain edge cases; we’ll cover just the most common and useful options here.
If you want to see a list of all the options your version of Git recognizes, you can run: $ man git-config This command lists all the available options in quite a bit of detail.
You can also find this reference material at https://git-scm.com/docs/git-config. For advanced use cases you may want to look up ""Conditional includes"" in the documentation mentioned above. By default, Git uses whatever you’ve set as your default text editor via one of the shell environment variables VISUAL or EDITOR, or else falls back to the vi editor to create and edit your commit and tag messages.
To change that default to something else, you can use the core.editor setting: $ git config --global core.editor emacs Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages. If you set this to the path of a file on your system, Git will use that file as the default initial message when you commit.
The value in creating a custom commit template is that you can use it to remind yourself (or others) of the proper format and style when creating a commit message. For instance, consider a template file at ~/.gitmessage.txt that looks like this: Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X] Note how this commit template reminds the committer to keep the subject line short (for the sake of git log --oneline output), to add further detail under that, and to refer to an issue or bug tracker ticket number if one exists. To tell Git to use it as the default message that appears in your editor when you run git commit, set the commit.template configuration value: $ git config --global commit.template ~/.gitmessage.txt
$ git commit Then, your editor will open to something like this for your placeholder commit message when you commit: Subject line (try to keep under 50 characters)

Multi-line description of commit,
feel free to be detailed.

[Ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD <file>..."" to unstage)
#
# modified:   lib/test.rb
#
~
~
"".git/COMMIT_EDITMSG"" 14L, 297C If your team has a commit-message policy, then putting a template for that policy on your system and configuring Git to use it by default can help increase the chance of that policy being followed regularly. This setting determines which pager is used when Git pages output such as log and diff.
You can set it to more or to your favorite pager (by default, it’s less), or you can turn it off by setting it to a blank string: $ git config --global core.pager '' If you run that, Git will print the entire output of all commands, no matter how long they are. If you’re making signed annotated tags (as discussed in Signing Your Work), setting your GPG signing key as a configuration setting makes things easier.
Set your key ID like so: $ git config --global user.signingkey <gpg-key-id> Now, you can sign tags without having to specify your key every time with the git tag command: $ git tag -s <tag-name> You can put patterns in your project’s .gitignore file to have Git not see them as untracked files or try to stage them when you run git add on them, as discussed in Ignoring Files. But sometimes you want to ignore certain files for all repositories that you work with.
If your computer is running macOS, you’re probably familiar with .DS_Store files.
If your preferred editor is Emacs or Vim, you know about filenames that end with a ~ or .swp. This setting lets you write a kind of global .gitignore file.
If you create a ~/.gitignore_global file with these contents: *~
.*.swp
.DS_Store …and you run git config --global core.excludesfile ~/.gitignore_global, Git will never again bother you about those files. If you mistype a command, it shows you something like this: $ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

The most similar command is
    checkout Git helpfully tries to figure out what you meant, but it still refuses to do it.
If you set help.autocorrect to 1, Git will actually run this command for you: $ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically... Note that “0.1 seconds” business.
help.autocorrect is actually an integer which represents tenths of a second.
So if you set it to 50, Git will give you 5 seconds to change your mind before executing the autocorrected command."
1.Getting Started,Colors in Git,"Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help you set the coloring to your preference. Git automatically colors most of its output, but there’s a master switch if you don’t like this behavior.
To turn off all Git’s colored terminal output, do this: $ git config --global color.ui false The default setting is auto, which colors output when it’s going straight to a terminal, but omits the color-control codes when the output is redirected to a pipe or a file. You can also set it to always to ignore the difference between terminals and pipes.
You’ll rarely want this; in most scenarios, if you want color codes in your redirected output, you can instead pass a --color flag to the Git command to force it to use color codes.
The default setting is almost always what you’ll want. If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.
Each of these can be set to true, false, or always: color.branch
color.diff
color.interactive
color.status In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.
For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run: $ git config --global color.diff.meta ""blue black bold"" You can set the color to any of the following values: normal, black, red, green, yellow, blue, magenta, cyan, or white.
If you want an attribute like bold in the previous example, you can choose from bold, dim, ul (underline), blink, and reverse (swap foreground and background)."
1.Getting Started,External Merge and Diff Tools,"Although Git has an internal implementation of diff, which is what we’ve been showing in this book, you can set up an external tool instead.
You can also set up a graphical merge-conflict-resolution tool instead of having to resolve conflicts manually.
We’ll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it’s a nice graphical tool and it’s free. If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.
We’ll use path names in the examples that work on macOS and Linux systems; for Windows, you’ll have to change /usr/local/bin to an executable path in your environment. To begin, download P4Merge from Perforce.
Next, you’ll set up external wrapper scripts to run your commands.
We’ll use the macOS path for the executable; in other systems, it will be where your p4merge binary is installed.
Set up a merge wrapper script named extMerge that calls your binary with all the arguments provided: $ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $* The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program: path old-file old-hex old-mode new-file new-hex new-mode Because you only want the old-file and new-file arguments, you use the wrapper script to pass the ones you need. $ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge ""$2"" ""$5"" You also need to make sure these tools are executable: $ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff Now you can set up your config file to use your custom merge resolution and diff tools.
This takes a number of custom settings: merge.tool to tell Git what strategy to use, mergetool.<tool>.cmd to specify how to run the command, mergetool.<tool>.trustExitCode to tell Git if the exit code of that program indicates a successful merge resolution or not, and diff.external to tell Git what command to run for diffs.
So, you can either run four config commands: $ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff or you can edit your ~/.gitconfig file to add these lines: [merge]
  tool = extMerge
[mergetool ""extMerge""]
  cmd = extMerge ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""
  trustExitCode = false
[diff]
  external = extDiff After all this is set, if you run diff commands such as this: $ git diff 32d1776b1^ 32d1776b1 Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like this: If you try to merge two branches and subsequently have merge conflicts, you can run the command git mergetool; it starts P4Merge to let you resolve the conflicts through that GUI tool. The nice thing about this wrapper setup is that you can change your diff and merge tools easily.
For example, to change your extDiff and extMerge tools to run the KDiff3 tool instead, all you have to do is edit your extMerge file: $ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $* Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution. Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.
To see a list of the tools it supports, try this: $ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail. If you’re not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run: $ git config --global merge.tool kdiff3 If you run this instead of setting up the extMerge and extDiff files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs."
1.Getting Started,Formatting and Whitespace,"Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It’s very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues. If you’re programming on Windows and working with people who are not (or vice-versa), you’ll probably run into line-ending issues at some point.
This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas macOS and Linux systems use only the linefeed character.
This is a subtle but incredibly annoying fact of cross-platform work; many editors on Windows silently replace existing LF-style line endings with CRLF, or insert both line-ending characters when the user hits the enter key. Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem.
You can turn on this functionality with the core.autocrlf setting.
If you’re on a Windows machine, set it to true — this converts LF endings into CRLF when you check out code: $ git config --global core.autocrlf true If you’re on a Linux or macOS system that uses LF line endings, then you don’t want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting core.autocrlf to input: $ git config --global core.autocrlf input This setup should leave you with CRLF endings in Windows checkouts, but LF endings on macOS and Linux systems and in the repository. If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false: $ git config --global core.autocrlf false Git comes preset to detect and fix some whitespace issues.
It can look for six primary whitespace issues — three are enabled by default and can be turned off, and three are disabled by default but can be activated. The three that are turned on by default are blank-at-eol, which looks for spaces at the end of a line; blank-at-eof, which notices blank lines at the end of a file; and space-before-tab, which looks for spaces before tabs at the beginning of a line. The three that are disabled by default but can be turned on are indent-with-non-tab, which looks for lines that begin with spaces instead of tabs (and is controlled by the tabwidth option); tab-in-indent, which watches for tabs in the indentation portion of a line; and cr-at-eol, which tells Git that carriage returns at the end of lines are OK. You can tell Git which of these you want enabled by setting core.whitespace to the values you want on or off, separated by commas.
You can disable an option by prepending a - in front of its name, or use the default value by leaving it out of the setting string entirely.
For example, if you want all but space-before-tab to be set, you can do this (with trailing-space being a short-hand to cover both blank-at-eol and blank-at-eof): $ git config --global core.whitespace \
    trailing-space,-space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol Or you can specify the customizing part only: $ git config --global core.whitespace \
    -space-before-tab,indent-with-non-tab,tab-in-indent,cr-at-eol Git will detect these issues when you run a git diff command and try to color them so you can possibly fix them before you commit.
It will also use these values to help you when you apply patches with git apply.
When you’re applying patches, you can ask Git to warn you if it’s applying patches with the specified whitespace issues: $ git apply --whitespace=warn <patch> Or you can have Git try to automatically fix the issue before applying the patch: $ git apply --whitespace=fix <patch> These options apply to the git rebase command as well.
If you’ve committed whitespace issues but haven’t yet pushed upstream, you can run git rebase --whitespace=fix to have Git automatically fix whitespace issues as it’s rewriting the patches."
1.Getting Started,1.Getting Started,"Some of these settings can also be specified for a path, so that Git applies those settings only for a subdirectory or subset of files.
These path-specific settings are called Git attributes and are set either in a .gitattributes file in one of your directories (normally the root of your project) or in the .git/info/attributes file if you don’t want the attributes file committed with your project. Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.
In this section, you’ll learn about some of the attributes you can set on your paths in your Git project and see a few examples of using this feature in practice."
1.Getting Started,Binary Files,"One cool trick for which you can use Git attributes is telling Git which files are binary (in cases it otherwise may not be able to figure out) and giving Git special instructions about how to handle those files.
For instance, some text files may be machine generated and not diffable, whereas some binary files can be diffed.
You’ll see how to tell Git which is which. Some files look like text files but for all intents and purposes are to be treated as binary data.
For instance, Xcode projects on macOS contain a file that ends in .pbxproj, which is basically a JSON (plain-text JavaScript data format) dataset written out to disk by the IDE, which records your build settings and so on.
Although it’s technically a text file (because it’s all UTF-8), you don’t want to treat it as such because it’s really a lightweight database – you can’t merge the contents if two people change it, and diffs generally aren’t helpful.
The file is meant to be consumed by a machine.
In essence, you want to treat it like a binary file. To tell Git to treat all pbxproj files as binary data, add the following line to your .gitattributes file: *.pbxproj binary Now, Git won’t try to convert or fix CRLF issues; nor will it try to compute or print a diff for changes in this file when you run git show or git diff on your project. You can also use the Git attributes functionality to effectively diff binary files.
You do this by telling Git how to convert your binary data to a text format that can be compared via the normal diff. First, you’ll use this technique to solve one of the most annoying problems known to humanity: version-controlling Microsoft Word documents.
If you want to version-control Word documents, you can stick them in a Git repository and commit every once in a while; but what good does that do?
If you run git diff normally, you only see something like this: $ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ You can’t directly compare two versions unless you check them out and scan them manually, right?
It turns out you can do this fairly well using Git attributes.
Put the following line in your .gitattributes file: *.docx diff=word This tells Git that any file that matches this pattern (.docx) should use the “word” filter when you try to view a diff that contains changes.
What is the “word” filter?
You have to set it up.
Here you’ll configure Git to use the docx2txt program to convert Word documents into readable text files, which it will then diff properly. First, you’ll need to install docx2txt; you can download it from https://sourceforge.net/projects/docx2txt.
Follow the instructions in the INSTALL file to put it somewhere your shell can find it.
Next, you’ll write a wrapper script to convert output to the format Git expects.
Create a file that’s somewhere in your path called docx2txt, and add these contents: #!/bin/bash
docx2txt.pl ""$1"" - Don’t forget to chmod a+x that file.
Finally, you can configure Git to use this script: $ git config diff.word.textconv docx2txt Now Git knows that if it tries to do a diff between two snapshots, and any of the files end in .docx, it should run those files through the “word” filter, which is defined as the docx2txt program.
This effectively makes nice text-based versions of your Word files before attempting to diff them. Here’s an example: Chapter 1 of this book was converted to Word format and committed in a Git repository.
Then a new paragraph was added.
Here’s what git diff shows: $ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is ""version control"", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to. Git successfully and succinctly tells us that we added the string “Testing: 1, 2, 3.”, which is correct.
It’s not perfect – formatting changes wouldn’t show up here – but it certainly works. Another interesting problem you can solve this way involves diffing image files.
One way to do this is to run image files through a filter that extracts their EXIF information – metadata that is recorded with most image formats.
If you download and install the exiftool program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened.
Put the following line in your .gitattributes file: *.png diff=exif Configure Git to use this tool: $ git config diff.exif.textconv exiftool If you replace an image in your project and run git diff, you see something like this: diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha You can easily see that the file size and image dimensions have both changed."
1.Getting Started,Keyword Expansion,"SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can’t modify a file with information about the commit after you’ve committed, because Git checksums the file first.
However, you can inject text into a file when it’s checked out and remove it again before it’s added to a commit.
Git attributes offers you two ways to do this. First, you can inject the SHA-1 checksum of a blob into an $Id$ field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It’s important to notice that it isn’t the SHA-1 of the commit, but of the blob itself.
Put the following line in your .gitattributes file: *.txt ident Add an $Id$ reference to a test file: $ echo '$Id$' > test.txt The next time you check out this file, Git injects the SHA-1 of the blob: $ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $ However, that result is of limited use.
If you’ve used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn’t all that helpful, because it’s fairly random and you can’t tell if one SHA-1 is older or newer than another just by looking at them. It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called “clean” and “smudge” filters.
In the .gitattributes file, you can set a filter for particular paths and then set up scripts that will process files just before they’re checked out (“smudge”, see The “smudge” filter is run on checkout) and just before they’re staged (“clean”, see The “clean” filter is run when files are staged).
These filters can be set to do all sorts of fun things. The original commit message for this feature gives a simple example of running all your C source code through the indent program before committing.
You can set it up by setting the filter attribute in your .gitattributes file to filter \*.c files with the “indent” filter: *.c filter=indent Then, tell Git what the “indent” filter does on smudge and clean: $ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat In this case, when you commit files that match *.c, Git will run them through the indent program before it stages them and then run them through the cat program before it checks them back out onto disk.
The cat program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through indent before committing. Another interesting example gets $Date$ keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that: #! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:""%ad"" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$') All the script does is get the latest commit date from the git log command, stick that into any $Date$ strings it sees in stdin, and print the results – it should be simple to do in whatever language you’re most comfortable in.
You can name this file expand_date and put it in your path.
Now, you need to set up a filter in Git (call it dater) and tell it to use your expand_date filter to smudge the files on checkout.
You’ll use a Perl expression to clean that up on commit: $ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe ""s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/""' This Perl snippet strips out anything it sees in a $Date$ string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a Git attribute for that file that engages the new filter and creating a file with your $Date$ keyword: date*.txt filter=dater $ echo '# $Date$' > date_test.txt If you commit those changes and check out the file again, you see the keyword properly substituted: $ git add date_test.txt .gitattributes
$ git commit -m ""Test date expansion in Git""
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$ You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the .gitattributes file is committed and passed around with the project, but the driver (in this case, dater) isn’t, so it won’t work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly."
1.Getting Started,Exporting Your Repository,"Git attribute data also allows you to do some interesting things when exporting an archive of your project. You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don’t want to include in your archive file but that you do want checked into your project, you can determine those files via the export-ignore attribute. For example, say you have some test files in a test/ subdirectory, and it doesn’t make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file: test/ export-ignore Now, when you run git archive to create a tarball of your project, that directory won’t be included in the archive. When exporting files for deployment you can apply git log’s formatting and keyword-expansion processing to selected portions of files marked with the export-subst attribute. For instance, if you want to include a file named LAST_COMMIT in your project, and have metadata about the last commit automatically injected into it when git archive runs, you can for example set up your .gitattributes and LAST_COMMIT files like this: LAST_COMMIT export-subst $ echo 'Last commit date: $Format:%cd by %aN$' > LAST_COMMIT
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives' When you run git archive, the contents of the archived file will look like this: $ git archive HEAD | tar xCf ../deployment-testing -
$ cat ../deployment-testing/LAST_COMMIT
Last commit date: Tue Apr 21 08:38:48 2009 -0700 by Scott Chacon The substitutions can include for example the commit message and any git notes, and git log can do simple word wrapping: $ echo '$Format:Last commit: %h by %aN at %cd%n%+w(76,6,9)%B$' > LAST_COMMIT
$ git commit -am 'export-subst uses git log'\''s custom formatter

git archive uses git log'\''s `pretty=format:` processor
directly, and strips the surrounding `$Format:` and `$`
markup from the output.
'
$ git archive @ | tar xfO - LAST_COMMIT
Last commit: 312ccc8 by Jim Hill at Fri May 8 09:14:04 2015 -0700
       export-subst uses git log's custom formatter

         git archive uses git log's `pretty=format:` processor directly, and
         strips the surrounding `$Format:` and `$` markup from the output. The resulting archive is suitable for deployment work, but like any exported archive it isn’t suitable for further development work."
1.Getting Started,1.Getting Started,"Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur.
There are two groups of these hooks: client-side and server-side.
Client-side hooks are triggered by operations such as committing and merging, while server-side hooks run on network operations such as receiving pushed commits.
You can use these hooks for all sorts of reasons."
1.Getting Started,Installing a Hook,"The hooks are all stored in the hooks subdirectory of the Git directory.
In most projects, that’s .git/hooks.
When you initialize a new repository with git init, Git populates the hooks directory with a bunch of example scripts, many of which are useful by themselves; but they also document the input values of each script.
All the examples are written as shell scripts, with some Perl thrown in, but any properly named executable scripts will work fine – you can write them in Ruby or Python or whatever language you are familiar with.
If you want to use the bundled hook scripts, you’ll have to rename them; their file names all end with .sample. To enable a hook script, put a file in the hooks subdirectory of your .git directory that is named appropriately (without any extension) and is executable.
From that point forward, it should be called.
We’ll cover most of the major hook filenames here."
1.Getting Started,Client-Side Hooks,"There are a lot of client-side hooks.
This section splits them into committing-workflow hooks, email-workflow scripts, and everything else. It’s important to note that client-side hooks are not copied when you clone a repository.
If your intent with these scripts is to enforce a policy, you’ll probably want to do that on the server side; see the example in An Example Git-Enforced Policy. The first four hooks have to do with the committing process. The pre-commit hook is run first, before you even type in a commit message.
It’s used to inspect the snapshot that’s about to be committed, to see if you’ve forgotten something, to make sure tests run, or to examine whatever you need to inspect in the code.
Exiting non-zero from this hook aborts the commit, although you can bypass it with git commit --no-verify.
You can do things like check for code style (run lint or something equivalent), check for trailing whitespace (the default hook does exactly this), or check for appropriate documentation on new methods. The prepare-commit-msg hook is run before the commit message editor is fired up but after the default message is created.
It lets you edit the default message before the commit author sees it.
This hook takes a few parameters: the path to the file that holds the commit message so far, the type of commit, and the commit SHA-1 if this is an amended commit.
This hook generally isn’t useful for normal commits; rather, it’s good for commits where the default message is auto-generated, such as templated commit messages, merge commits, squashed commits, and amended commits.
You may use it in conjunction with a commit template to programmatically insert information. The commit-msg hook takes one parameter, which again is the path to a temporary file that contains the commit message written by the developer.
If this script exits non-zero, Git aborts the commit process, so you can use it to validate your project state or commit message before allowing a commit to go through.
In the last section of this chapter, we’ll demonstrate using this hook to check that your commit message is conformant to a required pattern. After the entire commit process is completed, the post-commit hook runs.
It doesn’t take any parameters, but you can easily get the last commit by running git log -1 HEAD.
Generally, this script is used for notification or something similar. You can set up three client-side hooks for an email-based workflow.
They’re all invoked by the git am command, so if you aren’t using that command in your workflow, you can safely skip to the next section.
If you’re taking patches over email prepared by git format-patch, then some of these may be helpful to you. The first hook that is run is applypatch-msg.
It takes a single argument: the name of the temporary file that contains the proposed commit message.
Git aborts the patch if this script exits non-zero.
You can use this to make sure a commit message is properly formatted, or to normalize the message by having the script edit it in place. The next hook to run when applying patches via git am is pre-applypatch.
Somewhat confusingly, it is run after the patch is applied but before a commit is made, so you can use it to inspect the snapshot before making the commit.
You can run tests or otherwise inspect the working tree with this script.
If something is missing or the tests don’t pass, exiting non-zero aborts the git am script without committing the patch. The last hook to run during a git am operation is post-applypatch, which runs after the commit is made.
You can use it to notify a group or the author of the patch you pulled in that you’ve done so.
You can’t stop the patching process with this script. The pre-rebase hook runs before you rebase anything and can halt the process by exiting non-zero.
You can use this hook to disallow rebasing any commits that have already been pushed.
The example pre-rebase hook that Git installs does this, although it makes some assumptions that may not match with your workflow. The post-rewrite hook is run by commands that replace commits, such as git commit --amend and git rebase (though not by git filter-branch).
Its single argument is which command triggered the rewrite, and it receives a list of rewrites on stdin.
This hook has many of the same uses as the post-checkout and post-merge hooks. After you run a successful git checkout, the post-checkout hook runs; you can use it to set up your working directory properly for your project environment.
This may mean moving in large binary files that you don’t want source controlled, auto-generating documentation, or something along those lines. The post-merge hook runs after a successful merge command.
You can use it to restore data in the working tree that Git can’t track, such as permissions data.
This hook can likewise validate the presence of files external to Git control that you may want copied in when the working tree changes. The pre-push hook runs during git push, after the remote refs have been updated but before any objects have been transferred.
It receives the name and location of the remote as parameters, and a list of to-be-updated refs through stdin.
You can use it to validate a set of ref updates before a push occurs (a non-zero exit code will abort the push). Git occasionally does garbage collection as part of its normal operation, by invoking git gc --auto.
The pre-auto-gc hook is invoked just before the garbage collection takes place, and can be used to notify you that this is happening, or to abort the collection if now isn’t a good time."
1.Getting Started,1.Getting Started,"In this section, you’ll use what you’ve learned to establish a Git workflow that checks for a custom commit message format, and allows only certain users to modify certain subdirectories in a project.
You’ll build client scripts that help the developer know if their push will be rejected and server scripts that actually enforce the policies. The scripts we’ll show are written in Ruby; partly because of our intellectual inertia, but also because Ruby is easy to read, even if you can’t necessarily write it.
However, any language will work – all the sample hook scripts distributed with Git are in either Perl or Bash, so you can also see plenty of examples of hooks in those languages by looking at the samples."
1.Getting Started,Server-Side Hook,"All the server-side work will go into the update file in your hooks directory.
The update hook runs once per branch being pushed and takes three arguments: The name of the reference being pushed to The old revision where that branch was The new revision being pushed You also have access to the user doing the pushing if the push is being run over SSH.
If you’ve allowed everyone to connect with a single user (like “git”) via public-key authentication, you may have to give that user a shell wrapper that determines which user is connecting based on the public key, and set an environment variable accordingly.
Here we’ll assume the connecting user is in the $USER environment variable, so your update script begins by gathering all the information you need: #!/usr/bin/env ruby

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

puts ""Enforcing Policies...""
puts ""(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"" Yes, those are global variables.
Don’t judge – it’s easier to demonstrate this way. Your first challenge is to enforce that each commit message adheres to a particular format.
Just to have a target, assume that each message has to include a string that looks like “ref: 1234” because you want each commit to link to a work item in your ticketing system.
You must look at each commit being pushed up, see if that string is in the commit message, and, if the string is absent from any of the commits, exit non-zero so the push is rejected. You can get a list of the SHA-1 values of all the commits that are being pushed by taking the $newrev and $oldrev values and passing them to a Git plumbing command called git rev-list.
This is basically the git log command, but by default it prints out only the SHA-1 values and no other information.
So, to get a list of all the commit SHA-1s introduced between one commit SHA-1 and another, you can run something like this: $ git rev-list 538c33..d14fc7
d14fc7c847ab946ec39590d87783c69b031bdfb7
9f585da4401b0a3999e84113824d15245c13f0be
234071a1be950e2a8d078e6141f5cd20c1e61ad3
dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475 You can take that output, loop through each of those commit SHA-1s, grab the message for it, and test that message against a regular expression that looks for a pattern. You have to figure out how to get the commit message from each of these commits to test.
To get the raw commit data, you can use another plumbing command called git cat-file.
We’ll go over all these plumbing commands in detail in Git Internals; but for now, here’s what that command gives you: $ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

Change the version number A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.
You can do so with the sed command on Unix systems: $ git cat-file commit ca82a6 | sed '1,/^$/d'
Change the version number You can use that incantation to grab the commit message from each commit that is trying to be pushed and exit if you see anything that doesn’t match.
To exit the script and reject the push, exit non-zero.
The whole method looks like this: $regex = /\[ref: (\d+)\]/

# enforced custom commit message format
def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split(""\n"")
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
      puts ""[POLICY] Your message is not formatted correctly""
      exit 1
    end
  end
end
check_message_format Putting that in your update script will reject updates that contain commits that have messages that don’t adhere to your rule. Suppose you want to add a mechanism that uses an access control list (ACL) that specifies which users are allowed to push changes to which parts of your projects.
Some people have full access, and others can only push changes to certain subdirectories or specific files.
To enforce this, you’ll write those rules to a file named acl that lives in your bare Git repository on the server.
You’ll have the update hook look at those rules, see what files are being introduced for all the commits being pushed, and determine whether the user doing the push has access to update all those files. The first thing you’ll do is write your ACL.
Here you’ll use a format very much like the CVS ACL mechanism: it uses a series of lines, where the first field is avail or unavail, the next field is a comma-delimited list of the users to which the rule applies, and the last field is the path to which the rule applies (blank meaning open access).
All of these fields are delimited by a pipe (|) character. In this case, you have a couple of administrators, some documentation writers with access to the doc directory, and one developer who only has access to the lib and tests directories, and your ACL file looks like this: avail|nickh,pjhyett,defunkt,tpw
avail|usinclair,cdickens,ebronte|doc
avail|schacon|lib
avail|schacon|tests You begin by reading this data into a structure that you can use.
In this case, to keep the example simple, you’ll only enforce the avail directives.
Here is a method that gives you an associative array where the key is the user name and the value is an array of paths to which the user has write access: def get_acl_access_data(acl_file)
  # read in ACL data
  acl_file = File.read(acl_file).split(""\n"").reject { |line| line == '' }
  access = {}
  acl_file.each do |line|
    avail, users, path = line.split('|')
    next unless avail == 'avail'
    users.split(',').each do |user|
      access[user] ||= []
      access[user] << path
    end
  end
  access
end On the ACL file you looked at earlier, this get_acl_access_data method returns a data structure that looks like this: {""defunkt""=>[nil],
 ""tpw""=>[nil],
 ""nickh""=>[nil],
 ""pjhyett""=>[nil],
 ""schacon""=>[""lib"", ""tests""],
 ""cdickens""=>[""doc""],
 ""usinclair""=>[""doc""],
 ""ebronte""=>[""doc""]} Now that you have the permissions sorted out, you need to determine what paths the commits being pushed have modified, so you can make sure the user who’s pushing has access to all of them. You can pretty easily see what files have been modified in a single commit with the --name-only option to the git log command (mentioned briefly in Git Basics): $ git log -1 --name-only --pretty=format:'' 9f585d

README
lib/test.rb If you use the ACL structure returned from the get_acl_access_data method and check it against the listed files in each of the commits, you can determine whether the user has access to push all of their commits: # only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('acl')

  # see if anyone is trying to push something they can't
  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split(""\n"")
  new_commits.each do |rev|
    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split(""\n"")
    files_modified.each do |path|
      next if path.size == 0
      has_file_access = false
      access[$user].each do |access_path|
        if !access_path  # user has access to everything
           || (path.start_with? access_path) # access to this path
          has_file_access = true
        end
      end
      if !has_file_access
        puts ""[POLICY] You do not have access to push to #{path}""
        exit 1
      end
    end
  end
end

check_directory_perms You get a list of new commits being pushed to your server with git rev-list.
Then, for each of those commits, you find which files are modified and make sure the user who’s pushing has access to all the paths being modified. Now your users can’t push any commits with badly formed messages or with modified files outside of their designated paths. If you run chmod u+x .git/hooks/update, which is the file into which you should have put all this code, and then try to push a commit with a non-compliant message, you get something like this: $ git push -f origin master
Counting objects: 5, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 323 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Enforcing Policies...
(refs/heads/master) (8338c5) (c5b616)
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git' There are a couple of interesting things here.
First, you see this where the hook starts running. Enforcing Policies...
(refs/heads/master) (fb8c72) (c56860) Remember that you printed that out at the very beginning of your update script.
Anything your script echoes to stdout will be transferred to the client. The next thing you’ll notice is the error message. [POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.
Lastly, you have this: To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git' You’ll see a remote rejected message for each reference that your hook declined, and it tells you that it was declined specifically because of a hook failure. Furthermore, if someone tries to edit a file they don’t have access to and push a commit containing it, they will see something similar.
For instance, if a documentation author tries to push a commit modifying something in the lib directory, they see: [POLICY] You do not have access to push to lib/test.rb From now on, as long as that update script is there and executable, your repository will never have a commit message without your pattern in it, and your users will be sandboxed."
1.Getting Started,1.Getting Started,"The world isn’t perfect.
Usually, you can’t immediately switch every project you come in contact with to Git.
Sometimes you’re stuck on a project using another VCS, and wish it was Git.
We’ll spend the first part of this chapter learning about ways to use Git as a client when the project you’re working on is hosted in a different system. At some point, you may want to convert your existing project to Git.
The second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists. Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called “bridges,” available.
Here we’ll cover the ones you’re most likely to run into in the wild."
1.Getting Started,Git and Subversion,"A large fraction of open source development projects and a good number of corporate projects use Subversion to manage their source code.
It’s been around for more than a decade, and for most of that time was the de facto VCS choice for open-source projects.
It’s also very similar in many ways to CVS, which was the big boy of the source-control world before that. One of Git’s great features is a bidirectional bridge to Subversion called git svn.
This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.
This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.
It’s a good way to sneak Git into the corporate environment and help your fellow developers become more efficient while you lobby to get the infrastructure changed to support Git fully.
The Subversion bridge is the gateway drug to the DVCS world. The base command in Git for all the Subversion bridging commands is git svn.
It takes quite a few commands, so we’ll show the most common while going through a few simple workflows. It’s important to note that when you’re using git svn, you’re interacting with Subversion, which is a system that works very differently from Git.
Although you can do local branching and merging, it’s generally best to keep your history as linear as possible by rebasing your work, and avoiding doing things like simultaneously interacting with a Git remote repository. Don’t rewrite your history and try to push again, and don’t push to a parallel Git repository to collaborate with fellow Git developers at the same time.
Subversion can have only a single linear history, and confusing it is very easy.
If you’re working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate – doing so will make your life easier. To demonstrate this functionality, you need a typical SVN repository that you have write access to.
If you want to copy these examples, you’ll have to make a writeable copy of an SVN test repository.
In order to do that easily, you can use a tool called svnsync that comes with Subversion. To follow along, you first need to create a new local Subversion repository: $ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn Then, enable all users to change revprops – the easy way is to add a pre-revprop-change script that always exits 0: $ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change You can now sync this project to your local machine by calling svnsync init with the to and from repositories. $ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/ This sets up the properties to run the sync.
You can then clone the code by running: $ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…] Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.
Subversion has to clone one revision at a time and then push it back into another repository – it’s ridiculously inefficient, but it’s the only easy way to do this. Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.
You’ll start with the git svn clone command, which imports an entire Subversion repository into a local Git repository.
Remember that if you’re importing from a real hosted Subversion repository, you should replace the file:///tmp/test-svn here with the URL of your Subversion repository: $ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75 This runs the equivalent of two commands – git svn init followed by git svn fetch – on the URL you provide.
This can take a while.
If, for example, the test project has only about 75 commits and the codebase isn’t that big, Git nevertheless must check out each version, one at a time, and commit it individually.
For a project with hundreds or thousands of commits, this can literally take hours or even days to finish. The -T trunk -b branches -t tags part tells Git that this Subversion repository follows the basic branching and tagging conventions.
If you name your trunk, branches, or tags differently, you can change these options.
Because this is so common, you can replace this entire part with -s, which means standard layout and implies all those options.
The following command is equivalent: $ git svn clone file:///tmp/test-svn -s At this point, you should have a valid Git repository that has imported your branches and tags: $ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk Note how this tool manages Subversion tags as remote refs.

Let’s take a closer look with the Git plumbing command show-ref: $ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk Git doesn’t do this when it clones from a Git server; here’s what a repository with tags looks like after a fresh clone: $ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0 Git fetches the tags directly into refs/tags, rather than treating them remote branches. Now that you have a working directory, you can do some work on the project and push your commits back upstream, using Git effectively as an SVN client.
If you edit one of the files and commit it, you have a commit that exists in Git locally that doesn’t exist on the Subversion server: $ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+) Next, you need to push your change upstream.
Notice how this changes the way you work with Subversion – you can do several commits offline and then push them all at once to the Subversion server.
To push to a Subversion server, you run the git svn dcommit command: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk This takes all the commits you’ve made on top of the Subversion server code, does a Subversion commit for each, and then rewrites your local Git commit to include a unique identifier.
This is important because it means that all the SHA-1 checksums for your commits change.
Partly for this reason, working with Git-based remote versions of your projects concurrently with a Subversion server isn’t a good idea.
If you look at the last commit, you can see the new git-svn-id that was added: $ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68 Notice that the SHA-1 checksum that originally started with 4af61fd when you committed now begins with 95e0222.
If you want to push to both a Git server and a Subversion server, you have to push (dcommit) to the Subversion server first, because that action changes your commit data. If you’re working with other developers, then at some point one of you will push, and then the other one will try to push a change that conflicts.
That change will be rejected until you merge in their work.
In git svn, it looks like this: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details. To resolve this situation, you can run git svn rebase, which pulls down any changes on the server that you don’t have yet and rebases any work you have on top of what is on the server: $ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details. Now, all your work is on top of what is on the Subversion server, so you can successfully dcommit: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk Note that unlike Git, which requires you to merge upstream work you don’t yet have locally before you can push, git svn makes you do that only if the changes conflict (much like how Subversion works).
If someone else pushes a change to one file and then you push a change to another file, your dcommit will work fine: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it... This is important to remember, because the outcome is a project state that didn’t exist on either of your computers when you pushed.
If the changes are incompatible but don’t conflict, you may get issues that are difficult to diagnose.
This is different than using a Git server – in Git, you can fully test the state on your client system before publishing it, whereas in SVN, you can’t ever be certain that the states immediately before commit and after commit are identical. You should also run this command to pull in changes from the Subversion server, even if you’re not ready to commit yourself.
You can run git svn fetch to grab the new data, but git svn rebase does the fetch and then updates your local commits. $ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk. Running git svn rebase every once in a while makes sure your code is always up to date.
You need to be sure your working directory is clean when you run this, though.
If you have local changes, you must either stash your work or temporarily commit it before running git svn rebase – otherwise, the command will stop if it sees that the rebase will result in a merge conflict. When you’ve become comfortable with a Git workflow, you’ll likely create topic branches, do work on them, and then merge them in.
If you’re pushing to a Subversion server via git svn, you may want to rebase your work onto a single branch each time instead of merging branches together.
The reason to prefer rebasing is that Subversion has a linear history and doesn’t deal with merges like Git does, so git svn follows only the first parent when converting the snapshots into Subversion commits. Suppose your history looks like the following: you created an experiment branch, did two commits, and then merged them back into master.
When you dcommit, you see output like this: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk Running dcommit on a branch with merged history works fine, except that when you look at your Git project history, it hasn’t rewritten either of the commits you made on the experiment branch – instead, all those changes appear in the SVN version of the single merge commit. When someone else clones that work, all they see is the merge commit with all the work squashed into it, as though you ran git merge --squash; they don’t see the commit data about where it came from or when it was committed. Branching in Subversion isn’t the same as branching in Git; if you can avoid using it much, that’s probably best.
However, you can create and commit to branches in Subversion using git svn. To create a new branch in Subversion, you run git svn branch [new-branch]: $ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera) This does the equivalent of the svn copy trunk branches/opera command in Subversion and operates on the Subversion server.
It’s important to note that it doesn’t check you out into that branch; if you commit at this point, that commit will go to trunk on the server, not opera. Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history – you should have only one, and it should be the last one with a git-svn-id in your current branch history. If you want to work on more than one branch simultaneously, you can set up local branches to dcommit to specific Subversion branches by starting them at the imported Subversion commit for that branch.
If you want an opera branch that you can work on separately, you can run: $ git branch opera remotes/origin/opera Now, if you want to merge your opera branch into trunk (your master branch), you can do so with a normal git merge.
But you need to provide a descriptive commit message (via -m), or the merge will say “Merge branch opera” instead of something useful. Remember that although you’re using git merge to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn’t a normal Git merge commit.
You have to push this data back to a Subversion server that can’t handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.
After you merge one branch into another, you can’t easily go back and continue working on that branch, as you normally can in Git.
The dcommit command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong – the dcommit makes your git merge result look like you ran git merge --squash.
Unfortunately, there’s no good way to avoid this situation – Subversion can’t store this information, so you’ll always be crippled by its limitations while you’re using it as your server.
To avoid issues, you should delete the local branch (in this case, opera) after you merge it into trunk. The git svn toolset provides a number of commands to help ease the transition to Git by providing some functionality that’s similar to what you had in Subversion.
Here are a few commands that give you what Subversion used to. If you’re used to Subversion and want to see your history in SVN output style, you can run git svn log to view your commit history in SVN formatting: $ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog You should know two important things about git svn log.
First, it works offline, unlike the real svn log command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven’t dcommited don’t show up; neither do commits that people have made to the Subversion server in the meantime.
It’s more like the last known state of the commits on the Subversion server. Much as the git svn log command simulates the svn log command offline, you can get the equivalent of svn annotate by running git svn blame [FILE].
The output looks like this: $ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal Again, it doesn’t show commits that you did locally in Git or that have been pushed to Subversion in the meantime. You can also get the same sort of information that svn info gives you by running git svn info: $ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009) This is like blame and log in that it runs offline and is up to date only as of the last time you communicated with the Subversion server. If you clone a Subversion repository that has svn:ignore properties set anywhere, you’ll likely want to set corresponding .gitignore files so you don’t accidentally commit files that you shouldn’t.
git svn has two commands to help with this issue.
The first is git svn create-ignore, which automatically creates corresponding .gitignore files for you so your next commit can include them. The second command is git svn show-ignore, which prints to stdout the lines you need to put in a .gitignore file so you can redirect the output into your project exclude file: $ git svn show-ignore > .git/info/exclude That way, you don’t litter the project with .gitignore files.
This is a good option if you’re the only Git user on a Subversion team, and your teammates don’t want .gitignore files in the project. The git svn tools are useful if you’re stuck with a Subversion server, or are otherwise in a development environment that necessitates running a Subversion server.
You should consider it crippled Git, however, or you’ll hit issues in translation that may confuse you and your collaborators.
To stay out of trouble, try to follow these guidelines: Keep a linear Git history that doesn’t contain merge commits made by git merge.
Rebase any work you do outside of your mainline branch back onto it; don’t merge it in. Don’t set up and collaborate on a separate Git server.
Possibly have one to speed up clones for new developers, but don’t push anything to it that doesn’t have a git-svn-id entry.
You may even want to add a pre-receive hook that checks each commit message for a git-svn-id and rejects pushes that contain commits without it. If you follow those guidelines, working with a Subversion server can be more bearable.
However, if it’s possible to move to a real Git server, doing so can gain your team a lot more."
1.Getting Started,Git and Mercurial,"The DVCS universe is larger than just Git.
In fact, there are many other systems in this space, each with their own angle on how to do distributed version control correctly.
Apart from Git, the most popular is Mercurial, and the two are very similar in many respects. The good news, if you prefer Git’s client-side behavior but are working with a project whose source code is controlled with Mercurial, is that there’s a way to use Git as a client for a Mercurial-hosted repository.
Since the way Git talks to server repositories is through remotes, it should come as no surprise that this bridge is implemented as a remote helper.
The project’s name is git-remote-hg, and it can be found at https://github.com/felipec/git-remote-hg. First, you need to install git-remote-hg.
This basically entails dropping its file somewhere in your path, like so: $ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg …assuming ~/bin is in your $PATH.
Git-remote-hg has one other dependency: the mercurial library for Python.
If you have Python installed, this is as simple as: $ pip install mercurial If you don’t have Python installed, visit https://www.python.org/ and get it first. The last thing you’ll need is the Mercurial client.
Go to https://www.mercurial-scm.org/ and install it if you haven’t already. Now you’re ready to rock.
All you need is a Mercurial repository you can push to.
Fortunately, every Mercurial repository can act this way, so we’ll just use the ""hello world"" repository everyone uses to learn Mercurial: $ hg clone http://selenic.com/repo/hello /tmp/hello Now that we have a suitable “server-side” repository, we can go through a typical workflow.
As you’ll see, these two systems are similar enough that there isn’t much friction. As always with Git, first we clone: $ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard 'hello, world' program You’ll notice that working with a Mercurial repository uses the standard git clone command.
That’s because git-remote-hg is working at a fairly low level, using a similar mechanism to how Git’s HTTP/S protocol is implemented (remote helpers).
Since Git and Mercurial are both designed for every client to have a full copy of the repository history, this command makes a full clone, including all the project’s history, and does it fairly quickly. The log command shows two commits, the latest of which is pointed to by a whole slew of refs.
It turns out some of these aren’t actually there.
Let’s take a look at what’s actually in the .git directory: $ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it’s managing the conceptual mapping between two slightly different systems.
The refs/hg directory is where the actual remote refs are stored.
For example, the refs/hg/origin/branches/default is a Git ref file that contains the SHA-1 starting with “ac7955c”, which is the commit that master points to.
So the refs/hg directory is kind of like a fake refs/remotes/origin, but it has the added distinction between bookmarks and branches. The notes/hg file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let’s explore a bit: $ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9 So refs/notes/hg points to a tree, which in the Git object database is a list of other objects with names.
git ls-tree outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named “ac9117f” (the SHA-1 hash of the commit pointed to by master), with contents “0a04b98” (which is the ID of the Mercurial changeset at the tip of the default branch). The good news is that we mostly don’t have to worry about all of this.
The typical workflow won’t be very different from working with a Git remote. There’s one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it’s likely you don’t want to actually commit a .gitignore file into a Mercurial repository.
Fortunately, Git has a way to ignore files that’s local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over: $ cp .hgignore .git/info/exclude The .git/info/exclude file acts just like a .gitignore, but isn’t included in commits. Let’s assume we’ve done some work and made some commits on the master branch, and you’re ready to push it to the remote repository.
Here’s what our repository looks like right now: $ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard 'hello, world' program Our master branch is two commits ahead of origin/master, but those two commits exist only on our local machine.
Let’s see if anyone else has been doing important work at the same time: $ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program Since we used the --all flag, we see the “notes” refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; origin/master has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we’re not going to do anything fancy. $ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program Perfect.
We run the tests and everything passes, so we’re ready to share our work with the rest of the team: $ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master That’s it!
If you take a look at the Mercurial repository, you’ll see that this did what we’d expect: $ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program The changeset numbered 2 was made by Mercurial, and the changesets numbered 3 and 4 were made by git-remote-hg, by pushing commits made with Git. Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a “bookmark,” and it behaves in much the same way as a Git branch. Mercurial’s concept of a “branch” is more heavyweight.
The branch that a changeset is made on is recorded with the changeset, which means it will always be in the repository history.
Here’s an example of a commit that was made on the develop branch: $ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation Note the line that begins with “branch”.
Git can’t really replicate this (and doesn’t need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares. Creating Mercurial bookmarks is as easy as creating Git branches.
On the Git side: $ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA That’s all there is to it.
On the Mercurial side, it looks like this: $ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program Note the new [featureA] tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can’t delete a bookmark from the Git side (this is a limitation of remote helpers). You can work on a “heavyweight” Mercurial branch also: just put a branch in the branches namespace: $ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent Here’s what that looks like on the Mercurial side: $ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...] The branch name “permanent” was recorded with the changeset marked 7. From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn’t support rewriting history, only adding to it.
Here’s what our Mercurial repository looks like after an interactive rebase and a force-push: $ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard ""hello, world"" program Changesets 8, 9, and 10 have been created and belong to the permanent branch, but the old changesets are still there.
This can be very confusing for your teammates who are using Mercurial, so try to avoid it. Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that’s left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial."
1.Getting Started,1.Getting Started,"The world isn’t perfect.
Usually, you can’t immediately switch every project you come in contact with to Git.
Sometimes you’re stuck on a project using another VCS, and wish it was Git.
We’ll spend the first part of this chapter learning about ways to use Git as a client when the project you’re working on is hosted in a different system. At some point, you may want to convert your existing project to Git.
The second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists. Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called “bridges,” available.
Here we’ll cover the ones you’re most likely to run into in the wild."
1.Getting Started,Git and Subversion,"A large fraction of open source development projects and a good number of corporate projects use Subversion to manage their source code.
It’s been around for more than a decade, and for most of that time was the de facto VCS choice for open-source projects.
It’s also very similar in many ways to CVS, which was the big boy of the source-control world before that. One of Git’s great features is a bidirectional bridge to Subversion called git svn.
This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.
This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.
It’s a good way to sneak Git into the corporate environment and help your fellow developers become more efficient while you lobby to get the infrastructure changed to support Git fully.
The Subversion bridge is the gateway drug to the DVCS world. The base command in Git for all the Subversion bridging commands is git svn.
It takes quite a few commands, so we’ll show the most common while going through a few simple workflows. It’s important to note that when you’re using git svn, you’re interacting with Subversion, which is a system that works very differently from Git.
Although you can do local branching and merging, it’s generally best to keep your history as linear as possible by rebasing your work, and avoiding doing things like simultaneously interacting with a Git remote repository. Don’t rewrite your history and try to push again, and don’t push to a parallel Git repository to collaborate with fellow Git developers at the same time.
Subversion can have only a single linear history, and confusing it is very easy.
If you’re working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate – doing so will make your life easier. To demonstrate this functionality, you need a typical SVN repository that you have write access to.
If you want to copy these examples, you’ll have to make a writeable copy of an SVN test repository.
In order to do that easily, you can use a tool called svnsync that comes with Subversion. To follow along, you first need to create a new local Subversion repository: $ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn Then, enable all users to change revprops – the easy way is to add a pre-revprop-change script that always exits 0: $ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change You can now sync this project to your local machine by calling svnsync init with the to and from repositories. $ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/ This sets up the properties to run the sync.
You can then clone the code by running: $ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…] Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.
Subversion has to clone one revision at a time and then push it back into another repository – it’s ridiculously inefficient, but it’s the only easy way to do this. Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.
You’ll start with the git svn clone command, which imports an entire Subversion repository into a local Git repository.
Remember that if you’re importing from a real hosted Subversion repository, you should replace the file:///tmp/test-svn here with the URL of your Subversion repository: $ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75 This runs the equivalent of two commands – git svn init followed by git svn fetch – on the URL you provide.
This can take a while.
If, for example, the test project has only about 75 commits and the codebase isn’t that big, Git nevertheless must check out each version, one at a time, and commit it individually.
For a project with hundreds or thousands of commits, this can literally take hours or even days to finish. The -T trunk -b branches -t tags part tells Git that this Subversion repository follows the basic branching and tagging conventions.
If you name your trunk, branches, or tags differently, you can change these options.
Because this is so common, you can replace this entire part with -s, which means standard layout and implies all those options.
The following command is equivalent: $ git svn clone file:///tmp/test-svn -s At this point, you should have a valid Git repository that has imported your branches and tags: $ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk Note how this tool manages Subversion tags as remote refs.

Let’s take a closer look with the Git plumbing command show-ref: $ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk Git doesn’t do this when it clones from a Git server; here’s what a repository with tags looks like after a fresh clone: $ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0 Git fetches the tags directly into refs/tags, rather than treating them remote branches. Now that you have a working directory, you can do some work on the project and push your commits back upstream, using Git effectively as an SVN client.
If you edit one of the files and commit it, you have a commit that exists in Git locally that doesn’t exist on the Subversion server: $ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+) Next, you need to push your change upstream.
Notice how this changes the way you work with Subversion – you can do several commits offline and then push them all at once to the Subversion server.
To push to a Subversion server, you run the git svn dcommit command: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk This takes all the commits you’ve made on top of the Subversion server code, does a Subversion commit for each, and then rewrites your local Git commit to include a unique identifier.
This is important because it means that all the SHA-1 checksums for your commits change.
Partly for this reason, working with Git-based remote versions of your projects concurrently with a Subversion server isn’t a good idea.
If you look at the last commit, you can see the new git-svn-id that was added: $ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68 Notice that the SHA-1 checksum that originally started with 4af61fd when you committed now begins with 95e0222.
If you want to push to both a Git server and a Subversion server, you have to push (dcommit) to the Subversion server first, because that action changes your commit data. If you’re working with other developers, then at some point one of you will push, and then the other one will try to push a change that conflicts.
That change will be rejected until you merge in their work.
In git svn, it looks like this: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details. To resolve this situation, you can run git svn rebase, which pulls down any changes on the server that you don’t have yet and rebases any work you have on top of what is on the server: $ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details. Now, all your work is on top of what is on the Subversion server, so you can successfully dcommit: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk Note that unlike Git, which requires you to merge upstream work you don’t yet have locally before you can push, git svn makes you do that only if the changes conflict (much like how Subversion works).
If someone else pushes a change to one file and then you push a change to another file, your dcommit will work fine: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it... This is important to remember, because the outcome is a project state that didn’t exist on either of your computers when you pushed.
If the changes are incompatible but don’t conflict, you may get issues that are difficult to diagnose.
This is different than using a Git server – in Git, you can fully test the state on your client system before publishing it, whereas in SVN, you can’t ever be certain that the states immediately before commit and after commit are identical. You should also run this command to pull in changes from the Subversion server, even if you’re not ready to commit yourself.
You can run git svn fetch to grab the new data, but git svn rebase does the fetch and then updates your local commits. $ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk. Running git svn rebase every once in a while makes sure your code is always up to date.
You need to be sure your working directory is clean when you run this, though.
If you have local changes, you must either stash your work or temporarily commit it before running git svn rebase – otherwise, the command will stop if it sees that the rebase will result in a merge conflict. When you’ve become comfortable with a Git workflow, you’ll likely create topic branches, do work on them, and then merge them in.
If you’re pushing to a Subversion server via git svn, you may want to rebase your work onto a single branch each time instead of merging branches together.
The reason to prefer rebasing is that Subversion has a linear history and doesn’t deal with merges like Git does, so git svn follows only the first parent when converting the snapshots into Subversion commits. Suppose your history looks like the following: you created an experiment branch, did two commits, and then merged them back into master.
When you dcommit, you see output like this: $ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk Running dcommit on a branch with merged history works fine, except that when you look at your Git project history, it hasn’t rewritten either of the commits you made on the experiment branch – instead, all those changes appear in the SVN version of the single merge commit. When someone else clones that work, all they see is the merge commit with all the work squashed into it, as though you ran git merge --squash; they don’t see the commit data about where it came from or when it was committed. Branching in Subversion isn’t the same as branching in Git; if you can avoid using it much, that’s probably best.
However, you can create and commit to branches in Subversion using git svn. To create a new branch in Subversion, you run git svn branch [new-branch]: $ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera) This does the equivalent of the svn copy trunk branches/opera command in Subversion and operates on the Subversion server.
It’s important to note that it doesn’t check you out into that branch; if you commit at this point, that commit will go to trunk on the server, not opera. Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history – you should have only one, and it should be the last one with a git-svn-id in your current branch history. If you want to work on more than one branch simultaneously, you can set up local branches to dcommit to specific Subversion branches by starting them at the imported Subversion commit for that branch.
If you want an opera branch that you can work on separately, you can run: $ git branch opera remotes/origin/opera Now, if you want to merge your opera branch into trunk (your master branch), you can do so with a normal git merge.
But you need to provide a descriptive commit message (via -m), or the merge will say “Merge branch opera” instead of something useful. Remember that although you’re using git merge to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn’t a normal Git merge commit.
You have to push this data back to a Subversion server that can’t handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.
After you merge one branch into another, you can’t easily go back and continue working on that branch, as you normally can in Git.
The dcommit command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong – the dcommit makes your git merge result look like you ran git merge --squash.
Unfortunately, there’s no good way to avoid this situation – Subversion can’t store this information, so you’ll always be crippled by its limitations while you’re using it as your server.
To avoid issues, you should delete the local branch (in this case, opera) after you merge it into trunk. The git svn toolset provides a number of commands to help ease the transition to Git by providing some functionality that’s similar to what you had in Subversion.
Here are a few commands that give you what Subversion used to. If you’re used to Subversion and want to see your history in SVN output style, you can run git svn log to view your commit history in SVN formatting: $ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog You should know two important things about git svn log.
First, it works offline, unlike the real svn log command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven’t dcommited don’t show up; neither do commits that people have made to the Subversion server in the meantime.
It’s more like the last known state of the commits on the Subversion server. Much as the git svn log command simulates the svn log command offline, you can get the equivalent of svn annotate by running git svn blame [FILE].
The output looks like this: $ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal Again, it doesn’t show commits that you did locally in Git or that have been pushed to Subversion in the meantime. You can also get the same sort of information that svn info gives you by running git svn info: $ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009) This is like blame and log in that it runs offline and is up to date only as of the last time you communicated with the Subversion server. If you clone a Subversion repository that has svn:ignore properties set anywhere, you’ll likely want to set corresponding .gitignore files so you don’t accidentally commit files that you shouldn’t.
git svn has two commands to help with this issue.
The first is git svn create-ignore, which automatically creates corresponding .gitignore files for you so your next commit can include them. The second command is git svn show-ignore, which prints to stdout the lines you need to put in a .gitignore file so you can redirect the output into your project exclude file: $ git svn show-ignore > .git/info/exclude That way, you don’t litter the project with .gitignore files.
This is a good option if you’re the only Git user on a Subversion team, and your teammates don’t want .gitignore files in the project. The git svn tools are useful if you’re stuck with a Subversion server, or are otherwise in a development environment that necessitates running a Subversion server.
You should consider it crippled Git, however, or you’ll hit issues in translation that may confuse you and your collaborators.
To stay out of trouble, try to follow these guidelines: Keep a linear Git history that doesn’t contain merge commits made by git merge.
Rebase any work you do outside of your mainline branch back onto it; don’t merge it in. Don’t set up and collaborate on a separate Git server.
Possibly have one to speed up clones for new developers, but don’t push anything to it that doesn’t have a git-svn-id entry.
You may even want to add a pre-receive hook that checks each commit message for a git-svn-id and rejects pushes that contain commits without it. If you follow those guidelines, working with a Subversion server can be more bearable.
However, if it’s possible to move to a real Git server, doing so can gain your team a lot more."
1.Getting Started,Git and Mercurial,"The DVCS universe is larger than just Git.
In fact, there are many other systems in this space, each with their own angle on how to do distributed version control correctly.
Apart from Git, the most popular is Mercurial, and the two are very similar in many respects. The good news, if you prefer Git’s client-side behavior but are working with a project whose source code is controlled with Mercurial, is that there’s a way to use Git as a client for a Mercurial-hosted repository.
Since the way Git talks to server repositories is through remotes, it should come as no surprise that this bridge is implemented as a remote helper.
The project’s name is git-remote-hg, and it can be found at https://github.com/felipec/git-remote-hg. First, you need to install git-remote-hg.
This basically entails dropping its file somewhere in your path, like so: $ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg …assuming ~/bin is in your $PATH.
Git-remote-hg has one other dependency: the mercurial library for Python.
If you have Python installed, this is as simple as: $ pip install mercurial If you don’t have Python installed, visit https://www.python.org/ and get it first. The last thing you’ll need is the Mercurial client.
Go to https://www.mercurial-scm.org/ and install it if you haven’t already. Now you’re ready to rock.
All you need is a Mercurial repository you can push to.
Fortunately, every Mercurial repository can act this way, so we’ll just use the ""hello world"" repository everyone uses to learn Mercurial: $ hg clone http://selenic.com/repo/hello /tmp/hello Now that we have a suitable “server-side” repository, we can go through a typical workflow.
As you’ll see, these two systems are similar enough that there isn’t much friction. As always with Git, first we clone: $ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard 'hello, world' program You’ll notice that working with a Mercurial repository uses the standard git clone command.
That’s because git-remote-hg is working at a fairly low level, using a similar mechanism to how Git’s HTTP/S protocol is implemented (remote helpers).
Since Git and Mercurial are both designed for every client to have a full copy of the repository history, this command makes a full clone, including all the project’s history, and does it fairly quickly. The log command shows two commits, the latest of which is pointed to by a whole slew of refs.
It turns out some of these aren’t actually there.
Let’s take a look at what’s actually in the .git directory: $ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it’s managing the conceptual mapping between two slightly different systems.
The refs/hg directory is where the actual remote refs are stored.
For example, the refs/hg/origin/branches/default is a Git ref file that contains the SHA-1 starting with “ac7955c”, which is the commit that master points to.
So the refs/hg directory is kind of like a fake refs/remotes/origin, but it has the added distinction between bookmarks and branches. The notes/hg file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let’s explore a bit: $ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9 So refs/notes/hg points to a tree, which in the Git object database is a list of other objects with names.
git ls-tree outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named “ac9117f” (the SHA-1 hash of the commit pointed to by master), with contents “0a04b98” (which is the ID of the Mercurial changeset at the tip of the default branch). The good news is that we mostly don’t have to worry about all of this.
The typical workflow won’t be very different from working with a Git remote. There’s one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it’s likely you don’t want to actually commit a .gitignore file into a Mercurial repository.
Fortunately, Git has a way to ignore files that’s local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over: $ cp .hgignore .git/info/exclude The .git/info/exclude file acts just like a .gitignore, but isn’t included in commits. Let’s assume we’ve done some work and made some commits on the master branch, and you’re ready to push it to the remote repository.
Here’s what our repository looks like right now: $ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard 'hello, world' program Our master branch is two commits ahead of origin/master, but those two commits exist only on our local machine.
Let’s see if anyone else has been doing important work at the same time: $ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program Since we used the --all flag, we see the “notes” refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; origin/master has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we’re not going to do anything fancy. $ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program Perfect.
We run the tests and everything passes, so we’re ready to share our work with the rest of the team: $ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master That’s it!
If you take a look at the Mercurial repository, you’ll see that this did what we’d expect: $ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program The changeset numbered 2 was made by Mercurial, and the changesets numbered 3 and 4 were made by git-remote-hg, by pushing commits made with Git. Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a “bookmark,” and it behaves in much the same way as a Git branch. Mercurial’s concept of a “branch” is more heavyweight.
The branch that a changeset is made on is recorded with the changeset, which means it will always be in the repository history.
Here’s an example of a commit that was made on the develop branch: $ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation Note the line that begins with “branch”.
Git can’t really replicate this (and doesn’t need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares. Creating Mercurial bookmarks is as easy as creating Git branches.
On the Git side: $ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA That’s all there is to it.
On the Mercurial side, it looks like this: $ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program Note the new [featureA] tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can’t delete a bookmark from the Git side (this is a limitation of remote helpers). You can work on a “heavyweight” Mercurial branch also: just put a branch in the branches namespace: $ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent Here’s what that looks like on the Mercurial side: $ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...] The branch name “permanent” was recorded with the changeset marked 7. From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn’t support rewriting history, only adding to it.
Here’s what our Mercurial repository looks like after an interactive rebase and a force-push: $ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard ""hello, world"" program Changesets 8, 9, and 10 have been created and belong to the permanent branch, but the old changesets are still there.
This can be very confusing for your teammates who are using Mercurial, so try to avoid it. Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that’s left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial."
1.Getting Started,1.Getting Started,"If you have an existing codebase in another VCS but you’ve decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You’ll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by."
1.Getting Started,Subversion,"If you read the previous section about using git svn, you can easily use those instructions to git svn clone a repository; then, stop using the Subversion server, push to a new Git server, and start using that.
If you want the history, you can accomplish that as quickly as you can pull the data out of the Subversion server (which may take a while). However, the import isn’t perfect; and because it will take so long, you may as well do it right.
The first problem is the author information.
In Subversion, each person committing has a user on the system who is recorded in the commit information.
The examples in the previous section show schacon in some places, such as the blame output and the git svn log.
If you want to map this to better Git author data, you need a mapping from the Subversion users to the Git authors.
Create a file called users.txt that has this mapping in a format like this: schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com> To get a list of the author names that SVN uses, you can run this: $ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /' That generates the log output in XML format, then keeps only the lines with author information, discards duplicates, strips out the XML tags.
Obviously this only works on a machine with grep, sort, and perl installed.
Then, redirect that output into your users.txt file so you can add the equivalent Git user data next to each entry. If you’re trying this on a Windows machine, this is the point where you’ll run into trouble.
Microsoft have provided some good advice and samples at https://learn.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git. You can provide this file to git svn to help it map the author data more accurately.
You can also tell git svn not to include the metadata that Subversion normally imports, by passing --no-metadata to the clone or init command.
The metadata includes a git-svn-id inside each commit message that Git will generate during import.
This can bloat your Git log and might make it a bit unclear. You need to keep the metadata when you want to mirror commits made in the Git repository back into the original SVN repository.
If you don’t want the synchronization in your commit log, feel free to omit the --no-metadata parameter. This makes your import command look like this: $ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix """" -s my_project
$ cd my_project Now you should have a nicer Subversion import in your my_project directory.
Instead of commits that look like this: commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029 they look like this: commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk Not only does the Author field look a lot better, but the git-svn-id is no longer there, either. You should also do a bit of post-import cleanup.
For one thing, you should clean up the weird references that git svn set up.
First you’ll move the tags so they’re actual tags rather than strange remote branches, and then you’ll move the rest of the branches so they’re local. To move the tags to be proper Git tags, run: $ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done This takes the references that were remote branches that started with refs/remotes/tags/ and makes them real (lightweight) tags. Next, move the rest of the references under refs/remotes to be local branches: $ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done It may happen that you’ll see some extra branches which are suffixed by @xxx (where xxx is a number), while in Subversion you only see one branch.
This is actually a Subversion feature called “peg-revisions”, which is something that Git simply has no syntactical counterpart for.
Hence, git svn simply adds the SVN version number to the branch name just in the same way as you would have written it in SVN to address the peg-revision of that branch.
If you do not care anymore about the peg-revisions, simply remove them: $ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done Now all the old branches are real Git branches and all the old tags are real Git tags. There’s one last thing to clean up.
Unfortunately, git svn creates an extra branch named trunk, which maps to Subversion’s default branch, but the trunk ref points to the same place as master.
Since master is more idiomatically Git, here’s how to remove the extra branch: $ git branch -d trunk The last thing to do is add your new Git server as a remote and push to it.
Here is an example of adding your server as a remote: $ git remote add origin git@my-git-server:myrepository.git Because you want all your branches and tags to go up, you can now run this: $ git push origin --all
$ git push origin --tags All your branches and tags should be on your new Git server in a nice, clean import."
1.Getting Started,Mercurial,"Since Mercurial and Git have fairly similar models for representing versions, and since Git is a bit more flexible, converting a repository from Mercurial to Git is fairly straightforward, using a tool called ""hg-fast-export"", which you’ll need a copy of: $ git clone https://github.com/frej/fast-export.git The first step in the conversion is to get a full clone of the Mercurial repository you want to convert: $ hg clone <remote repo URL> /tmp/hg-repo The next step is to create an author mapping file.
Mercurial is a bit more forgiving than Git for what it will put in the author field for changesets, so this is a good time to clean house.
Generating this is a one-line command in a bash shell: $ cd /tmp/hg-repo
$ hg log | grep user: | sort | uniq | sed 's/user: *//' > ../authors This will take a few seconds, depending on how long your project’s history is, and afterwards the /tmp/authors file will look something like this: bob
bob@localhost
bob <bob@company.com>
bob jones <bob <AT> company <DOT> com>
Bob Jones <bob@company.com>
Joe Smith <joe@company.com> In this example, the same person (Bob) has created changesets under four different names, one of which actually looks correct, and one of which would be completely invalid for a Git commit.
Hg-fast-export lets us fix this by turning each line into a rule: ""<input>""=""<output>"", mapping an <input> to an <output>.
Inside the <input> and <output> strings, all escape sequences understood by the Python string_escape encoding are supported.
If the author mapping file does not contain a matching <input>, that author will be sent on to Git unmodified.
If all the usernames look fine, we won’t need this file at all.
In this example, we want our file to look like this: ""bob""=""Bob Jones <bob@company.com>""
""bob@localhost""=""Bob Jones <bob@company.com>""
""bob <bob@company.com>""=""Bob Jones <bob@company.com>""
""bob jones <bob <AT> company <DOT> com>""=""Bob Jones <bob@company.com>"" The same kind of mapping file can be used to rename branches and tags when the Mercurial name is not allowed by Git. The next step is to create our new Git repository, and run the export script: $ git init /tmp/converted
$ cd /tmp/converted
$ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors The -r flag tells hg-fast-export where to find the Mercurial repository we want to convert, and the -A flag tells it where to find the author-mapping file (branch and tag mapping files are specified by the -B and -T flags respectively).
The script parses Mercurial changesets and converts them into a script for Git’s ""fast-import"" feature (which we’ll discuss in detail a bit later on).
This takes a bit (though it’s much faster than it would be over the network), and the output is fairly verbose: $ /tmp/fast-export/hg-fast-export.sh -r /tmp/hg-repo -A /tmp/authors
Loaded 4 authors
master: Exporting full revision 1/22208 with 13/0/0 added/changed/removed files
master: Exporting simple delta revision 2/22208 with 1/1/0 added/changed/removed files
master: Exporting simple delta revision 3/22208 with 0/1/0 added/changed/removed files
[…]
master: Exporting simple delta revision 22206/22208 with 0/4/0 added/changed/removed files
master: Exporting simple delta revision 22207/22208 with 0/2/0 added/changed/removed files
master: Exporting thorough delta revision 22208/22208 with 3/213/0 added/changed/removed files
Exporting tag [0.4c] at [hg r9] [git :10]
Exporting tag [0.4d] at [hg r16] [git :17]
[…]
Exporting tag [3.1-rc] at [hg r21926] [git :21927]
Exporting tag [3.1] at [hg r21973] [git :21974]
Issued 22315 commands
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:     120000
Total objects:       115032 (    208171 duplicates                  )
      blobs  :        40504 (    205320 duplicates      26117 deltas of      39602 attempts)
      trees  :        52320 (      2851 duplicates      47467 deltas of      47599 attempts)
      commits:        22208 (         0 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:         109 (         2 loads     )
      marks:        1048576 (     22208 unique    )
      atoms:           1952
Memory total:          7860 KiB
       pools:          2235 KiB
     objects:          5625 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =      90430
pack_report: pack_mmap_calls          =      46771
pack_report: pack_open_windows        =          1 /          1
pack_report: pack_mapped              =  340852700 /  340852700
---------------------------------------------------------------------

$ git shortlog -sn
   369  Bob Jones
   365  Joe Smith That’s pretty much all there is to it.
All of the Mercurial tags have been converted to Git tags, and Mercurial branches and bookmarks have been converted to Git branches.
Now you’re ready to push the repository up to its new server-side home: $ git remote add origin git@my-git-server:myrepository.git
$ git push origin --all"
1.Getting Started,Perforce,"The next system you’ll look at importing from is Perforce.
As we discussed above, there are two ways to let Git and Perforce talk to each other: git-p4 and Perforce Git Fusion. Git Fusion makes this process fairly painless.
Just configure your project settings, user mappings, and branches using a configuration file (as discussed in Git Fusion), and clone the repository.
Git Fusion leaves you with what looks like a native Git repository, which is then ready to push to a native Git host if you desire.
You could even use Perforce as your Git host if you like. Git-p4 can also act as an import tool.
As an example, we’ll import the Jam project from the Perforce Public Depot.
To set up your client, you must export the P4PORT environment variable to point to the Perforce depot: $ export P4PORT=public.perforce.com:1666 In order to follow along, you’ll need a Perforce depot to connect with.
We’ll be using the public depot at public.perforce.com for our examples, but you can use any depot you have access to. Run the git p4 clone command to import the Jam project from the Perforce server, supplying the depot and project path and the path into which you want to import the project: $ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%) This particular project has only one branch, but if you have branches that are configured with branch views (or just a set of directories), you can use the --detect-branches flag to git p4 clone to import all the project’s branches as well.
See Branching for a bit more detail on this. At this point you’re almost done.
If you go to the p4import directory and run git log, you can see your imported work: $ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = ""//public/jam/src/"": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = ""//public/jam/src/"": change = 7304] You can see that git-p4 has left an identifier in each commit message.
It’s fine to keep that identifier there, in case you need to reference the Perforce change number later.
However, if you’d like to remove the identifier, now is the time to do so – before you start doing work on the new repository.

You can use git filter-branch to remove the identifier strings en masse: $ git filter-branch --msg-filter 'sed -e ""/^\[git-p4:/d""'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten If you run git log, you can see that all the SHA-1 checksums for the commits have changed, but the git-p4 strings are no longer in the commit messages: $ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative). Your import is ready to push up to your new Git server."
1.Getting Started,1.Getting Started,"Git is a content-addressable filesystem.
Great.
What does that mean?
It means that at the core of Git is a simple key-value data store.
What this means is that you can insert any kind of content into a Git repository, for which Git will hand you back a unique key you can use later to retrieve that content. As a demonstration, let’s look at the plumbing command git hash-object, which takes some data, stores it in your .git/objects directory (the object database), and gives you back the unique key that now refers to that data object. First, you initialize a new Git repository and verify that there is (predictably) nothing in the objects directory: $ git init test
Initialized empty Git repository in /tmp/test/.git/
$ cd test
$ find .git/objects
.git/objects
.git/objects/info
.git/objects/pack
$ find .git/objects -type f Git has initialized the objects directory and created pack and info subdirectories in it, but there are no regular files.
Now, let’s use git hash-object to create a new data object and manually store it in your new Git database: $ echo 'test content' | git hash-object -w --stdin
d670460b4b4aece5915caf5c68d12f560a9fe3e4 In its simplest form, git hash-object would take the content you handed to it and merely return the unique key that would be used to store it in your Git database.
The -w option then tells the command to not simply return the key, but to write that object to the database.
Finally, the --stdin option tells git hash-object to get the content to be processed from stdin; otherwise, the command would expect a filename argument at the end of the command containing the content to be used. The output from the above command is a 40-character checksum hash.
This is the SHA-1 hash — a checksum of the content you’re storing plus a header, which you’ll learn about in a bit.
Now you can see how Git has stored your data: $ find .git/objects -type f
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 If you again examine your objects directory, you can see that it now contains a file for that new content.
This is how Git stores the content initially — as a single file per piece of content, named with the SHA-1 checksum of the content and its header.
The subdirectory is named with the first 2 characters of the SHA-1, and the filename is the remaining 38 characters. Once you have content in your object database, you can examine that content with the git cat-file command.
This command is sort of a Swiss army knife for inspecting Git objects.
Passing -p to cat-file instructs the command to first figure out the type of content, then display it appropriately: $ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content Now, you can add content to Git and pull it back out again.
You can also do this with content in files.
For example, you can do some simple version control on a file.
First, create a new file and save its contents in your database: $ echo 'version 1' > test.txt
$ git hash-object -w test.txt
83baae61804e65cc73a7201a7252750c76066a30 Then, write some new content to the file, and save it again: $ echo 'version 2' > test.txt
$ git hash-object -w test.txt
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a Your object database now contains both versions of this new file (as well as the first content you stored there): $ find .git/objects -type f
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 At this point, you can delete your local copy of that test.txt file, then use Git to retrieve, from the object database, either the first version you saved: $ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt
$ cat test.txt
version 1 or the second version: $ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a > test.txt
$ cat test.txt
version 2 But remembering the SHA-1 key for each version of your file isn’t practical; plus, you aren’t storing the filename in your system — just the content.
This object type is called a blob.
You can have Git tell you the object type of any object in Git, given its SHA-1 key, with git cat-file -t: $ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
blob"
1.Getting Started,Tree Objects,"The next type of Git object we’ll examine is the tree, which solves the problem of storing the filename and also allows you to store a group of files together.
Git stores content in a manner similar to a UNIX filesystem, but a bit simplified.
All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents.
A single tree object contains one or more entries, each of which is the SHA-1 hash of a blob or subtree with its associated mode, type, and filename.
For example, let’s say you have a project where the most-recent tree looks something like: $ git cat-file -p master^{tree}
100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib The master^{tree} syntax specifies the tree object that is pointed to by the last commit on your master branch.
Notice that the lib subdirectory isn’t a blob but a pointer to another tree: $ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb Depending on what shell you use, you may encounter errors when using the master^{tree} syntax. In CMD on Windows, the ^ character is used for escaping, so you have to double it to avoid this: git cat-file -p master^^{tree}.
When using PowerShell, parameters using {} characters have to be quoted to avoid the parameter being parsed incorrectly: git cat-file -p 'master^{tree}'. If you’re using ZSH, the ^ character is used for globbing, so you have to enclose the whole expression in quotes: git cat-file -p ""master^{tree}"". Conceptually, the data that Git is storing looks something like this: You can fairly easily create your own tree.
Git normally creates a tree by taking the state of your staging area or index and writing a series of tree objects from it.
So, to create a tree object, you first have to set up an index by staging some files.
To create an index with a single entry — the first version of your test.txt file — you can use the plumbing command git update-index.
You use this command to artificially add the earlier version of the test.txt file to a new staging area.
You must pass it the --add option because the file doesn’t yet exist in your staging area (you don’t even have a staging area set up yet) and --cacheinfo because the file you’re adding isn’t in your directory but is in your database.
Then, you specify the mode, SHA-1, and filename: $ git update-index --add --cacheinfo 100644 \
  83baae61804e65cc73a7201a7252750c76066a30 test.txt In this case, you’re specifying a mode of 100644, which means it’s a normal file.
Other options are 100755, which means it’s an executable file; and 120000, which specifies a symbolic link.
The mode is taken from normal UNIX modes but is much less flexible — these three modes are the only ones that are valid for files (blobs) in Git (although other modes are used for directories and submodules). Now, you can use git write-tree to write the staging area out to a tree object.
No -w option is needed — calling this command automatically creates a tree object from the state of the index if that tree doesn’t yet exist: $ git write-tree
d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt You can also verify that this is a tree object using the same git cat-file command you saw earlier: $ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
tree You’ll now create a new tree with the second version of test.txt and a new file as well: $ echo 'new file' > new.txt
$ git update-index --cacheinfo 100644 \
  1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt
$ git update-index --add new.txt Your staging area now has the new version of test.txt as well as the new file new.txt.
Write out that tree (recording the state of the staging area or index to a tree object) and see what it looks like: $ git write-tree
0155eb4229851634a0f03eb265b69f5a2d56f341
$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt Notice that this tree has both file entries and also that the test.txt SHA-1 is the “version 2” SHA-1 from earlier (1f7a7a).
Just for fun, you’ll add the first tree as a subdirectory into this one.
You can read trees into your staging area by calling git read-tree.
In this case, you can read an existing tree into your staging area as a subtree by using the --prefix option with this command: $ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ git write-tree
3c4e9cd789d88d8d89c1073707c3585e41b0e614
$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak
100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt If you created a working directory from the new tree you just wrote, you would get the two files in the top level of the working directory and a subdirectory named bak that contained the first version of the test.txt file.
You can think of the data that Git contains for these structures as being like this:"
1.Getting Started,Commit Objects,"If you’ve done all of the above, you now have three trees that represent the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots.
You also don’t have any information about who saved the snapshots, when they were saved, or why they were saved.
This is the basic information that the commit object stores for you. To create a commit object, you call commit-tree and specify a single tree SHA-1 and which commit objects, if any, directly preceded it.
Start with the first tree you wrote: $ echo 'First commit' | git commit-tree d8329f
fdf4fc3344e67ab068f836878b6c4951e3b15f3d You will get a different hash value because of different creation time and author data.
Moreover, while in principle any commit object can be reproduced precisely given that data, historical details of this book’s construction mean that the printed commit hashes might not correspond to the given commits.
Replace commit and tag hashes with your own checksums further in this chapter. Now you can look at your new commit object with git cat-file: $ git cat-file -p fdf4fc3
tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
author Scott Chacon <schacon@gmail.com> 1243040974 -0700
committer Scott Chacon <schacon@gmail.com> 1243040974 -0700

First commit The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the parent commits if any (the commit object described above does not have any parents); the author/committer information (which uses your user.name and user.email configuration settings and a timestamp); a blank line, and then the commit message. Next, you’ll write the other two commit objects, each referencing the commit that came directly before it: $ echo 'Second commit' | git commit-tree 0155eb -p fdf4fc3
cac0cab538b970a37ea1e769cbbde608743bc96d
$ echo 'Third commit'  | git commit-tree 3c4e9c -p cac0cab
1a410efbd13591db07496601ebc7a059dd55cfe9 Each of the three commit objects points to one of the three snapshot trees you created.
Oddly enough, you have a real Git history now that you can view with the git log command, if you run it on the last commit SHA-1: $ git log --stat 1a410e
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

	Third commit

 bak/test.txt | 1 +
 1 file changed, 1 insertion(+)

commit cac0cab538b970a37ea1e769cbbde608743bc96d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:14:29 2009 -0700

	Second commit

 new.txt  | 1 +
 test.txt | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:09:34 2009 -0700

    First commit

 test.txt | 1 +
 1 file changed, 1 insertion(+) Amazing.
You’ve just done the low-level operations to build up a Git history without using any of the front end commands.
This is essentially what Git does when you run the git add and git commit commands — it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them.
These three main Git objects — the blob, the tree, and the commit — are initially stored as separate files in your .git/objects directory.
Here are all the objects in the example directory now, commented with what they store: $ find .git/objects -type f
.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 If you follow all the internal pointers, you get an object graph something like this:"
1.Getting Started,1.Getting Started,"If you were interested in seeing the history of your repository reachable from commit, say, 1a410e, you could run something like git log 1a410e to display that history, but you would still have to remember that 1a410e is the commit you want to use as the starting point for that history.
Instead, it would be easier if you had a file in which you could store that SHA-1 value under a simple name so you could use that simple name rather than the raw SHA-1 value. In Git, these simple names are called “references” or “refs”; you can find the files that contain those SHA-1 values in the .git/refs directory.
In the current project, this directory contains no files, but it does contain a simple structure: $ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
$ find .git/refs -type f To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this: $ echo 1a410efbd13591db07496601ebc7a059dd55cfe9 > .git/refs/heads/master Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands: $ git log --pretty=oneline master
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit You aren’t encouraged to directly edit the reference files; instead, Git provides the safer command git update-ref to do this if you want to update a reference: $ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9 That’s basically what a branch in Git is: a simple pointer or reference to the head of a line of work.
To create a branch back at the second commit, you can do this: $ git update-ref refs/heads/test cac0ca Your branch will contain only work from that commit down: $ git log --pretty=oneline test
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit Now, your Git database conceptually looks something like this: When you run commands like git branch <branch>, Git basically runs that update-ref command to add the SHA-1 of the last commit of the branch you’re on into whatever new reference you want to create."
1.Getting Started,The HEAD,"The question now is, when you run git branch <branch>, how does Git know the SHA-1 of the last commit?
The answer is the HEAD file. Usually the HEAD file is a symbolic reference to the branch you’re currently on.
By symbolic reference, we mean that unlike a normal reference, it contains a pointer to another reference. However in some rare cases the HEAD file may contain the SHA-1 value of a Git object.
This happens when you checkout a tag, commit, or remote branch, which puts your repository in ""detached HEAD"" state. If you look at the file, you’ll normally see something like this: $ cat .git/HEAD
ref: refs/heads/master If you run git checkout test, Git updates the file to look like this: $ cat .git/HEAD
ref: refs/heads/test When you run git commit, it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to. You can also manually edit this file, but again a safer command exists to do so: git symbolic-ref.
You can read the value of your HEAD via this command: $ git symbolic-ref HEAD
refs/heads/master You can also set the value of HEAD using the same command: $ git symbolic-ref HEAD refs/heads/test
$ cat .git/HEAD
ref: refs/heads/test You can’t set a symbolic reference outside of the refs style: $ git symbolic-ref HEAD test
fatal: Refusing to point HEAD outside of refs/"
1.Getting Started,Tags,"We just finished discussing Git’s three main object types (blobs, trees and commits), but there is a fourth.
The tag object is very much like a commit object — it contains a tagger, a date, a message, and a pointer.
The main difference is that a tag object generally points to a commit rather than a tree.
It’s like a branch reference, but it never moves — it always points to the same commit but gives it a friendlier name. As discussed in Git Basics, there are two types of tags: annotated and lightweight.
You can make a lightweight tag by running something like this: $ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d That is all a lightweight tag is — a reference that never moves.
An annotated tag is more complex, however.
If you create an annotated tag, Git creates a tag object and then writes a reference to point to it rather than directly to the commit.
You can see this by creating an annotated tag (using the -a option): $ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'Test tag' Here’s the object SHA-1 value it created: $ cat .git/refs/tags/v1.1
9585191f37f7b0fb9444f35a9bf50de191beadc2 Now, run git cat-file -p on that SHA-1 value: $ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
object 1a410efbd13591db07496601ebc7a059dd55cfe9
type commit
tag v1.1
tagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700

Test tag Notice that the object entry points to the commit SHA-1 value that you tagged.
Also notice that it doesn’t need to point to a commit; you can tag any Git object.
In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.
You can view the public key by running this in a clone of the Git repository: $ git cat-file blob junio-gpg-pub The Linux kernel repository also has a non-commit-pointing tag object — the first tag created points to the initial tree of the import of the source code."
1.Getting Started,1.Getting Started,"Throughout this book, we’ve used simple mappings from remote branches to local references, but they can be more complex.
Suppose you were following along with the last couple sections and had created a small local Git repository, and now wanted to add a remote to it: $ git remote add origin https://github.com/schacon/simplegit-progit Running the command above adds a section to your repository’s .git/config file, specifying the name of the remote (origin), the URL of the remote repository, and the refspec to be used for fetching: [remote ""origin""]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/* The format of the refspec is, first, an optional +, followed by <src>:<dst>, where <src> is the pattern for references on the remote side and <dst> is where those references will be tracked locally.
The + tells Git to update the reference even if it isn’t a fast-forward. In the default case that is automatically written by a git remote add origin command, Git fetches all the references under refs/heads/ on the server and writes them to refs/remotes/origin/ locally.
So, if there is a master branch on the server, you can access the log of that branch locally via any of the following: $ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master They’re all equivalent, because Git expands each of them to refs/remotes/origin/master. If you want Git instead to pull down only the master branch each time, and not every other branch on the remote server, you can change the fetch line to refer to that branch only: fetch = +refs/heads/master:refs/remotes/origin/master This is just the default refspec for git fetch for that remote.
If you want to do a one-time only fetch, you can specify the specific refspec on the command line, too.
To pull the master branch on the remote down to origin/mymaster locally, you can run: $ git fetch origin master:refs/remotes/origin/mymaster You can also specify multiple refspecs.
On the command line, you can pull down several branches like so: $ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic In this case, the master branch pull was rejected because it wasn’t listed as a fast-forward reference.
You can override that by specifying the + in front of the refspec. You can also specify multiple refspecs for fetching in your configuration file.
If you want to always fetch the master and experiment branches from the origin remote, add two lines: [remote ""origin""]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment Since Git 2.6.0 you can use partial globs in the pattern to match multiple branches, so this works: fetch = +refs/heads/qa*:refs/remotes/origin/qa* Even better, you can use namespaces (or directories) to accomplish the same with more structure.
If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team’s branches but nothing else, you can use a config section like this: [remote ""origin""]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/* If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way."
1.Getting Started,Pushing Refspecs,"It’s nice that you can fetch namespaced references that way, but how does the QA team get their branches into a qa/ namespace in the first place?
You accomplish that by using refspecs to push. If the QA team wants to push their master branch to qa/master on the remote server, they can run: $ git push origin master:refs/heads/qa/master If they want Git to do that automatically each time they run git push origin, they can add a push value to their config file: [remote ""origin""]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master Again, this will cause a git push origin to push the local master branch to the remote qa/master branch by default. You cannot use the refspec to fetch from one repository and push to another one.
For an example to do so, refer to Keep your GitHub public repository up-to-date."
1.Getting Started,1.Getting Started,"Git can transfer data between two repositories in two major ways: the “dumb” protocol and the “smart” protocol.
This section will quickly cover how these two main protocols operate."
1.Getting Started,The Dumb Protocol,"If you’re setting up a repository to be served read-only over HTTP, the dumb protocol is likely what will be used.
This protocol is called “dumb” because it requires no Git-specific code on the server side during the transport process; the fetch process is a series of HTTP GET requests, where the client can assume the layout of the Git repository on the server. The dumb protocol is fairly rarely used these days.
It’s difficult to secure or make private, so most Git hosts (both cloud-based and on-premises) will refuse to use it.
It’s generally advised to use the smart protocol, which we describe a bit further on. Let’s follow the http-fetch process for the simplegit library: $ git clone http://server/simplegit-progit.git The first thing this command does is pull down the info/refs file.
This file is written by the update-server-info command, which is why you need to enable that as a post-receive hook in order for the HTTP transport to work properly: => GET info/refs
ca82a6dff817ec66f44342007202690a93763949     refs/heads/master Now you have a list of the remote references and SHA-1s.
Next, you look for what the HEAD reference is so you know what to check out when you’re finished: => GET HEAD
ref: refs/heads/master You need to check out the master branch when you’ve completed the process.
At this point, you’re ready to start the walking process.
Because your starting point is the ca82a6 commit object you saw in the info/refs file, you start by fetching that: => GET objects/ca/82a6dff817ec66f44342007202690a93763949
(179 bytes of binary data) You get an object back – that object is in loose format on the server, and you fetched it over a static HTTP GET request.
You can zlib-uncompress it, strip off the header, and look at the commit content: $ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

Change version number Next, you have two more objects to retrieve – cfda3b, which is the tree of content that the commit we just retrieved points to; and 085bb3, which is the parent commit: => GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
(179 bytes of data) That gives you your next commit object.
Grab the tree object: => GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf
(404 - Not Found) Oops – it looks like that tree object isn’t in loose format on the server, so you get a 404 response back.
There are a couple of reasons for this – the object could be in an alternate repository, or it could be in a packfile in this repository.
Git checks for any listed alternates first: => GET objects/info/http-alternates
(empty file) If this comes back with a list of alternate URLs, Git checks for loose files and packfiles there – this is a nice mechanism for projects that are forks of one another to share objects on disk.
However, because no alternates are listed in this case, your object must be in a packfile.
To see what packfiles are available on this server, you need to get the objects/info/packs file, which contains a listing of them (also generated by update-server-info): => GET objects/info/packs
P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack There is only one packfile on the server, so your object is obviously in there, but you’ll check the index file to make sure.
This is also useful if you have multiple packfiles on the server, so you can see which packfile contains the object you need: => GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx
(4k of binary data) Now that you have the packfile index, you can see if your object is in it – because the index lists the SHA-1s of the objects contained in the packfile and the offsets to those objects.
Your object is there, so go ahead and get the whole packfile: => GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
(13k of binary data) You have your tree object, so you continue walking your commits.
They’re all also within the packfile you just downloaded, so you don’t have to do any more requests to your server.
Git checks out a working copy of the master branch that was pointed to by the HEAD reference you downloaded at the beginning."
1.Getting Started,The Smart Protocol,"The dumb protocol is simple but a bit inefficient, and it can’t handle writing of data from the client to the server.
The smart protocol is a more common method of transferring data, but it requires a process on the remote end that is intelligent about Git – it can read local data, figure out what the client has and needs, and generate a custom packfile for it.
There are two sets of processes for transferring data: a pair for uploading data and a pair for downloading data. To upload data to a remote process, Git uses the send-pack and receive-pack processes.
The send-pack process runs on the client and connects to a receive-pack process on the remote side. For example, say you run git push origin master in your project, and origin is defined as a URL that uses the SSH protocol.
Git fires up the send-pack process, which initiates a connection over SSH to your server.
It tries to run a command on the remote server via an SSH call that looks something like this: $ ssh -x git@server ""git-receive-pack 'simplegit-progit.git'""
00a5ca82a6dff817ec66f4437202690a93763949 refs/heads/master□report-status \
	delete-refs side-band-64k quiet ofs-delta \
	agent=git/2:2.1.1+github-607-gfba4028 delete-refs
0000 The git-receive-pack command immediately responds with one line for each reference it currently has – in this case, just the master branch and its SHA-1.
The first line also has a list of the server’s capabilities (here, report-status, delete-refs, and some others, including the client identifier). The data is transmitted in chunks.
Each chunk starts with a 4-character hex value specifying how long the chunk is (including the 4 bytes of the length itself).
Chunks usually contain a single line of data and a trailing linefeed.
Your first chunk starts with 00a5, which is hexadecimal for 165, meaning the chunk is 165 bytes long.
The next chunk is 0000, meaning the server is done with its references listing. Now that it knows the server’s state, your send-pack process determines what commits it has that the server doesn’t.
For each reference that this push will update, the send-pack process tells the receive-pack process that information.
For instance, if you’re updating the master branch and adding an experiment branch, the send-pack response may look something like this: 0076ca82a6dff817ec66f44342007202690a93763949 15027957951b64cf874c3557a0f3547bd83b3ff6 \
	refs/heads/master report-status
006c0000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d \
	refs/heads/experiment
0000 Git sends a line for each reference you’re updating with the line’s length, the old SHA-1, the new SHA-1, and the reference that is being updated.
The first line also has the client’s capabilities.
The SHA-1 value of all '0’s means that nothing was there before – because you’re adding the experiment reference.
If you were deleting a reference, you would see the opposite: all '0’s on the right side. Next, the client sends a packfile of all the objects the server doesn’t have yet.
Finally, the server responds with a success (or failure) indication: 000eunpack ok This process is mostly the same over HTTP, though the handshaking is a bit different.
The connection is initiated with this request: => GET http://server/simplegit-progit.git/info/refs?service=git-receive-pack
001f# service=git-receive-pack
00ab6c5f0e45abd7832bf23074a333f739977c9e8188 refs/heads/master□report-status \
	delete-refs side-band-64k quiet ofs-delta \
	agent=git/2:2.1.1~vmg-bitmaps-bugaloo-608-g116744e
0000 That’s the end of the first client-server exchange.
The client then makes another request, this time a POST, with the data that send-pack provides. => POST http://server/simplegit-progit.git/git-receive-pack The POST request includes the send-pack output and the packfile as its payload.
The server then indicates success or failure with its HTTP response. Keep in mind the HTTP protocol may further wrap this data inside a chunked transfer encoding. When you download data, the fetch-pack and upload-pack processes are involved.
The client initiates a fetch-pack process that connects to an upload-pack process on the remote side to negotiate what data will be transferred down. If you’re doing the fetch over SSH, fetch-pack runs something like this: $ ssh -x git@server ""git-upload-pack 'simplegit-progit.git'"" After fetch-pack connects, upload-pack sends back something like this: 00dfca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
	side-band side-band-64k ofs-delta shallow no-progress include-tag \
	multi_ack_detailed symref=HEAD:refs/heads/master \
	agent=git/2:2.1.1+github-607-gfba4028
003fe2409a098dc3e53539a9028a94b6224db9d6a6b6 refs/heads/master
0000 This is very similar to what receive-pack responds with, but the capabilities are different.
In addition, it sends back what HEAD points to (symref=HEAD:refs/heads/master) so the client knows what to check out if this is a clone. At this point, the fetch-pack process looks at what objects it has and responds with the objects that it needs by sending “want” and then the SHA-1 it wants.
It sends all the objects it already has with “have” and then the SHA-1.
At the end of this list, it writes “done” to initiate the upload-pack process to begin sending the packfile of the data it needs: 003cwant ca82a6dff817ec66f44342007202690a93763949 ofs-delta
0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
0009done
0000 The handshake for a fetch operation takes two HTTP requests.
The first is a GET to the same endpoint used in the dumb protocol: => GET $GIT_URL/info/refs?service=git-upload-pack
001e# service=git-upload-pack
00e7ca82a6dff817ec66f44342007202690a93763949 HEAD□multi_ack thin-pack \
	side-band side-band-64k ofs-delta shallow no-progress include-tag \
	multi_ack_detailed no-done symref=HEAD:refs/heads/master \
	agent=git/2:2.1.1+github-607-gfba4028
003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
0000 This is very similar to invoking git-upload-pack over an SSH connection, but the second exchange is performed as a separate request: => POST $GIT_URL/git-upload-pack HTTP/1.0
0032want 0a53e9ddeaddad63ad106860237bbf53411d11a7
0032have 441b40d833fdfa93eb2908e52742248faf0ee993
0000 Again, this is the same format as above.
The response to this request indicates success or failure, and includes the packfile."
1.Getting Started,1.Getting Started,"Occasionally, you may have to do some cleanup – make a repository more compact, clean up an imported repository, or recover lost work.
This section will cover some of these scenarios."
1.Getting Started,Maintenance,"Occasionally, Git automatically runs a command called “auto gc”.
Most of the time, this command does nothing.
However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged git gc command.
The “gc” stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren’t reachable from any commit and are a few months old. You can run auto gc manually as follows: $ git gc --auto Again, this generally does nothing.
You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.
You can modify these limits with the gc.auto and gc.autopacklimit config settings, respectively. The other thing gc will do is pack up your references into a single file.
Suppose your repository contains the following branches and tags: $ find .git/refs -type f
.git/refs/heads/experiment
.git/refs/heads/master
.git/refs/tags/v1.0
.git/refs/tags/v1.1 If you run git gc, you’ll no longer have these files in the refs directory.
Git will move them for the sake of efficiency into a file named .git/packed-refs that looks like this: $ cat .git/packed-refs
# pack-refs with: peeled fully-peeled
cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
^1a410efbd13591db07496601ebc7a059dd55cfe9 If you update a reference, Git doesn’t edit this file but instead writes a new file to refs/heads.
To get the appropriate SHA-1 for a given reference, Git checks for that reference in the refs directory and then checks the packed-refs file as a fallback.
So if you can’t find a reference in the refs directory, it’s probably in your packed-refs file. Notice the last line of the file, which begins with a ^.
This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to."
1.Getting Started,Data Recovery,"At some point in your Git journey, you may accidentally lose a commit.
Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.
Assuming this happens, how can you get your commits back? Here’s an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits.
First, let’s review where your repository is at this point: $ git log --pretty=oneline
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo.rb a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit Now, move the master branch back to the middle commit: $ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
HEAD is now at 1a410ef Third commit
$ git log --pretty=oneline
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit You’ve effectively lost the top two commits – you have no branch from which those commits are reachable.
You need to find the latest commit SHA-1 and then add a branch that points to it.
The trick is finding that latest commit SHA-1 – it’s not like you’ve memorized it, right? Often, the quickest way is to use a tool called git reflog.
As you’re working, Git silently records what your HEAD is every time you change it.
Each time you commit or change branches, the reflog is updated.
The reflog is also updated by the git update-ref command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in Git References.
You can see where you’ve been at any time by running git reflog: $ git reflog
1a410ef HEAD@{0}: reset: moving to 1a410ef
ab1afef HEAD@{1}: commit: Modify repo.rb a bit
484a592 HEAD@{2}: commit: Create repo.rb Here we can see the two commits that we have had checked out, however there is not much information here.
To see the same information in a much more useful way, we can run git log -g, which will give you a normal log output for your reflog. $ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:22:37 2009 -0700

		Third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

       Modify repo.rb a bit It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.
For example, you can start a branch named recover-branch at that commit (ab1afef): $ git branch recover-branch ab1afef
$ git log --pretty=oneline recover-branch
ab1afef80fac8e34258ff41fc1b867c702daa24b Modify repo.rb a bit
484a59275031909e19aadb7c92262719cfcdf19a Create repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 Third commit
cac0cab538b970a37ea1e769cbbde608743bc96d Second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d First commit Cool – now you have a branch named recover-branch that is where your master branch used to be, making the first two commits reachable again.
Next, suppose your loss was for some reason not in the reflog – you can simulate that by removing recover-branch and deleting the reflog.
Now the first two commits aren’t reachable by anything: $ git branch -D recover-branch
$ rm -Rf .git/logs/ Because the reflog data is kept in the .git/logs/ directory, you effectively have no reflog.
How can you recover that commit at this point?
One way is to use the git fsck utility, which checks your database for integrity.
If you run it with the --full option, it shows you all objects that aren’t pointed to by another object: $ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (18/18), done.
dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293 In this case, you can see your missing commit after the string “dangling commit”.
You can recover it the same way, by adding a branch that points to that SHA-1."
1.Getting Started,1.Getting Started,"Git always runs inside a bash shell, and uses a number of shell environment variables to determine how it behaves.
Occasionally, it comes in handy to know what these are, and how they can be used to make Git behave the way you want it to.
This isn’t an exhaustive list of all the environment variables Git pays attention to, but we’ll cover the most useful."
1.Getting Started,Global Behavior,"Some of Git’s general behavior as a computer program depends on environment variables. GIT_EXEC_PATH determines where Git looks for its sub-programs (like git-commit, git-diff, and others).
You can check the current setting by running git --exec-path. HOME isn’t usually considered customizable (too many other things depend on it), but it’s where Git looks for the global configuration file.
If you want a truly portable Git installation, complete with global configuration, you can override HOME in the portable Git’s shell profile. PREFIX is similar, but for the system-wide configuration.
Git looks for this file at $PREFIX/etc/gitconfig. GIT_CONFIG_NOSYSTEM, if set, disables the use of the system-wide configuration file.
This is useful if your system config is interfering with your commands, but you don’t have access to change or remove it. GIT_PAGER controls the program used to display multi-page output on the command line.
If this is unset, PAGER will be used as a fallback. GIT_EDITOR is the editor Git will launch when the user needs to edit some text (a commit message, for example).
If unset, EDITOR will be used."
1.Getting Started,Repository Locations,"Git uses several environment variables to determine how it interfaces with the current repository. GIT_DIR is the location of the .git folder.
If this isn’t specified, Git walks up the directory tree until it gets to ~ or /, looking for a .git directory at every step. GIT_CEILING_DIRECTORIES controls the behavior of searching for a .git directory.
If you access directories that are slow to load (such as those on a tape drive, or across a slow network connection), you may want to have Git stop trying earlier than it might otherwise, especially if Git is invoked when building your shell prompt. GIT_WORK_TREE is the location of the root of the working directory for a non-bare repository.
If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE or core.worktree is specified, the current working directory is regarded as the top level of your working tree. GIT_INDEX_FILE is the path to the index file (non-bare repositories only). GIT_OBJECT_DIRECTORY can be used to specify the location of the directory that usually resides at .git/objects. GIT_ALTERNATE_OBJECT_DIRECTORIES is a colon-separated list (formatted like /dir/one:/dir/two:…) which tells Git where to check for objects if they aren’t in GIT_OBJECT_DIRECTORY.
If you happen to have a lot of projects with large files that have the exact same contents, this can be used to avoid storing too many copies of them."
1.Getting Started,Pathspecs,"A “pathspec” refers to how you specify paths to things in Git, including the use of wildcards.
These are used in the .gitignore file, but also on the command-line (git add *.c). GIT_GLOB_PATHSPECS and GIT_NOGLOB_PATHSPECS control the default behavior of wildcards in pathspecs.
If GIT_GLOB_PATHSPECS is set to 1, wildcard characters act as wildcards (which is the default); if GIT_NOGLOB_PATHSPECS is set to 1, wildcard characters only match themselves, meaning something like *.c would only match a file named “\*.c”, rather than any file whose name ends with .c.
You can override this in individual cases by starting the pathspec with :(glob) or :(literal), as in :(glob)\*.c. GIT_LITERAL_PATHSPECS disables both of the above behaviors; no wildcard characters will work, and the override prefixes are disabled as well. GIT_ICASE_PATHSPECS sets all pathspecs to work in a case-insensitive manner."
1.Getting Started,Committing,"The final creation of a Git commit object is usually done by git-commit-tree, which uses these environment variables as its primary source of information, falling back to configuration values only if these aren’t present. GIT_AUTHOR_NAME is the human-readable name in the “author” field. GIT_AUTHOR_EMAIL is the email for the “author” field. GIT_AUTHOR_DATE is the timestamp used for the “author” field. GIT_COMMITTER_NAME sets the human name for the “committer” field. GIT_COMMITTER_EMAIL is the email address for the “committer” field. GIT_COMMITTER_DATE is used for the timestamp in the “committer” field. EMAIL is the fallback email address in case the user.email configuration value isn’t set.
If this isn’t set, Git falls back to the system user and host names."
1.Getting Started,Networking,"Git uses the curl library to do network operations over HTTP, so GIT_CURL_VERBOSE tells Git to emit all the messages generated by that library.
This is similar to doing curl -v on the command line. GIT_SSL_NO_VERIFY tells Git not to verify SSL certificates.
This can sometimes be necessary if you’re using a self-signed certificate to serve Git repositories over HTTPS, or you’re in the middle of setting up a Git server but haven’t installed a full certificate yet. If the data rate of an HTTP operation is lower than GIT_HTTP_LOW_SPEED_LIMIT bytes per second for longer than GIT_HTTP_LOW_SPEED_TIME seconds, Git will abort that operation.
These values override the http.lowSpeedLimit and http.lowSpeedTime configuration values. GIT_HTTP_USER_AGENT sets the user-agent string used by Git when communicating over HTTP.
The default is a value like git/2.0.0."
1.Getting Started,Diffing and Merging,"GIT_DIFF_OPTS is a bit of a misnomer.
The only valid values are -u<n> or --unified=<n>, which controls the number of context lines shown in a git diff command. GIT_EXTERNAL_DIFF is used as an override for the diff.external configuration value.
If it’s set, Git will invoke this program when git diff is invoked. GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are useful from inside the program specified by GIT_EXTERNAL_DIFF or diff.external.
The former represents which file in a series is being diffed (starting with 1), and the latter is the total number of files in the batch. GIT_MERGE_VERBOSITY controls the output for the recursive merge strategy.
The allowed values are as follows: 0 outputs nothing, except possibly a single error message. 1 shows only conflicts. 2 also shows file changes. 3 shows when files are skipped because they haven’t changed. 4 shows all paths as they are processed. 5 and above show detailed debugging information. The default value is 2."
1.Getting Started,Debugging,"Want to really know what Git is up to?
Git has a fairly complete set of traces embedded, and all you need to do is turn them on.
The possible values of these variables are as follows: “true”, “1”, or “2” – the trace category is written to stderr. An absolute path starting with / – the trace output will be written to that file. GIT_TRACE controls general traces, which don’t fit into any specific category.
This includes the expansion of aliases, and delegation to other sub-programs. $ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less' GIT_TRACE_PACK_ACCESS controls tracing of packfile access.
The first field is the packfile being accessed, the second is the offset within that file: $ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean GIT_TRACE_PACKET enables packet-level tracing for network operations. $ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […] GIT_TRACE_PERFORMANCE controls logging of performance data.
The output shows how long each particular git invocation takes. $ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc' GIT_TRACE_SETUP shows information about what Git is discovering about the repository and environment it’s interacting with. $ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean"
1.Getting Started,1.Getting Started,"If you read through the whole book, you’ve learned a lot about how to use Git at the command line.
You can work with local files, connect your repository to others over a network, and work effectively with others.
But the story doesn’t end there; Git is usually used as part of a larger ecosystem, and the terminal isn’t always the best way to work with it.
Now we’ll take a look at some of the other kinds of environments where Git can be useful, and how other applications (including yours) work alongside Git. Git’s native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn’t the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface. It’s important to note that different interfaces are tailored for different workflows.
Some clients expose only a carefully curated subset of Git functionality, in order to support a specific way of working that the author considers effective.
When viewed in this light, none of these tools can be called “better” than any of the others, they’re simply more fit for their intended purpose.
Also note that there’s nothing these graphical clients can do that the command-line client can’t; the command-line is still where you’ll have the most power and control when working with your repositories."
1.Getting Started,gitk and git-gui,"When you install Git, you also get its visual tools, gitk and git-gui. gitk is a graphical history viewer.
Think of it like a powerful GUI shell over git log and git grep.
This is the tool to use when you’re trying to find something that happened in the past, or visualize your project’s history. Gitk is easiest to invoke from the command-line.
Just cd into a Git repository, and type: $ gitk [git log options] Gitk accepts many command-line options, most of which are passed through to the underlying git log action.
Probably one of the most useful is the --all flag, which tells gitk to show commits reachable from any ref, not just HEAD.
Gitk’s interface looks like this: On the top is something that looks a bit like the output of git log --graph; each dot represents a commit, the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history. git-gui, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line: $ git gui And it looks something like this: On the left is the index; unstaged changes are on top, staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for viewing by clicking on its name. At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area. At the bottom right is the message and action area.
Type your message into the text box and click “Commit” to do something similar to git commit.
You can also choose to amend the last commit by choosing the “Amend” radio button, which will update the “Staged Changes” area with the contents of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click “Commit” again to replace the old commit with a new one. gitk and git-gui are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task."
1.Getting Started,GitHub for macOS and Windows,"GitHub has created two workflow-oriented Git clients: one for Windows, and one for macOS.
These clients are a good example of workflow-oriented tools – rather than expose all of Git’s functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this: They are designed to look and work very much alike, so we’ll treat them like a single product in this chapter.
We won’t be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the “changes” view (which is where you’ll spend most of your time) is in order. On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the “+” icon at the top of this area. In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
On Windows, the commit history is displayed directly below this; on macOS, it’s on a separate tab. On the right is a diff view, which shows what’s changed in your working directory, or which changes were included in the selected commit. The last thing to notice is the “Sync” button at the top-right, which is the primary way you interact over the network. You don’t need a GitHub account to use these tools.
While they’re designed to highlight GitHub’s service and recommended workflow, they will happily work with any repository, and do network operations with any Git host. GitHub for Windows and macOS can be downloaded from https://desktop.github.com/.
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior. Both are “evergreen” – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won’t have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch PowerShell with Posh-git, which we’ll talk more about later in this chapter. The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left. Once it’s installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the “GitHub Flow.”
We cover this in more detail in The GitHub Flow, but the general gist is that (a) you’ll be committing to a branch, and (b) you’ll be syncing up with a remote repository fairly regularly. Branch management is one of the areas where the two tools diverge.
On macOS, there’s a button at the top of the window for creating a new branch: On Windows, this is done by typing the new branch’s name in the branch-switching widget: Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you’d like to include, and click the “Commit” button (ctrl-enter or ⌘-enter). The main way you interact with other repositories over the network is through the “Sync” feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here’s what happens when you click the Sync button: git pull --rebase.
If this fails because of a merge conflict, fall back to git pull --no-rebase. git push. This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time. These tools are very well-suited for the workflow they’re designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line."
1.Getting Started,1.Getting Started,"If you read through the whole book, you’ve learned a lot about how to use Git at the command line.
You can work with local files, connect your repository to others over a network, and work effectively with others.
But the story doesn’t end there; Git is usually used as part of a larger ecosystem, and the terminal isn’t always the best way to work with it.
Now we’ll take a look at some of the other kinds of environments where Git can be useful, and how other applications (including yours) work alongside Git. Git’s native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn’t the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface. It’s important to note that different interfaces are tailored for different workflows.
Some clients expose only a carefully curated subset of Git functionality, in order to support a specific way of working that the author considers effective.
When viewed in this light, none of these tools can be called “better” than any of the others, they’re simply more fit for their intended purpose.
Also note that there’s nothing these graphical clients can do that the command-line client can’t; the command-line is still where you’ll have the most power and control when working with your repositories."
1.Getting Started,gitk and git-gui,"When you install Git, you also get its visual tools, gitk and git-gui. gitk is a graphical history viewer.
Think of it like a powerful GUI shell over git log and git grep.
This is the tool to use when you’re trying to find something that happened in the past, or visualize your project’s history. Gitk is easiest to invoke from the command-line.
Just cd into a Git repository, and type: $ gitk [git log options] Gitk accepts many command-line options, most of which are passed through to the underlying git log action.
Probably one of the most useful is the --all flag, which tells gitk to show commits reachable from any ref, not just HEAD.
Gitk’s interface looks like this: On the top is something that looks a bit like the output of git log --graph; each dot represents a commit, the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history. git-gui, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line: $ git gui And it looks something like this: On the left is the index; unstaged changes are on top, staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for viewing by clicking on its name. At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area. At the bottom right is the message and action area.
Type your message into the text box and click “Commit” to do something similar to git commit.
You can also choose to amend the last commit by choosing the “Amend” radio button, which will update the “Staged Changes” area with the contents of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click “Commit” again to replace the old commit with a new one. gitk and git-gui are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task."
1.Getting Started,GitHub for macOS and Windows,"GitHub has created two workflow-oriented Git clients: one for Windows, and one for macOS.
These clients are a good example of workflow-oriented tools – rather than expose all of Git’s functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this: They are designed to look and work very much alike, so we’ll treat them like a single product in this chapter.
We won’t be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the “changes” view (which is where you’ll spend most of your time) is in order. On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the “+” icon at the top of this area. In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
On Windows, the commit history is displayed directly below this; on macOS, it’s on a separate tab. On the right is a diff view, which shows what’s changed in your working directory, or which changes were included in the selected commit. The last thing to notice is the “Sync” button at the top-right, which is the primary way you interact over the network. You don’t need a GitHub account to use these tools.
While they’re designed to highlight GitHub’s service and recommended workflow, they will happily work with any repository, and do network operations with any Git host. GitHub for Windows and macOS can be downloaded from https://desktop.github.com/.
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior. Both are “evergreen” – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won’t have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch PowerShell with Posh-git, which we’ll talk more about later in this chapter. The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left. Once it’s installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the “GitHub Flow.”
We cover this in more detail in The GitHub Flow, but the general gist is that (a) you’ll be committing to a branch, and (b) you’ll be syncing up with a remote repository fairly regularly. Branch management is one of the areas where the two tools diverge.
On macOS, there’s a button at the top of the window for creating a new branch: On Windows, this is done by typing the new branch’s name in the branch-switching widget: Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you’d like to include, and click the “Commit” button (ctrl-enter or ⌘-enter). The main way you interact with other repositories over the network is through the “Sync” feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here’s what happens when you click the Sync button: git pull --rebase.
If this fails because of a merge conflict, fall back to git pull --no-rebase. git push. This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time. These tools are very well-suited for the workflow they’re designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line."
1.Getting Started,1.Getting Started,"The legacy command-line terminal on Windows (cmd.exe) isn’t really capable of a customized Git experience, but if you’re using PowerShell, you’re in luck.
This also works if you’re running PowerShell Core on Linux or macOS.
A package called posh-git (https://github.com/dahlbyk/posh-git) provides powerful tab-completion facilities, as well as an enhanced prompt to help you stay on top of your repository status.
It looks like this:"
1.Getting Started,1.Getting Started,"Another option at your disposal is to use Libgit2.
Libgit2 is a dependency-free implementation of Git, with a focus on having a nice API for use within other programs.
You can find it at https://libgit2.org. First, let’s take a look at what the C API looks like.
Here’s a whirlwind tour: // Open a repository
git_repository *repo;
int error = git_repository_open(&repo, ""/path/to/repository"");

// Dereference HEAD to a commit
git_object *head_commit;
error = git_revparse_single(&head_commit, repo, ""HEAD^{commit}"");
git_commit *commit = (git_commit*)head_commit;

// Print some of the commit's properties
printf(""%s"", git_commit_message(commit));
const git_signature *author = git_commit_author(commit);
printf(""%s <%s>\n"", author->name, author->email);
const git_oid *tree_id = git_commit_tree_id(commit);

// Cleanup
git_commit_free(commit);
git_repository_free(repo); The first couple of lines open a Git repository.
The git_repository type represents a handle to a repository with a cache in memory.
This is the simplest method, for when you know the exact path to a repository’s working directory or .git folder.
There’s also the git_repository_open_ext which includes options for searching, git_clone and friends for making a local clone of a remote repository, and git_repository_init for creating an entirely new repository. The second chunk of code uses rev-parse syntax (see Branch References for more on this) to get the commit that HEAD eventually points to.
The type returned is a git_object pointer, which represents something that exists in the Git object database for a repository.
git_object is actually a “parent” type for several different kinds of objects; the memory layout for each of the “child” types is the same as for git_object, so you can safely cast to the right one.
In this case, git_object_type(commit) would return GIT_OBJ_COMMIT, so it’s safe to cast to a git_commit pointer. The next chunk shows how to access the commit’s properties.
The last line here uses a git_oid type; this is Libgit2’s representation for a SHA-1 hash. From this sample, a couple of patterns have started to emerge: If you declare a pointer and pass a reference to it into a Libgit2 call, that call will probably return an integer error code.
A 0 value indicates success; anything less is an error. If Libgit2 populates a pointer for you, you’re responsible for freeing it. If Libgit2 returns a const pointer from a call, you don’t have to free it, but it will become invalid when the object it belongs to is freed. Writing C is a bit painful. That last one means it isn’t very probable that you’ll be writing C when using Libgit2.
Fortunately, there are a number of language-specific bindings available that make it fairly easy to work with Git repositories from your specific language and environment.
Let’s take a look at the above example written using the Ruby bindings for Libgit2, which are named Rugged, and can be found at https://github.com/libgit2/rugged. repo = Rugged::Repository.new('path/to/repository')
commit = repo.head.target
puts commit.message
puts ""#{commit.author[:name]} <#{commit.author[:email]}>""
tree = commit.tree As you can see, the code is much less cluttered.
Firstly, Rugged uses exceptions; it can raise things like ConfigError or ObjectError to signal error conditions.
Secondly, there’s no explicit freeing of resources, since Ruby is garbage-collected.
Let’s take a look at a slightly more complicated example: crafting a commit from scratch blob_id = repo.write(""Blob contents"", :blob) # (1)

index = repo.index
index.read_tree(repo.head.target.tree)
index.add(:path => 'newfile.txt', :oid => blob_id) # (2)

sig = {
    :email => ""bob@example.com"",
    :name => ""Bob User"",
    :time => Time.now,
}

commit_id = Rugged::Commit.create(repo,
    :tree => index.write_tree(repo), # (3)
    :author => sig,
    :committer => sig, # (4)
    :message => ""Add newfile.txt"", # (5)
    :parents => repo.empty? ? [] : [ repo.head.target ].compact, # (6)
    :update_ref => 'HEAD', # (7)
)
commit = repo.lookup(commit_id) # (8) Create a new blob, which contains the contents of a new file. Populate the index with the head commit’s tree, and add the new file at the path newfile.txt. This creates a new tree in the ODB, and uses it for the new commit. We use the same signature for both the author and committer fields. The commit message. When creating a commit, you have to specify the new commit’s parents.
This uses the tip of HEAD for the single parent. Rugged (and Libgit2) can optionally update a reference when making a commit. The return value is the SHA-1 hash of a new commit object, which you can then use to get a Commit object. The Ruby code is nice and clean, but since Libgit2 is doing the heavy lifting, this code will run pretty fast, too.
If you’re not a rubyist, we touch on some other bindings in Other Bindings."
1.Getting Started,Advanced Functionality,"Libgit2 has a couple of capabilities that are outside the scope of core Git.
One example is pluggability: Libgit2 allows you to provide custom “backends” for several types of operation, so you can store things in a different way than stock Git does.
Libgit2 allows custom backends for configuration, ref storage, and the object database, among other things. Let’s take a look at how this works.
The code below is borrowed from the set of backend examples provided by the Libgit2 team (which can be found at https://github.com/libgit2/libgit2-backends).
Here’s how a custom backend for the object database is set up: git_odb *odb;
int error = git_odb_new(&odb); // (1)

git_odb_backend *my_backend;
error = git_odb_backend_mine(&my_backend, /*…*/); // (2)

error = git_odb_add_backend(odb, my_backend, 1); // (3)

git_repository *repo;
error = git_repository_open(&repo, ""some-path"");
error = git_repository_set_odb(repo, odb); // (4) Note that errors are captured, but not handled. We hope your code is better than ours. Initialize an empty object database (ODB) “frontend,” which will act as a container for the “backends” which are the ones doing the real work. Initialize a custom ODB backend. Add the backend to the frontend. Open a repository, and set it to use our ODB to look up objects. But what is this git_odb_backend_mine thing?
Well, that’s the constructor for your own ODB implementation, and you can do whatever you want in there, so long as you fill in the git_odb_backend structure properly.
Here’s what it could look like: typedef struct {
    git_odb_backend parent;

    // Some other stuff
    void *custom_context;
} my_backend_struct;

int git_odb_backend_mine(git_odb_backend **backend_out, /*…*/)
{
    my_backend_struct *backend;

    backend = calloc(1, sizeof (my_backend_struct));

    backend->custom_context = …;

    backend->parent.read = &my_backend__read;
    backend->parent.read_prefix = &my_backend__read_prefix;
    backend->parent.read_header = &my_backend__read_header;
    // …

    *backend_out = (git_odb_backend *) backend;

    return GIT_SUCCESS;
} The subtlest constraint here is that my_backend_struct’s first member must be a git_odb_backend structure; this ensures that the memory layout is what the Libgit2 code expects it to be.
The rest of it is arbitrary; this structure can be as large or small as you need it to be. The initialization function allocates some memory for the structure, sets up the custom context, and then fills in the members of the parent structure that it supports.
Take a look at the include/git2/sys/odb_backend.h file in the Libgit2 source for a complete set of call signatures; your particular use case will help determine which of these you’ll want to support."
1.Getting Started,Other Bindings,"Libgit2 has bindings for many languages.
Here we show a small example using a few of the more complete bindings packages as of this writing; libraries exist for many other languages, including C++, Go, Node.js, Erlang, and the JVM, all in various stages of maturity.
The official collection of bindings can be found by browsing the repositories at https://github.com/libgit2.
The code we’ll write will return the commit message from the commit eventually pointed to by HEAD (sort of like git log -1). If you’re writing a .NET or Mono application, LibGit2Sharp (https://github.com/libgit2/libgit2sharp) is what you’re looking for.
The bindings are written in C#, and great care has been taken to wrap the raw Libgit2 calls with native-feeling CLR APIs.
Here’s what our example program looks like: new Repository(@""C:\path\to\repo"").Head.Tip.Message; For desktop Windows applications, there’s even a NuGet package that will help you get started quickly. If your application is running on an Apple platform, you’re likely using Objective-C as your implementation language.
Objective-Git (https://github.com/libgit2/objective-git) is the name of the Libgit2 bindings for that environment.
The example program looks like this: GTRepository *repo =
    [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: @""/path/to/repo""] error:NULL];
NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message]; Objective-git is fully interoperable with Swift, so don’t fear if you’ve left Objective-C behind. The bindings for Libgit2 in Python are called Pygit2, and can be found at https://www.pygit2.org.
Our example program: pygit2.Repository(""/path/to/repo"") # open repository
    .head                          # get the current branch
    .peel(pygit2.Commit)           # walk down to the commit
    .message                       # read the message"
1.Getting Started,1.Getting Started,"If you want to use Git from within a Java program, there is a fully featured Git library called JGit.
JGit is a relatively full-featured implementation of Git written natively in Java, and is widely used in the Java community.
The JGit project is under the Eclipse umbrella, and its home can be found at https://www.eclipse.org/jgit/."
1.Getting Started,Getting Set Up,"There are a number of ways to connect your project with JGit and start writing code against it.
Probably the easiest is to use Maven – the integration is accomplished by adding the following snippet to the <dependencies> tag in your pom.xml file: <dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>3.5.0.201409260305-r</version>
</dependency> The version will most likely have advanced by the time you read this; check https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit for updated repository information.
Once this step is done, Maven will automatically acquire and use the JGit libraries that you’ll need. If you would rather manage the binary dependencies yourself, pre-built JGit binaries are available from https://www.eclipse.org/jgit/download.
You can build them into your project by running a command like this: javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java
java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App"
1.Getting Started,Plumbing,"JGit has two basic levels of API: plumbing and porcelain.
The terminology for these comes from Git itself, and JGit is divided into roughly the same kinds of areas: porcelain APIs are a friendly front-end for common user-level actions (the sorts of things a normal user would use the Git command-line tool for), while the plumbing APIs are for interacting with low-level repository objects directly. The starting point for most JGit sessions is the Repository class, and the first thing you’ll want to do is create an instance of it.
For a filesystem-based repository (yes, JGit allows for other storage models), this is accomplished using FileRepositoryBuilder: // Create a new repository
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    new File(""/tmp/new_repo/.git""));
newlyCreatedRepo.create();

// Open an existing repository
Repository existingRepo = new FileRepositoryBuilder()
    .setGitDir(new File(""my_repo/.git""))
    .build(); The builder has a fluent API for providing all the things it needs to find a Git repository, whether or not your program knows exactly where it’s located.
It can use environment variables (.readEnvironment()), start from a place in the working directory and search (.setWorkTree(…).findGitDir()), or just open a known .git directory as above. Once you have a Repository instance, you can do all sorts of things with it.
Here’s a quick sampling: // Get a reference
Ref master = repo.getRef(""master"");

// Get the object the reference points to
ObjectId masterTip = master.getObjectId();

// Rev-parse
ObjectId obj = repo.resolve(""HEAD^{tree}"");

// Load raw object contents
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

// Create a branch
RefUpdate createBranch1 = repo.updateRef(""refs/heads/branch1"");
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

// Delete a branch
RefUpdate deleteBranch1 = repo.updateRef(""refs/heads/branch1"");
deleteBranch1.setForceUpdate(true);
deleteBranch1.delete();

// Config
Config cfg = repo.getConfig();
String name = cfg.getString(""user"", null, ""name""); There’s quite a bit going on here, so let’s go through it one section at a time. The first line gets a pointer to the master reference.
JGit automatically grabs the actual master ref, which lives at refs/heads/master, and returns an object that lets you fetch information about the reference.
You can get the name (.getName()), and either the target object of a direct reference (.getObjectId()) or the reference pointed to by a symbolic ref (.getTarget()).
Ref objects are also used to represent tag refs and objects, so you can ask if the tag is “peeled,” meaning that it points to the final target of a (potentially long) string of tag objects. The second line gets the target of the master reference, which is returned as an ObjectId instance.
ObjectId represents the SHA-1 hash of an object, which might or might not exist in Git’s object database.
The third line is similar, but shows how JGit handles the rev-parse syntax (for more on this, see Branch References); you can pass any object specifier that Git understands, and JGit will return either a valid ObjectId for that object, or null. The next two lines show how to load the raw contents of an object.
In this example, we call ObjectLoader.copyTo() to stream the contents of the object directly to stdout, but ObjectLoader also has methods to read the type and size of an object, as well as return it as a byte array.
For large objects (where .isLarge() returns true), you can call .openStream() to get an InputStream-like object that can read the raw object data without pulling it all into memory at once. The next few lines show what it takes to create a new branch.
We create a RefUpdate instance, configure some parameters, and call .update() to trigger the change.
Directly following this is the code to delete that same branch.
Note that .setForceUpdate(true) is required for this to work; otherwise the .delete() call will return REJECTED, and nothing will happen. The last example shows how to fetch the user.name value from the Git configuration files.
This Config instance uses the repository we opened earlier for local configuration, but will automatically detect the global and system configuration files and read values from them as well. This is only a small sampling of the full plumbing API; there are many more methods and classes available.
Also not shown here is the way JGit handles errors, which is through the use of exceptions.
JGit APIs sometimes throw standard Java exceptions (such as IOException), but there are a host of JGit-specific exception types that are provided as well (such as NoRemoteRepositoryException, CorruptObjectException, and NoMergeBaseException)."
1.Getting Started,Porcelain,"The plumbing APIs are rather complete, but it can be cumbersome to string them together to achieve common goals, like adding a file to the index, or making a new commit.
JGit provides a higher-level set of APIs to help out with this, and the entry point to these APIs is the Git class: Repository repo;
// construct repo...
Git git = new Git(repo); The Git class has a nice set of high-level builder-style methods that can be used to construct some pretty complex behavior.
Let’s take a look at an example — doing something like git ls-remote: CredentialsProvider cp = new UsernamePasswordCredentialsProvider(""username"", ""p4ssw0rd"");
Collection<Ref> remoteRefs = git.lsRemote()
    .setCredentialsProvider(cp)
    .setRemote(""origin"")
    .setTags(true)
    .setHeads(false)
    .call();
for (Ref ref : remoteRefs) {
    System.out.println(ref.getName() + "" -> "" + ref.getObjectId().name());
} This is a common pattern with the Git class; the methods return a command object that lets you chain method calls to set parameters, which are executed when you call .call().
In this case, we’re asking the origin remote for tags, but not heads.
Also notice the use of a CredentialsProvider object for authentication. Many other commands are available through the Git class, including but not limited to add, blame, commit, clean, push, rebase, revert, and reset."
1.Getting Started,1.Getting Started,"In case you want to integrate Git into a service written in Golang, there also is a pure Go library implementation.
This implementation does not have any native dependencies and thus is not prone to manual memory management errors.
It is also transparent for the standard Golang performance analysis tooling like CPU, Memory profilers, race detector, etc. go-git is focused on extensibility, compatibility and supports most of the plumbing APIs, which is documented at https://github.com/go-git/go-git/blob/master/COMPATIBILITY.md. Here is a basic example of using Go APIs: import ""github.com/go-git/go-git/v5""

r, err := git.PlainClone(""/tmp/foo"", false, &git.CloneOptions{
    URL:      ""https://github.com/go-git/go-git"",
    Progress: os.Stdout,
}) As soon as you have a Repository instance, you can access information and perform mutations on it: // retrieves the branch pointed by HEAD
ref, err := r.Head()

// get the commit object, pointed by ref
commit, err := r.CommitObject(ref.Hash())

// retrieves the commit history
history, err := commit.History()

// iterates over the commits and print each
for _, c := range history {
    fmt.Println(c)
}"
1.Getting Started,Advanced Functionality,"go-git has few notable advanced features, one of which is a pluggable storage system, which is similar to Libgit2 backends.
The default implementation is in-memory storage, which is very fast. r, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{
    URL: ""https://github.com/go-git/go-git"",
}) Pluggable storage provides many interesting options.
For instance, https://github.com/go-git/go-git/tree/master/_examples/storage allows you to store references, objects, and configuration in an Aerospike database. Another feature is a flexible filesystem abstraction.
Using https://pkg.go.dev/github.com/go-git/go-billy/v5?tab=doc#Filesystem it is easy to store all the files in different way i.e by packing all of them to a single archive on disk or by keeping them all in-memory. Another advanced use-case includes a fine-tunable HTTP client, such as the one found at https://github.com/go-git/go-git/blob/master/_examples/custom_http/main.go. customClient := &http.Client{
    Transport: &http.Transport{ // accept any certificate (might be useful for testing)
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
    },
    Timeout: 15 * time.Second,  // 15 second timeout
        CheckRedirect: func(req *http.Request, via []*http.Request) error {
        return http.ErrUseLastResponse // don't follow redirect
    },
}

// Override http(s) default protocol to use our custom client
client.InstallProtocol(""https"", githttp.NewClient(customClient))

// Clone repository using the new client if the protocol is https://
r, err := git.Clone(memory.NewStorage(), nil, &git.CloneOptions{URL: url})"
1.Getting Started,1.Getting Started,"There is also a pure-Python Git implementation - Dulwich.
The project is hosted under https://www.dulwich.io/.
It aims to provide an interface to Git repositories (both local and remote) that doesn’t call out to Git directly but instead uses pure Python.
It has an optional C extensions though, that significantly improve the performance. Dulwich follows Git design and separate two basic levels of API: plumbing and porcelain. Here is an example of using the lower level API to access the commit message of the last commit: from dulwich.repo import Repo
r = Repo('.')
r.head()
# '57fbe010446356833a6ad1600059d80b1e731e15'

c = r[r.head()]
c
# <Commit 015fc1267258458901a94d228e39f0a378370466>

c.message
# 'Add note about encoding.\n' To print a commit log using high-level porcelain API, one can use: from dulwich import porcelain
porcelain.log('.', max_entries=1)

#commit: 57fbe010446356833a6ad1600059d80b1e731e15
#Author: Jelmer Vernooĳ <jelmer@jelmer.uk>
#Date:   Sat Apr 29 2017 23:57:34 +0000"
1.Getting Started,1.Getting Started,"Throughout the book we have introduced dozens of Git commands and have tried hard to introduce them within something of a narrative, adding more commands to the story slowly.
However, this leaves us with examples of usage of the commands somewhat scattered throughout the whole book. In this appendix, we’ll go through all the Git commands we addressed throughout the book, grouped roughly by what they’re used for.
We’ll talk about what each command very generally does and then point out where in the book you can find us having used it. There are two commands that are used quite a lot, from the first invocations of Git to common every day tweaking and referencing, the config and help commands."
1.Getting Started,git config,"Git has a default way of doing hundreds of things.
For a lot of these things, you can tell Git to default to doing them a different way, or set your preferences.
This involves everything from telling Git what your name is to specific terminal color preferences or what editor you use.
There are several files this command will read from and write to so you can set values globally or down to specific repositories. The git config command has been used in nearly every chapter of the book. In First-Time Git Setup we used it to specify our name, email address and editor preference before we even got started using Git. In Git Aliases we showed how you could use it to create shorthand commands that expand to long option sequences so you don’t have to type them every time. In Rebasing we used it to make --rebase the default when you run git pull. In Credential Storage we used it to set up a default store for your HTTP passwords. In Keyword Expansion we showed how to set up smudge and clean filters on content coming in and out of Git. Finally, basically the entirety of Git Configuration is dedicated to the command."
1.Getting Started,git config core.editor commands,"Accompanying the configuration instructions in Your Editor, many editors can be set as follows: Atom git config --global core.editor ""atom --wait"" BBEdit (macOS, with command line tools) git config --global core.editor ""bbedit -w"" Emacs git config --global core.editor emacs Gedit (Linux) git config --global core.editor ""gedit --wait --new-window"" Gvim (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Vim\vim72\gvim.exe' --nofork '%*'"" (Also see note below) Helix git config --global core.editor ""hx"" Kate (Linux) git config --global core.editor ""kate --block"" nano git config --global core.editor ""nano -w"" Notepad (Windows 64-bit) git config core.editor notepad Notepad++ (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"" (Also see note below) Scratch (Linux) git config --global core.editor ""scratch-text-editor"" Sublime Text (macOS) git config --global core.editor ""/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait"" Sublime Text (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Sublime Text 3\sublime_text.exe' -w"" (Also see note below) TextEdit (macOS) git config --global core.editor ""open --wait-apps --new -e"" Textmate git config --global core.editor ""mate -w"" Textpad (Windows 64-bit) git config --global core.editor ""'C:\Program Files\TextPad 5\TextPad.exe' -m"" (Also see note below) UltraEdit (Windows 64-bit) git config --global core.editor Uedit32 Vim git config --global core.editor ""vim --nofork"" Visual Studio Code git config --global core.editor ""code --wait"" VSCodium (Free/Libre Open Source Software Binaries of VSCode) git config --global core.editor ""codium --wait"" WordPad git config --global core.editor ""'C:\Program Files\Windows NT\Accessories\wordpad.exe'"" Xi git config --global core.editor ""xi --wait"" If you have a 32-bit editor on a Windows 64-bit system, the program will be installed in C:\Program Files (x86)\ rather than C:\Program Files\ as in the table above."
1.Getting Started,1.Getting Started,"Throughout the book we have introduced dozens of Git commands and have tried hard to introduce them within something of a narrative, adding more commands to the story slowly.
However, this leaves us with examples of usage of the commands somewhat scattered throughout the whole book. In this appendix, we’ll go through all the Git commands we addressed throughout the book, grouped roughly by what they’re used for.
We’ll talk about what each command very generally does and then point out where in the book you can find us having used it. There are two commands that are used quite a lot, from the first invocations of Git to common every day tweaking and referencing, the config and help commands."
1.Getting Started,git config,"Git has a default way of doing hundreds of things.
For a lot of these things, you can tell Git to default to doing them a different way, or set your preferences.
This involves everything from telling Git what your name is to specific terminal color preferences or what editor you use.
There are several files this command will read from and write to so you can set values globally or down to specific repositories. The git config command has been used in nearly every chapter of the book. In First-Time Git Setup we used it to specify our name, email address and editor preference before we even got started using Git. In Git Aliases we showed how you could use it to create shorthand commands that expand to long option sequences so you don’t have to type them every time. In Rebasing we used it to make --rebase the default when you run git pull. In Credential Storage we used it to set up a default store for your HTTP passwords. In Keyword Expansion we showed how to set up smudge and clean filters on content coming in and out of Git. Finally, basically the entirety of Git Configuration is dedicated to the command."
1.Getting Started,git config core.editor commands,"Accompanying the configuration instructions in Your Editor, many editors can be set as follows: Atom git config --global core.editor ""atom --wait"" BBEdit (macOS, with command line tools) git config --global core.editor ""bbedit -w"" Emacs git config --global core.editor emacs Gedit (Linux) git config --global core.editor ""gedit --wait --new-window"" Gvim (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Vim\vim72\gvim.exe' --nofork '%*'"" (Also see note below) Helix git config --global core.editor ""hx"" Kate (Linux) git config --global core.editor ""kate --block"" nano git config --global core.editor ""nano -w"" Notepad (Windows 64-bit) git config core.editor notepad Notepad++ (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"" (Also see note below) Scratch (Linux) git config --global core.editor ""scratch-text-editor"" Sublime Text (macOS) git config --global core.editor ""/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait"" Sublime Text (Windows 64-bit) git config --global core.editor ""'C:\Program Files\Sublime Text 3\sublime_text.exe' -w"" (Also see note below) TextEdit (macOS) git config --global core.editor ""open --wait-apps --new -e"" Textmate git config --global core.editor ""mate -w"" Textpad (Windows 64-bit) git config --global core.editor ""'C:\Program Files\TextPad 5\TextPad.exe' -m"" (Also see note below) UltraEdit (Windows 64-bit) git config --global core.editor Uedit32 Vim git config --global core.editor ""vim --nofork"" Visual Studio Code git config --global core.editor ""code --wait"" VSCodium (Free/Libre Open Source Software Binaries of VSCode) git config --global core.editor ""codium --wait"" WordPad git config --global core.editor ""'C:\Program Files\Windows NT\Accessories\wordpad.exe'"" Xi git config --global core.editor ""xi --wait"" If you have a 32-bit editor on a Windows 64-bit system, the program will be installed in C:\Program Files (x86)\ rather than C:\Program Files\ as in the table above."
1.Getting Started,1.Getting Started,"There are two ways to get a Git repository.
One is to copy it from an existing repository on the network or elsewhere and the other is to create a new one in an existing directory."
1.Getting Started,git init,"To take a directory and turn it into a new Git repository so you can start version controlling it, you can simply run git init. We first introduce this in Getting a Git Repository, where we show creating a brand new repository to start working with. We talk briefly about how you can change the default branch name from “master” in Remote Branches. We use this command to create an empty bare repository for a server in Putting the Bare Repository on a Server. Finally, we go through some of the details of what it actually does behind the scenes in Plumbing and Porcelain."
1.Getting Started,1.Getting Started,"For the basic workflow of staging content and committing it to your history, there are only a few basic commands."
1.Getting Started,git add,"The git add command adds content from the working directory into the staging area (or “index”) for the next commit.
When the git commit command is run, by default it only looks at this staging area, so git add is used to craft what exactly you would like your next commit snapshot to look like. This command is an incredibly important command in Git and is mentioned or used dozens of times in this book.
We’ll quickly cover some of the unique uses that can be found. We first introduce and explain git add in detail in Tracking New Files. We mention how to use it to resolve merge conflicts in Basic Merge Conflicts. We go over using it to interactively stage only specific parts of a modified file in Interactive Staging. Finally, we emulate it at a low level in Tree Objects, so you can get an idea of what it’s doing behind the scenes."
1.Getting Started,git status,"The git status command will show you the different states of files in your working directory and staging area.
Which files are modified and unstaged and which are staged but not yet committed.
In its normal form, it also will show you some basic hints on how to move files between these stages. We first cover status in Checking the Status of Your Files, both in its basic and simplified forms.
While we use it throughout the book, pretty much everything you can do with the git status command is covered there."
1.Getting Started,git diff,"The git diff command is used when you want to see differences between any two trees.
This could be the difference between your working environment and your staging area (git diff by itself), between your staging area and your last commit (git diff --staged), or between two commits (git diff master branchB). We first look at the basic uses of git diff in Viewing Your Staged and Unstaged Changes, where we show how to see what changes are staged and which are not yet staged. We use it to look for possible whitespace issues before committing with the --check option in Commit Guidelines. We see how to check the differences between branches more effectively with the git diff A…​B syntax in Determining What Is Introduced. We use it to filter out whitespace differences with -b and how to compare different stages of conflicted files with --theirs, --ours and --base in Advanced Merging. Finally, we use it to effectively compare submodule changes with --submodule in Starting with Submodules."
1.Getting Started,git difftool,The git difftool command simply launches an external tool to show you the difference between two trees in case you want to use something other than the built in git diff command. We only briefly mention this in Viewing Your Staged and Unstaged Changes.
1.Getting Started,git commit,"The git commit command takes all the file contents that have been staged with git add and records a new permanent snapshot in the database and then moves the branch pointer on the current branch up to it. We first cover the basics of committing in Committing Your Changes.
There we also demonstrate how to use the -a flag to skip the git add step in daily workflows and how to use the -m flag to pass a commit message in on the command line instead of firing up an editor. In Undoing Things we cover using the --amend option to redo the most recent commit. In Branches in a Nutshell, we go into much more detail about what git commit does and why it does it like that. We looked at how to sign commits cryptographically with the -S flag in Signing Commits. Finally, we take a look at what the git commit command does in the background and how it’s actually implemented in Commit Objects."
1.Getting Started,git reset,"The git reset command is primarily used to undo things, as you can possibly tell by the verb.
It moves around the HEAD pointer and optionally changes the index or staging area and can also optionally change the working directory if you use --hard.
This final option makes it possible for this command to lose your work if used incorrectly, so make sure you understand it before using it. We first effectively cover the simplest use of git reset in Unstaging a Staged File, where we use it to unstage a file we had run git add on. We then cover it in quite some detail in Reset Demystified, which is entirely devoted to explaining this command. We use git reset --hard to abort a merge in Aborting a Merge, where we also use git merge --abort, which is a bit of a wrapper for the git reset command."
1.Getting Started,git rm,"The git rm command is used to remove files from the staging area and working directory for Git.
It is similar to git add in that it stages a removal of a file for the next commit. We cover the git rm command in some detail in Removing Files, including recursively removing files and only removing files from the staging area but leaving them in the working directory with --cached. The only other differing use of git rm in the book is in Removing Objects where we briefly use and explain the --ignore-unmatch when running git filter-branch, which simply makes it not error out when the file we are trying to remove doesn’t exist.
This can be useful for scripting purposes."
1.Getting Started,git mv,The git mv command is a thin convenience command to move a file and then run git add on the new file and git rm on the old file. We only briefly mention this command in Moving Files.
1.Getting Started,1.Getting Started,There are just a handful of commands that implement most of the branching and merging functionality in Git.
1.Getting Started,git branch,"The git branch command is actually something of a branch management tool.
It can list the branches you have, create a new branch, delete branches and rename branches. Most of Git Branching is dedicated to the branch command and it’s used throughout the entire chapter.
We first introduce it in Creating a New Branch and we go through most of its other features (listing and deleting) in Branch Management. In Tracking Branches we use the git branch -u option to set up a tracking branch. Finally, we go through some of what it does in the background in Git References."
1.Getting Started,git checkout,"The git checkout command is used to switch branches and check content out into your working directory. We first encounter the command in Switching Branches along with the git branch command. We see how to use it to start tracking branches with the --track flag in Tracking Branches. We use it to reintroduce file conflicts with --conflict=diff3 in Checking Out Conflicts. We go into closer detail on its relationship with git reset in Reset Demystified. Finally, we go into some implementation detail in The HEAD."
1.Getting Started,git merge,"The git merge tool is used to merge one or more branches into the branch you have checked out.
It will then advance the current branch to the result of the merge. The git merge command was first introduced in Basic Branching.
Though it is used in various places in the book, there are very few variations of the merge command — generally just git merge <branch> with the name of the single branch you want to merge in. We covered how to do a squashed merge (where Git merges the work but pretends like it’s just a new commit without recording the history of the branch you’re merging in) at the very end of Forked Public Project. We went over a lot about the merge process and command, including the -Xignore-space-change command and the --abort flag to abort a problem merge in Advanced Merging. We learned how to verify signatures before merging if your project is using GPG signing in Signing Commits. Finally, we learned about Subtree merging in Subtree Merging."
1.Getting Started,git mergetool,The git mergetool command simply launches an external merge helper in case you have issues with a merge in Git. We mention it quickly in Basic Merge Conflicts and go into detail on how to implement your own external merge tool in External Merge and Diff Tools.
1.Getting Started,git log,"The git log command is used to show the reachable recorded history of a project from the most recent commit snapshot backwards.
By default it will only show the history of the branch you’re currently on, but can be given different or even multiple heads or branches from which to traverse.
It is also often used to show differences between two or more branches at the commit level. This command is used in nearly every chapter of the book to demonstrate the history of a project. We introduce the command and cover it in some depth in Viewing the Commit History.
There we look at the -p and --stat option to get an idea of what was introduced in each commit and the --pretty and --oneline options to view the history more concisely, along with some simple date and author filtering options. In Creating a New Branch we use it with the --decorate option to easily visualize where our branch pointers are located and we also use the --graph option to see what divergent histories look like. In Private Small Team and Commit Ranges we cover the branchA..branchB syntax to use the git log command to see what commits are unique to a branch relative to another branch.
In Commit Ranges we go through this fairly extensively. In Merge Log and Triple Dot we cover using the branchA…​branchB format and the --left-right syntax to see what is in one branch or the other but not in both.
In Merge Log we also look at how to use the --merge option to help with merge conflict debugging as well as using the --cc option to look at merge commit conflicts in your history. In RefLog Shortnames we use the -g option to view the Git reflog through this tool instead of doing branch traversal. In Searching we look at using the -S and -L options to do fairly sophisticated searches for something that happened historically in the code such as seeing the history of a function. In Signing Commits we see how to use --show-signature to add a validation string to each commit in the git log output based on if it was validly signed or not."
1.Getting Started,git stash,The git stash command is used to temporarily store uncommitted work in order to clean out your working directory without having to commit unfinished work on a branch. This is basically entirely covered in Stashing and Cleaning.
1.Getting Started,1.Getting Started,"There are not very many commands in Git that access the network, nearly all of the commands operate on the local database.
When you are ready to share your work or pull changes from elsewhere, there are a handful of commands that deal with remote repositories."
1.Getting Started,git fetch,The git fetch command communicates with a remote repository and fetches down all the information that is in that repository that is not in your current one and stores it in your local database. We first look at this command in Fetching and Pulling from Your Remotes and we continue to see examples of its use in Remote Branches. We also use it in several of the examples in Contributing to a Project. We use it to fetch a single specific reference that is outside of the default space in Pull Request Refs and we see how to fetch from a bundle in Bundling. We set up highly custom refspecs in order to make git fetch do something a little different than the default in The Refspec.
1.Getting Started,git pull,"The git pull command is basically a combination of the git fetch and git merge commands, where Git will fetch from the remote you specify and then immediately try to merge it into the branch you’re on. We introduce it quickly in Fetching and Pulling from Your Remotes and show how to see what it will merge if you run it in Inspecting a Remote. We also see how to use it to help with rebasing difficulties in Rebase When You Rebase. We show how to use it with a URL to pull in changes in a one-off fashion in Checking Out Remote Branches. Finally, we very quickly mention that you can use the --verify-signatures option to it in order to verify that commits you are pulling have been GPG signed in Signing Commits."
1.Getting Started,git push,"The git push command is used to communicate with another repository, calculate what your local database has that the remote one does not, and then pushes the difference into the other repository.
It requires write access to the other repository and so normally is authenticated somehow. We first look at the git push command in Pushing to Your Remotes.
Here we cover the basics of pushing a branch to a remote repository.
In Pushing we go a little deeper into pushing specific branches and in Tracking Branches we see how to set up tracking branches to automatically push to.
In Deleting Remote Branches we use the --delete flag to delete a branch on the server with git push. Throughout Contributing to a Project we see several examples of using git push to share work on branches through multiple remotes. We see how to use it to share tags that you have made with the --tags option in Sharing Tags. In Publishing Submodule Changes we use the --recurse-submodules option to check that all of our submodules work has been published before pushing the superproject, which can be really helpful when using submodules. In Other Client Hooks we talk briefly about the pre-push hook, which is a script we can setup to run before a push completes to verify that it should be allowed to push. Finally, in Pushing Refspecs we look at pushing with a full refspec instead of the general shortcuts that are normally used.
This can help you be very specific about what work you wish to share."
1.Getting Started,git remote,"The git remote command is a management tool for your record of remote repositories.
It allows you to save long URLs as short handles, such as “origin” so you don’t have to type them out all the time.
You can have several of these and the git remote command is used to add, change and delete them. This command is covered in detail in Working with Remotes, including listing, adding, removing and renaming them. It is used in nearly every subsequent chapter in the book too, but always in the standard git remote add <name> <url> format."
1.Getting Started,git archive,The git archive command is used to create an archive file of a specific snapshot of the project. We use git archive to create a tarball of a project for sharing in Preparing a Release.
1.Getting Started,git show,"The git show command can show a Git object in a simple and human readable way.
Normally you would use this to show the information about a tag or a commit. We first use it to show annotated tag information in Annotated Tags. Later we use it quite a bit in Revision Selection to show the commits that our various revision selections resolve to. One of the more interesting things we do with git show is in Manual File Re-merging to extract specific file contents of various stages during a merge conflict."
1.Getting Started,git shortlog,"The git shortlog command is used to summarize the output of git log.
It will take many of the same options that the git log command will but instead of listing out all of the commits it will present a summary of the commits grouped by author. We showed how to use it to create a nice changelog in The Shortlog."
1.Getting Started,1.Getting Started,"Git has a couple of commands that are used to help debug an issue in your code.
This ranges from figuring out where something was introduced to figuring out who introduced it."
1.Getting Started,git bisect,The git bisect tool is an incredibly helpful debugging tool used to find which specific commit was the first one to introduce a bug or problem by doing an automatic binary search. It is fully covered in Binary Search and is only mentioned in that section.
1.Getting Started,git blame,"The git blame command annotates the lines of any file with which commit was the last one to introduce a change to each line of the file and what person authored that commit.
This is helpful in order to find the person to ask for more information about a specific section of your code. It is covered in File Annotation and is only mentioned in that section."
1.Getting Started,1.Getting Started,"A few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.
These commands help you manage your branches in this manner."
1.Getting Started,git cherry-pick,"The git cherry-pick command is used to take the change introduced in a single Git commit and try to re-introduce it as a new commit on the branch you’re currently on.
This can be useful to only take one or two commits from a branch individually rather than merging in the branch which takes all the changes. Cherry picking is described and demonstrated in Rebasing and Cherry-Picking Workflows."
1.Getting Started,git rebase,"The git rebase command is basically an automated cherry-pick.
It determines a series of commits and then cherry-picks them one by one in the same order somewhere else. Rebasing is covered in detail in Rebasing, including covering the collaborative issues involved with rebasing branches that are already public. We use it in practice during an example of splitting your history into two separate repositories in Replace, using the --onto flag as well. We go through running into a merge conflict during rebasing in Rerere. We also use it in an interactive scripting mode with the -i option in Changing Multiple Commit Messages."
1.Getting Started,1.Getting Started,"Many Git projects, including Git itself, are entirely maintained over mailing lists.
Git has a number of tools built into it that help make this process easier, from generating patches you can easily email to applying those patches from an email box."
1.Getting Started,git apply,"The git apply command applies a patch created with the git diff or even GNU diff command.
It is similar to what the patch command might do with a few small differences. We demonstrate using it and the circumstances in which you might do so in Applying Patches from Email."
1.Getting Started,git am,"The git am command is used to apply patches from an email inbox, specifically one that is mbox formatted.
This is useful for receiving patches over email and applying them to your project easily. We covered usage and workflow around git am in Applying a Patch with am including using the --resolved, -i and -3 options. There are also a number of hooks you can use to help with the workflow around git am and they are all covered in Email Workflow Hooks. We also use it to apply patch formatted GitHub Pull Request changes in Email Notifications."
1.Getting Started,git format-patch,The git format-patch command is used to generate a series of patches in mbox format that you can use to send to a mailing list properly formatted. We go through an example of contributing to a project using the git format-patch tool in Public Project over Email.
1.Getting Started,git imap-send,The git imap-send command uploads a mailbox generated with git format-patch into an IMAP drafts folder. We go through an example of contributing to a project by sending patches with the git imap-send tool in Public Project over Email.
1.Getting Started,git send-email,The git send-email command is used to send patches that are generated with git format-patch over email. We go through an example of contributing to a project by sending patches with the git send-email tool in Public Project over Email.
1.Getting Started,1.Getting Started,Git comes with a few commands to integrate with other version control systems.
1.Getting Started,git svn,"The git svn command is used to communicate with the Subversion version control system as a client.
This means you can use Git to checkout from and commit to a Subversion server. This command is covered in depth in Git and Subversion."
1.Getting Started,1.Getting Started,"If you’re administering a Git repository or need to fix something in a big way, Git provides a number of administrative commands to help you out."
1.Getting Started,git gc,"The git gc command runs “garbage collection” on your repository, removing unnecessary files in your database and packing up the remaining files into a more efficient format. This command normally runs in the background for you, though you can manually run it if you wish.
We go over some examples of this in Maintenance."
1.Getting Started,git fsck,The git fsck command is used to check the internal database for problems or inconsistencies. We only quickly use this once in Data Recovery to search for dangling objects.
1.Getting Started,git reflog,"The git reflog command goes through a log of where all the heads of your branches have been as you work to find commits you may have lost through rewriting histories. We cover this command mainly in RefLog Shortnames, where we show normal usage to and how to use git log -g to view the same information with git log output. We also go through a practical example of recovering such a lost branch in Data Recovery."
